{"route":"/","type":"course","title":"Enterprise Web Development\r","summary":"javascript · SPA · react · APIs · front-end","contentMd":"Enterprise Web Development\r\n\r\njavascript · SPA · react · APIs · front-end \r\n\r\n","frontMatter":{},"id":"ewd-2024","img":"https://{{COURSEURL}}/course.png","imgFile":"course.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"route":"/topic/{{COURSEURL}}/topic00","type":"topic","title":" Module overview,\r","summary":"A look at the context for this module.","contentMd":"# Module overview,\r\n\r\nA look at the context for this module.","frontMatter":{},"id":"topic00","img":"https://{{COURSEURL}}/topic00/topic.png","imgFile":"topic.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"route":"/talk/{{COURSEURL}}/topic00/talk-1","type":"talk","title":" Overview.\r","summary":"The context and specific technology stack for this module.","contentMd":"# Overview.\r\n\r\nThe context and specific technology stack for this module.","frontMatter":{},"id":"talk-1","img":"https://{{COURSEURL}}/topic00/talk-1/overview.png","imgFile":"overview.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"pdf":"https://{{COURSEURL}}/topic00/talk-1/overview.pdf","pdfFile":"overview.pdf"}]},{"route":"/topic/{{COURSEURL}}/topic01","type":"topic","title":" Typescript Language.\r","summary":"A crash course on the Typescript language from a Javascript developer's perspective.","contentMd":"# Typescript Language.\r\n \r\nA crash course on the Typescript language from a Javascript developer's perspective.","frontMatter":{},"id":"topic01","img":"https://{{COURSEURL}}/topic01/topic.png","imgFile":"topic.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"route":"/talk/{{COURSEURL}}/topic01/talk-1","type":"talk","title":" Introduction to Typescript.\r","summary":"The main constructs including interfaces, classes, aliases, generics, utilities.","contentMd":"# Introduction to Typescript.\r\n \r\nThe main constructs including interfaces, classes, aliases, generics, utilities.","frontMatter":{},"id":"talk-1","img":"https://{{COURSEURL}}/topic01/talk-1/Typescript.png","imgFile":"Typescript.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"pdf":"https://{{COURSEURL}}/topic01/talk-1/Typescript.pdf","pdfFile":"Typescript.pdf"},{"route":"/lab/{{COURSEURL}}/topic01/book-1","type":"lab","title":"Typescript_Basics","summary":"In this lab, you are introduced to some of the basic syntax and concepts of the Typescript language. Each section demonstrates an aspect of the language and may include an exercise to allow you to practice it. \r","contentMd":"# Introducton to Typescript.\r\n\r\nIn this lab, you are introduced to some of the basic syntax and concepts of the Typescript language. Each section demonstrates an aspect of the language and may include an exercise to allow you to practice it. \r\n\r\n## Prerequisites.\r\n\r\nTo use TypeScript your local development environment must include the following:\r\n\r\n+ The NodeJS runtime platform (v18+) and the npm package manager.\r\n+ The Visual Studio code editor.","frontMatter":{},"id":"book-1","img":"https://{{COURSEURL}}/topic01/book-1/img/main.png","imgFile":"img/main.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"title":" Introducton to Typescript.","shortTitle":"Typescript_Basics","contentMd":"# Introducton to Typescript.\r\n\r\nIn this lab, you are introduced to some of the basic syntax and concepts of the Typescript language. Each section demonstrates an aspect of the language and may include an exercise to allow you to practice it. \r\n\r\n## Prerequisites.\r\n\r\nTo use TypeScript your local development environment must include the following:\r\n\r\n+ The NodeJS runtime platform (v18+) and the npm package manager.\r\n+ The Visual Studio code editor.","route":"/lab/{{COURSEURL}}/topic01/book-1/Typescript_Basics","id":"Typescript_Basics","type":"step"},{"title":" Startup.","shortTitle":"Startup","contentMd":"## Startup.\r\n\r\nCreate a new folder called `typescriptExercises`. In a terminal/shell window, cd to the new folder and type the following setup command sequence:\r\n\r\n~~~bash\r\n$ npm init          (Accept the defaults in most cases)\r\n$ npm install -D typescript@4.8.4\r\n$ npm install -D ts-node\r\n$ npx tsc --init     (This creates a default tscongig.json file)\r\n$ git init\r\n~~~\r\nImport the folder into VS Code and create the `.gitignore` file with the following content:\r\n~~~\r\n/node_modules\r\n.vscode\r\n~~~\r\nOpen an integrated terminal panel in VS Code and type the commands:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Initial structure.\"\r\n~~~\r\n\r\nIn GitHub, create a new repository called 'ewd-ts-lab'. In VS Code, make this a remote repository for the typescriptExercises project using the command:\r\n~~~bash\r\n$ git remote add origin [your repo URL]\r\n~~~\r\n","route":"/lab/{{COURSEURL}}/topic01/book-1/Startup","id":"Startup","type":"step"},{"title":" Interface Data Types.","shortTitle":"interfaces","contentMd":"## Interface Data Types.\r\n\r\nIn the new project, create the folder `src`, and inside it create the file `01-basics.ts`. Paste in the following Javascript (yse, JS) code:\r\n~~~js\r\n// (Optional) Change the names below to your friends.\r\n\r\nconst friend1 = {\r\n  name: \"Paul Fleming\",\r\n  phone: \"087-12345\",\r\n  age: 25,\r\n};\r\n\r\nconst friend2 = {\r\n  name: \"Jane Costello\",\r\n  phone: \"086--12345\",\r\n  age: 31,\r\n};\r\n\r\nconst friends = [friend1, friend2];\r\nconsole.log(friends[1]);\r\n\r\n//   -------------------\r\nconst colleague1 = {\r\n  name: \"Ralph Graham\",\r\n  department: \"Engineering\",\r\n  contact: {\r\n    email: \"rgraham@company.com\",\r\n    extension: 121,\r\n  },\r\n};\r\n\r\nconst colleague2 = {\r\n  name: \"Patti Burke\",\r\n  department: \"Finance\",\r\n  contact: {\r\n    email: \"pburke@company.com\",\r\n    extension: 132,\r\n  },\r\n};\r\n\r\nconst colleague3 = {\r\n  name: \"Dean Sullivan\",\r\n  department: \"HR\",\r\n  contact: {\r\n    email: \"dos@company.com\",\r\n    extension: 125,\r\n  },\r\n};\r\nconst colleagues = {\r\n  current: [colleague1, colleague2, colleague3],\r\n  former: [],\r\n};\r\n\r\nconsole.log(colleagues.current[0]);\r\n~~~\r\n\r\nRun this script:\r\n~~~bash\r\n$ npx ts-node src/01-basics.ts\r\n~~~ \r\nNotice that VS Code reports no TS compiler errors because all JS is valid TS:\r\n\r\n![][noprob] \r\n\r\nHowever, we should make the code more type-safe. At the top of the file, add an interface declaration:\r\n~~~ts\r\ninterface Friend {\r\n    name: string;\r\n    phone: string;\r\n    age: number\r\n}\r\n~~~\r\n\r\n___You are required___ to use the Friend data type in all of the variable declarations that relate to friend objects in the script (e.g.friend1, friend2, the friends array). Rerun the script to ensure it still works.\r\n\r\nCommit the changes:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Added type-safety to friend data.\"\r\n~~~\r\n\r\n___You are required___ to define an appropriate data type (interface) for the colleague objects (Ignore the colleagues data structure for now). Pay attention to the Problems panel in VS Code for any errors. Rerun the script when completed.\r\n\r\nCommit the changes:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Added type-safety to colleague data\"\r\n~~~\r\n\r\nTo complete the data typing for this script, add the following interface declaration:\r\n~~~ts\r\ninterface ColleagueHistory {\r\n  current: Colleague[],\r\n  former: Colleague[]\r\n}\r\n~~~\r\nAnd update the colleagues data structure with this type:\r\n~~~ts\r\nexport const colleagues : ColleagueHistory = {\r\n  current: [colleague1, colleague2, colleague3],\r\n  former: [],\r\n};\r\n~~~\r\n\r\nCommit the changes:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Complete type-safety to colleagues data\"\r\n$ git push origin master\r\n~~~\r\n\r\n[noprob]: ./img/noprob.png\r\n","route":"/lab/{{COURSEURL}}/topic01/book-1/interfaces","id":"interfaces","type":"step"},{"title":" Functions.","shortTitle":"functions","contentMd":"## Functions.\r\n\r\n### Setup.\r\nCreate the file `src/myTypes.d.ts` and add the following declarations:\r\n~~~ts\r\n\r\nexport interface Friend {\r\n    name: string;\r\n    phone: string;\r\n    age: number\r\n}\r\n\r\nexport interface Colleague {\r\n    name: string;\r\n    department: string;\r\n    contact: {\r\n      email: string;\r\n      extension: number\r\n    } \r\n  }\r\n\r\nexport interface ColleagueHistory {\r\n  current: Colleague[],\r\n  former: Colleague[]\r\n}\r\n~~~\r\nIn `01-basics.ts`, make the following changes: \r\n+ Add an import at the top:\r\n~~~ts\r\nimport {Friend, Colleague, ColleagueHistory } from './myTypes'\r\n~~~\r\n+ Remove the three redundant interface declarations (created in the previous section).\r\n+ Comment out all the 'console.log()` statements.\r\n+ Export the collection data structures:\r\n~~~ts\r\nexport const friends = [friend1, friend2];\r\n\r\nexport const colleagues = { ... as before ...};\r\n~~~\r\n\r\nCreate the file `src/02-functions.ts` and add this line:\r\n~~~ts\r\nimport {Friend, Colleague } from './myTypes'\r\n~~~\r\n\r\nCommit the changes:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Refactor - Add type declaration file; disable redundant console logs.\"\r\n$ git push origin master\r\n~~~\r\n### Typed function signatures.\r\n\r\nAdd the following code to `02-functions.ts`:\r\n~~~ts\r\nfunction older(f: Friend) : string {\r\n     f.age += 1\r\n     return `${f.name} is now ${f.age}` \r\n}\r\n\r\nconsole.log(older(friends[0]))\r\n~~~\r\nNote the function's parameter type and return type. Run the script:\r\n~~~bash\r\n$ npx ts-node  src/02-functions.ts \r\n~~~\r\n\r\n-----------------\r\n\r\n__You are required to__ add a new function, called 'allOlder', that takes an array of friend objects, increments each one's age by one year, and returns the new ages as an array of strings. For example, the statement:\r\n~~~ts\r\nconsole.log(allOlder(friends))\r\n~~~\r\nshould output:\r\n~~~bash\r\n[ 'Paul Fleming is now 27', 'Jane Costello is now 32' ]\r\n~~~\r\nPlease complete this exercise before continuing.\r\n\r\n--------------------\r\n\r\nNext, add the following code to the end of the file:\r\n~~~ts\r\n// Find the colleague with the highest extension number.\r\nfunction highestExtension(cs: Colleague[]): Colleague {\r\n  const result = cs.sort(\r\n    (c1, c2) => c1.contact.extension - c2.contact.extension\r\n  );\r\n  return result[cs.length - 1];\r\n}\r\nconsole.log(highestExtension(colleagues.current));\r\n~~~\r\nThe 'highestExtension' function returns the colleague with the highest extension number. It sorts the array of colleagues in ascending extension number order and then picks the last entry in the sorted array. Run the script to confirm it works.\r\n\r\n__You are required to__ wrute a function called 'addColleague' that adds a colleague to an array, and setting their extensins number to the highest extension, plus 1. To test your implementation, add the following code to end of the script:\r\n~~~ts\r\naddColleague(colleagues.current, \"Sheild O Connell\", \"HR\", \"soc@here.com\");\r\nconsole.log(colleagues.current.filter((c) => c.name === \"Sheild O Connell\"));\r\n~~~\r\nIt should output the following:\r\n~~~bash\r\n[\r\n  {\r\n    name: 'Sheild O Connell',\r\n    department: 'HR',\r\n    contact: { email: 'soc@here.com', extension: 133 }\r\n  }\r\n]\r\n~~~\r\n\r\nCommit the changes:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Typed function signature.\"\r\n$ git push origin master\r\n~~~\r\n\r\n### Type inference.\r\n\r\nNotice how the compiler infers the type of the result from the array sort method:\r\n\r\n![][infer] \r\n\r\nIn many cases, the compiler can infer the type of a variable. For example, make the change below:\r\n~~~ts\r\nfunction highestExtension(cs: Colleague[]) { // Inferred retun type\r\n  const result = cs.sort(\r\n    (c1, c2) => c1.contact.extension - c2.contact.extension\r\n  );\r\n  return result[cs.length - 1];\r\n}\r\n~~~\r\n\r\nWhen we check the signature with VS Code's intellisense, it is still correct:\r\n\r\n![][infer2] \r\n\r\n__You are required to__ leverage type inferencing in the other functions in the script. It does not need to be exhaustive, and always keep an eye on the Problems panel of VS Code.\r\n\r\n\r\n### Higher Order functions.\r\n\r\nSuppose we want a function that takes an array of colleagues and a sorting criterion, and returns the sorted data, but only includes names and emails in the  response. First, add a new data interface to `myTypes.d.ts`:\r\n~~~ts\r\nexport interface EmailContact {\r\n    name: string;\r\n    email: string\r\n}\r\n~~~\r\nNow, add the following code to the end of `02-functions.ts`:\r\n~~~ts\r\nfunction sortColleagues(\r\n  colleagues: Colleague[],\r\n  sorter: (c1: Colleague, c2: Colleague) => number\r\n): EmailContact[] {\r\n  const sorted = colleagues.sort(sorter); // Colleague[] inferred\r\n  const result: EmailContact[] = sorted.map((ce) => ({ name: ce.name, email: ce.contact.email }));\r\n  return result \r\n}\r\n\r\nconsole.log(sortColleagues(colleagues.current, (a, b) => a.contact.extension - b.contact.extension));\r\nconsole.log(sortColleagues(colleagues.current, (a, b) => a.name.length - b.name.length));\r\n~~~\r\nThe type for the second argument of 'sortColleagues' is a callback (function) that takes two Colleague objects and returns a numeric value computed from comparing them. SortColleagues uses the callback to sort the array of colleagues. The two console.log statements test the new function. The first one provides a callback that sorts colleagues by extension number, and the second one uses the length of a colleague's name as the sorting criteria. Run the script to see the results.\r\n\r\n----------------------\r\n\r\n__You are required to__ write a function called 'findFriends' that searches an array of friends for those that satisfy a criterion. The criterion is specified as a callback. For example, consider these two invocations of the function:\r\n~~~ts\r\nconsole.log(findFriends(friends, (friend) => friend.name.startsWith('Pa')));\r\nconsole.log(findFriends(friends, (friend) => friend.age < 35));\r\n~~~\r\nThey would output the following results (assuming you did not alter the original friends array):\r\n~~~bash\r\n[ 'Paul Fleming' ]\r\n[ 'Paul Fleming', 'Jane Costello' ]\r\n~~~\r\n\r\n--------------------------\r\n\r\nCommit the changes:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Higher-order functions\"\r\n$ git push origin master\r\n~~~\r\n\r\n[infer]: ./img/infer.png\r\n[infer2]: ./img/infer2.png\r\n","route":"/lab/{{COURSEURL}}/topic01/book-1/functions","id":"functions","type":"step"},{"title":" Optionals.","shortTitle":"optionals","contentMd":"## Optionals.\r\n\r\nIn `myTypes.d.ts`, change the Friend  type to the following:\r\n~~~ts\r\nexport interface Friend {\r\n    name: string;\r\n    phone: string;\r\n    dob? : Date;   // New\r\n    age: number;\r\n    interests? : string[]   // New\r\n}\r\n~~~\r\nThe new properties added are optional. Open `01-basics.ts` and notice the current Friend objects declared in this code do not have compiler errors, even though we have changed the structure of the Friend type.\r\n\r\nChange some of the Friend objects to include a date of birth property and interests property, for  example:\r\n~~~ts\r\nconst friend1 : Friend = {\r\n  name: \"Paul Fleming\",\r\n  phone: \"087-12345\",\r\n  age: 25,\r\n  dob: new Date(\"1998-11-20\") ,\r\n};\r\n\r\nconst friend2 : Friend = {\r\n  name: \"Jane Costello\",\r\n  phone: \"086--12345\",\r\n  age: 31,\r\n  interests: ['Music', 'Sport']\r\n};\r\n~~~ \r\n\r\nIn `02-functions.ts`, suppose we want a parameter in the 'sortColleagues' function that specifies the maximum number of entries in the response array. Change it as shown below and update the test invocations:\r\n~~~ts\r\nfunction sortColleagues(\r\n  colleagues: Colleague[],\r\n  sorter: (c1: Colleague, c2: Colleague) => number,\r\n  max : number\r\n): EmailContact[] {\r\n  const end = max < 2 ? 1 : max\r\n  const sorted = colleagues.sort(sorter);\r\n  const fullResult =  sorted.map((ce) => ({ name: ce.name, email: ce.contact.email }));\r\n  return fullResult.slice(0,end)\r\n}\r\n// Test invocations\r\nconsole.log(sortColleagues(colleagues.current, (a, b) => (a.contact.extension - b.contact.extension),3));\r\nconsole.log(sortColleagues(colleagues.current, (a, b) => (a.name.length - b.name.length),1));\r\n~~~\r\nRun the script to confirm it works. \r\n\r\n### Optional parameters.\r\n\r\nSuppose we make the new parameter optional so that when it's omitted, the full sorted array is returned.\r\n~~~ts\r\nfunction sortColleagues(\r\n  colleagues: Colleague[],\r\n  sorter: (c1: Colleague, c2: Colleague) => number,\r\n  max? : number     // CHANGED\r\n): EmailContact[] {\r\n   .... as before ...\r\n}\r\n~~~\r\nThe TS compiler reports an error because the code potentially might try comparing the undefined value with a number:\r\n\r\n![][optionalError] \r\n\r\nFix this error with the following code update:\r\n~~~ts\r\nfunction sortColleagues(\r\n  colleagues: Colleague[],\r\n  sorter: (c1: Colleague, c2: Colleague) => number,\r\n  max? : number\r\n): EmailContact[] {\r\n  let end = colleagues.length;\r\n  if (max !== undefined) {\r\n     end = max < 2 ? 1 : max\r\n  }\r\n  const sorted = colleagues.sort(sorter);\r\n  const fullResult =  sorted.map((ce) => ({ name: ce.name, email: ce.contact.email }));\r\n  return fullResult.slice(0,end)\r\n}\r\n// Test invocations\r\nconsole.log(sortColleagues(colleagues.current, (a, b) => (a.contact.extension - b.contact.extension),3));\r\nconsole.log(sortColleagues(colleagues.current, (a, b) => (a.name.length - b.name.length),1));\r\nconsole.log(sortColleagues(colleagues.current, (a, b) => (a.name.length - b.name.length))); // NEW\r\n~~~\r\nRerun the script.\r\n\r\nCommit the changes:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Demo optional properties and parameters.\"\r\n$ git push origin master\r\n~~~\r\n\r\n--------------------------\r\n\r\nRecall we added an optional property called 'interests' to the Friend data type.__You are required to__ write a function that adds an interest to a friend's array of interests and returns the updated interests array (of strings). A typical invocation of the function might be: \r\n~~~ts\r\nconsole.log(addInterest(friends[0], 'Politics'))\r\n~~~\r\nAnd the response displayed by the log statement might be the following:\r\n~~~bash\r\n[ 'Music', 'Sport', 'Politics' ]\r\n~~~\r\nThis new function has no optional parameters. However, its implementation must deal with an 'undefined' case, i.e. the friend object currently does not have an interests property. The function should create the new property in this scenario.\r\n\r\nCommit these changes:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Function to update friend's interests.\"\r\n$ git push origin master\r\n~~~\r\n\r\n[optionalError]: ./img/optionalError.png\r\n","route":"/lab/{{COURSEURL}}/topic01/book-1/optionals","id":"optionals","type":"step"},{"title":" Type Aliases.","shortTitle":"typeAliases","contentMd":"## Type Aliases.\r\n\r\nIn `myTypes.d.ts`, declare the following types at the end of the file:\r\n~~~ts\r\nexport type Department = \"Engineering\" | \"Finance\" | \"HR\";\r\nexport interface ColleagueV2 {\r\n  name: string;\r\n  department: Department;    // *****\r\n  contact: {\r\n    email: string;\r\n    extension: number;\r\n    slack?: string;\r\n  };\r\n}\r\n\r\nexport type Buddy = Friend | ColleagueV2;\r\nexport type Administrator = Buddy | string | undefined\r\n\r\nexport type BuddyList = {\r\n  name: string;\r\n  administrator: Administrator;\r\n  members: Buddy[];\r\n};\r\n~~~\r\n\r\nThe Department declaration above is termed a Literal Type. We could refactor our Colleague data interface to use Department, but that would trigger lots of compiler errors. Hence, for convenience we declared the ColleagueV2 interface, which we can use from here on. \r\n\r\nCreate a new file called `src/03-typeAliases.ts` and add the following code:\r\n~~~ts\r\nimport {\r\n  ColleagueV2,\r\n  Friend,\r\n  Buddy,\r\n  BuddyList,\r\n  Administrator,\r\n} from \"./myTypes\";\r\nimport { friends } from \"./01-basics\";\r\n~~~\r\n\r\nCopy the colleague objects from `01-basics.ts` into `03-typeAliases.ts`, but change the type to ColleagueV2, for example:\r\n~~~ts\r\nconst colleague1: ColleagueV2 = {\r\n  name: \"Ralph Graham\",\r\n  department: \"Engineering\",\r\n  contact: {\r\n    email: \"rgraham@company.com\",\r\n    extension: 121,\r\n  },\r\n};\r\n~~~\r\nHover over the 'department' property and check its type - it should be Department instead of string.\r\n\r\nAdd the following code to the end of `03-typeAliases.ts`:\r\n~~~ts\r\nfunction makeBuddyList(\r\n  name: string,\r\n  buddies: Buddy[],\r\n  admin?: Administrator\r\n): BuddyList {\r\n  return {\r\n    name,\r\n    members: buddies,\r\n    administrator: admin,\r\n  } as BuddyList;\r\n  // The as operator above casts an object to a specific type.\r\n}\r\n// Tests for makeBuddyList\r\nconst myFootballBuddies = makeBuddyList(\r\n  \"Football team\",\r\n  [colleague1, friends[0], colleague2],\r\n  colleague1\r\n)\r\n\r\nconst myBandBuddies = makeBuddyList(\r\n    \"Band name\",\r\n    [colleague1, friends[1]]\r\n    // No administrator\r\n  )\r\n\r\nconsole.log(myFootballBuddies)\r\nconsole.log(myBandBuddies)\r\n//--------------------------------------\r\nfunction findBuddyContact(list: BuddyList, name: string): string | undefined {\r\n  for (const buddy of list.members) {\r\n    if (buddy.name === name) {\r\n      if (\"phone\" in buddy) {\r\n        return buddy.phone;\r\n      }\r\n      else {\r\n        return buddy.contact.email;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n// Test for findBuddyContact.\r\nconsole.log(\"Contact buddy at: \", findBuddyContact(myFootballBuddies, \"Ralph Graham\"));\r\n~~~\r\nThe 'makeBuddyList' function creates a BuddyList data structure instance. It handles cases when the list's Administrator property is initialized and the case when it's undefined. \r\n\r\nThe 'findBuddyContact' function iterates over the members of a BuddyList looking for a Buddy with a specified name. If found, it determines the buddy type (Friend or ColleagueV2) and returns their contact information - the phone number for Friend and the email for ColleagueV2. The conditional statement (if-else) for choosing a Buddy's type is termed __type narrowing__. Note how the compiler infers the correct narrowed type inside the both sides of the statement:\r\n\r\n![][narrow1] \r\n\r\n![][narrow2] \r\n\r\n\r\nRun the `03-typeAliases.ts` script to ensure you understand it.\r\n\r\n-------------------------------\r\n\r\n__You are required__ to write a function that returns all the Friends in a buddy list. Its signature should be:\r\n~~~ts\r\nfunction getBuddyListFriends(list: BuddyList): Friend[] {\r\n\r\n~~~\r\n[Hint: Use the array reduce method in the solution, where the objective is to reduce an array of Buddy objects to an array of Friend objects, i.e. only some of the entries in the Buddy array are Friends.]\r\n\r\n----------------------------------------------\r\n\r\nCommit the changes:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Type aliases demonstration.\"\r\n$ git push origin master\r\n~~~\r\n\r\n[narrow1]: ./img/narrow1.png\r\n[narrow2]: ./img/narrow2.png\r\n","route":"/lab/{{COURSEURL}}/topic01/book-1/typeAliases","id":"typeAliases","type":"step"},{"title":" Generics.","shortTitle":"generics","contentMd":"## Generics.\r\n\r\nCreate the file `src/04-generics.ts` and add the following code:\r\n~~~ts\r\nimport {friends, colleagues} from './01-basics'\r\nimport {Friend, Colleague} from './myTypes'\r\n\r\nfunction findMatch<T>( data : T[], criteria: (d: T) => boolean ) : T | undefined {\r\n    return data.find((criteria))\r\n}\r\n\r\nconsole.log(findMatch<Friend>(friends, (f) => f.name.startsWith('Jane')  ))\r\nconsole.log(findMatch<Colleague>(colleagues.current, (c) => c.department === 'Finance'  ))\r\n~~~\r\n\r\nThe 'findMatch' function is generic. It takes an array of any type and finds the first element that matches a criterion specified as its second parameter; otherwise, it returns undefined when no match is found. Run this script to see if it is working. \r\n\r\n__You are required__ to write a generic function that returns a sorted copy of an array of any type, where the second parameter is the sorting criterion. Use the following log statements to test your implementation \r\n~~~ts\r\n// Sort friends by age\r\nconsole.log(sort<Friend>(friends, (a, b) => a.age - b.age));\r\n// Sort colleagues by extension number\r\nconsole.log(\r\n  sort<Colleague>(\r\n    colleagues.current,\r\n    (a, b) => a.contact.extension - b.contact.extension\r\n  )\r\n);\r\n~~~\r\n\r\nCommit this work:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Functions with generics.\"\r\n$ git push origin master\r\n~~~\r\n","route":"/lab/{{COURSEURL}}/topic01/book-1/generics","id":"generics","type":"step"},{"title":" Utility Types.","shortTitle":"utilityTypes","contentMd":"## Utility Types.\r\n\r\nIn `src/myTypes.d.ts`, declare three new types:\r\n~~~ts\r\nexport type FriendPartial = Partial<Friend>\r\n// Type for gaining access to an event, e.g. concert.\r\nexport type EventPass = Omit<Colleague, \"contact\"> & {\r\n  passCode : number;\r\n}\r\n// Immutable person type, based on Friend type.\r\nexport type SecureFriendContact = Readonly<Pick<Friend,\"name\" | \"phone\" > >\r\n~~~\r\nThe FriendPartial type has the same structure as Friend, but all its properties are optional. The EventPass type has the same properties as Colleague except for contact and has an additional property called passCode. The SecureFriendContact type demonstrates the composition of utility types. It generates a type with the same structure as Friend except for age and dob. However, instances of this type are immutable.\r\n\r\nCreate the file `src/05-utilityTypes.ts` and add the following code:\r\n~~~ts\r\nimport { friends, colleagues } from \"./01-basics\";\r\nimport { Friend, Colleague, SecureFriendContact, FriendPartial } from \"./myTypes\";\r\n\r\nfunction updateFriend(friend: Friend, updates: FriendPartial ) : Friend {\r\n  return { ...friend, ...updates}\r\n}\r\n\r\nconsole.log(updateFriend(friends[0], {\r\n  phone: '08712345',\r\n  dob: new Date(\"1998-10-22\")\r\n}))\r\n~~~\r\nExamine the above code and then run the script.\r\n\r\nAdd the following to the end of `05-utilityTypes.ts`:\r\n~~~ts\r\nfunction secureFindFriends(\r\n  friends: Friend[],\r\n  criteria: (f: Friend) => boolean\r\n): SecureFriendContact[] {\r\n  const matches = friends.filter(criteria);\r\n  return matches.map((f) => {\r\n    const secure: SecureFriendContact = {\r\n      name: f.name,\r\n      phone: f.phone,\r\n    };\r\n    return secure;\r\n  });\r\n}\r\nlet result = secureFindFriends(\r\n    friends,\r\n    (f: Friend) => f.age < 30\r\n)\r\nconsole.log(result)\r\n~~~\r\nThe new function searches through an array of friends for matches. A read-only copy of each matching object is added to the returned array. To prove the response is read-only, add the following line after the console.log:\r\n~~~ts\r\nresult[0].phone = '08654321'\r\n~~~\r\nIt causes the following compiler error:\r\n\r\n![][error] \r\n\r\nTo demonstrate the new EventPass type, suppose we want a function that generates a pass code for a colleague to allow them entry to an event. Add this code to the script file and run it to see its output:\r\n~~~ts\r\nfunction generateEventPass(colleague: Colleague): EventPass {\r\n  const passCode = Math.round(Math.random() * (1000 - 1) + 1);\r\n  return {\r\n    name: colleague.name,\r\n    department: colleague.department,\r\n    passCode: passCode,\r\n  };\r\n}\r\nconsole.log(generateEventPass(colleagues.current[0]));\r\n~~~\r\n\r\nThe function below finds the intersection of a friends array and a colleagues array, based on matching the name property; however, the function is __incomplete__. It returns an array of objects with a mix of properties from the Friend and Colleagues types, as follows:\r\n\r\n+ name\r\n+ age\r\n+ contact:\r\n   + email\r\n   + extension\r\n\r\n__You are required__ to complete the function - replace the ?? markers with code and declare any new types required, using utility types where possible.\r\n~~~ts\r\nfunction intersection(\r\n  friends: Friend[],\r\n  colleagues: Colleague[]\r\n): ?? {\r\n  let result: ?? = []\r\n  friends.reduce((res, friend) => {\r\n    const colleague = colleagues.find((col) => col.name === friend.name);\r\n    if (colleague) {\r\n      // Colleague is also a Friend\r\n      ??\r\n    }\r\n    return res;\r\n  }, result);\r\n  return result;\r\n}\r\n\r\nconsole.log(intersection(friends, colleagues.current));\r\n~~~\r\n\r\nCommit the above work:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Define types using Utility types.\"\r\n$ git push origin master\r\n~~~\r\n\r\n\r\n-------------------\r\n\r\n[error]: ./img/error.png\r\n","route":"/lab/{{COURSEURL}}/topic01/book-1/utilityTypes","id":"utilityTypes","type":"step"}]}]},{"route":"/topic/{{COURSEURL}}/topic01-kg","type":"topic","title":" The Web Browser,\r","summary":"A look at aspects of the web browser that are the foundations of modern web apps - DOM, events, event handlers.","contentMd":"# The Web Browser,\r\n\r\nA look at aspects of the web browser that are the foundations of modern web apps - DOM, events, event handlers.","frontMatter":{},"id":"topic01-kg","img":"https://{{COURSEURL}}/topic01-kg/topic.jpg","imgFile":"topic.jpg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":true,"los":[{"route":"/talk/{{COURSEURL}}/topic01-kg/talk-1","type":"talk","title":" The Web Browser.\r","summary":"The web browser is an event-driven programming environment.","contentMd":"# The Web Browser.\r\n\r\nThe web browser is an event-driven programming environment.","frontMatter":{},"id":"talk-1","img":"https://{{COURSEURL}}/topic01-kg/talk-1/webbrowser.jpg","imgFile":"webbrowser.jpg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"pdf":"https://{{COURSEURL}}/topic01-kg/talk-1/webbrowser.pdf","pdfFile":"webbrowser.pdf"},{"route":"/archive/{{COURSEURL}}/topic01-kg/archive","type":"archive","title":"Resources.\r","summary":"Basic DOM API samples.","contentMd":"Resources.\r\n\r\nBasic DOM API samples.\r\n","frontMatter":{},"id":"archive","img":"https://{{COURSEURL}}/topic01-kg/archive/archive.jpg","imgFile":"archive.jpg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"archiveFile":"archive.zip"}]},{"route":"/topic/{{COURSEURL}}/topic02","type":"topic","title":" Cloud Development Kit (CDK)\r","summary":"An IaC framework that uses an imperative programming model for declaring infrastructure.","contentMd":"# Cloud Development Kit (CDK)\r\n\r\nAn IaC framework that uses an imperative programming model for declaring infrastructure.","frontMatter":{},"id":"topic02","img":"https://{{COURSEURL}}/topic02/topic.png","imgFile":"topic.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"route":"/talk/{{COURSEURL}}/topic02/talk-2","type":"talk","title":" Cloud Development Kit (CDK).\r","summary":"An introduction to the CDK framework.","contentMd":"# Cloud Development Kit (CDK).\r\n \r\nAn introduction to the CDK framework.","frontMatter":{},"id":"talk-2","img":"https://{{COURSEURL}}/topic02/talk-2/CDK.png","imgFile":"CDK.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"pdf":"https://{{COURSEURL}}/topic02/talk-2/CDK.pdf","pdfFile":"CDK.pdf"},{"route":"/lab/{{COURSEURL}}/topic02/book-1","type":"lab","title":"AWS-CDK","summary":"The AWS Cloud Development Kit (AWS CDK) lets you define cloud infrastructure as code in various programming languages - we will use Typescript. Once defined, you can then provision the resources of that infrastructure using the CDK CLI. \r","contentMd":"# The Cloud Development Kit (CDK).\r\n\r\nThe AWS Cloud Development Kit (AWS CDK) lets you define cloud infrastructure as code in various programming languages - we will use Typescript. Once defined, you can then provision the resources of that infrastructure using the CDK CLI. \r\n\r\n### CDK Bootstrap.\r\n\r\nInstall the AWS CDK CLI globally using the following command (use the VS Code integrated terminal for convenience):\r\n~~~bash\r\n$ npm install -g aws-cdk@2.80.0\r\n~~~\r\nRun the following command to verify a correct installation:\r\n~~~bash\r\n$ cdk --version\r\n~~~\r\n\r\nTo deploy resources using the AWS CDK framework, your AWS account requires a dedicated S3 bucket and some other containers to be available - the AWS CloudFormation service uses them when provisioning infrastructure for an application. Creating these CDK-specific resources is called __bootstrapping__. First, you need to discover the 12-digit identification number for your AWS account using the following command:\r\n~~~bash\r\n$ aws sts get-caller-identity --query \"Account\" --output text\r\n~~~\r\nNow bootstrap your AWS account with the following command:\r\n~~~bash\r\n$ cdk bootstrap aws://YOUR-ACCOUNT-NUMBER/eu-west-1\r\n~~~\r\n>>e.g. cdk bootstrap aws://123456789012/eu-west-1\r\n\r\n-----------------------------------------\r\n\r\n__NOTE:__ The above command assumes you ar using your __default profile credentials__ to access your AWS account. If you have multiple AWS accounts and wish to use a specific one for this module then include the --profile option in the command, e.g.\r\n~~~bash\r\n$ cdk --profile myProfileName bootstrap aws://YOUR-ACCOUNT-NUMBER/eu-west-1\r\n~~~\r\nIn fact, all cdk commands must include the --profile option in this scenario.\r\n\r\n--------------------------------------------\r\n\r\nConfirm that this worked by navigating to the CloudFormation service in the AWS web management console and checking for the presence of the CDKToolkit stack:\r\n\r\n![][boot]\r\n\r\nThe CDKToolkit stack owns the S3 bucket that store assets required by the CDK framework. __NEVER DELETE__ any resources created by the bootstrapping process.\r\n\r\n\r\n[boot]: ./img/boot.png\r\n[aws]: https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html\r\n[docker]: https://docs.docker.com/engine/install/\r\n[desktop]:  ./img/desktop.png\r\n","frontMatter":{},"id":"book-1","img":"https://{{COURSEURL}}/topic02/book-1/img/main.png","imgFile":"img/main.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"title":" The Cloud Development Kit (CDK).","shortTitle":"AWS-CDK","contentMd":"# The Cloud Development Kit (CDK).\r\n\r\nThe AWS Cloud Development Kit (AWS CDK) lets you define cloud infrastructure as code in various programming languages - we will use Typescript. Once defined, you can then provision the resources of that infrastructure using the CDK CLI. \r\n\r\n### CDK Bootstrap.\r\n\r\nInstall the AWS CDK CLI globally using the following command (use the VS Code integrated terminal for convenience):\r\n~~~bash\r\n$ npm install -g aws-cdk@2.80.0\r\n~~~\r\nRun the following command to verify a correct installation:\r\n~~~bash\r\n$ cdk --version\r\n~~~\r\n\r\nTo deploy resources using the AWS CDK framework, your AWS account requires a dedicated S3 bucket and some other containers to be available - the AWS CloudFormation service uses them when provisioning infrastructure for an application. Creating these CDK-specific resources is called __bootstrapping__. First, you need to discover the 12-digit identification number for your AWS account using the following command:\r\n~~~bash\r\n$ aws sts get-caller-identity --query \"Account\" --output text\r\n~~~\r\nNow bootstrap your AWS account with the following command:\r\n~~~bash\r\n$ cdk bootstrap aws://YOUR-ACCOUNT-NUMBER/eu-west-1\r\n~~~\r\n>>e.g. cdk bootstrap aws://123456789012/eu-west-1\r\n\r\n-----------------------------------------\r\n\r\n__NOTE:__ The above command assumes you ar using your __default profile credentials__ to access your AWS account. If you have multiple AWS accounts and wish to use a specific one for this module then include the --profile option in the command, e.g.\r\n~~~bash\r\n$ cdk --profile myProfileName bootstrap aws://YOUR-ACCOUNT-NUMBER/eu-west-1\r\n~~~\r\nIn fact, all cdk commands must include the --profile option in this scenario.\r\n\r\n--------------------------------------------\r\n\r\nConfirm that this worked by navigating to the CloudFormation service in the AWS web management console and checking for the presence of the CDKToolkit stack:\r\n\r\n![][boot]\r\n\r\nThe CDKToolkit stack owns the S3 bucket that store assets required by the CDK framework. __NEVER DELETE__ any resources created by the bootstrapping process.\r\n\r\n\r\n[boot]: ./img/boot.png\r\n[aws]: https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html\r\n[docker]: https://docs.docker.com/engine/install/\r\n[desktop]:  ./img/desktop.png\r\n","route":"/lab/{{COURSEURL}}/topic02/book-1/AWS-CDK","id":"AWS-CDK","type":"step"},{"title":" ALB-EC2 stack","shortTitle":"ALB-EC2_Stack","contentMd":"## ALB-EC2 stack\r\n\r\nOur objective is to deploy the following application stack to your AWS account using the CDK framework:\r\n\r\n![][schema]\r\n\r\nThe EC2 instance will host a simple web server that displays a Hello World web page. \r\nThis infrastructure configuration is sophisticated (includes an Application Load Balancer, Auto Scaling Group, etc), but it's based on a traditional architecture, i.e. it's not serverless based. For this reason, we need not delve into HOW the deployment works but instead appreciate WHAT is possible with the Infrastructure as Code technique.\r\n\r\nThe code for this stack can be cloned from [here](https://github.com/diarmuidoconnor/cdk-alb-ec2)\r\n\r\n>>$ git clone https://github.com/diarmuidoconnor/cdk-alb-ec2\r\n\r\nImport the `cdk-alb-ec2)` folder into VS Code, open an integrated terminal, and install the  dependencies:\r\n~~~bash\r\n$ npm install\r\n~~~\r\n\r\nThe infrastructure for this application is defined in the `lib/cdk-stack.ts` file. You can scan over its code, but it is not necessary to understand it fully at this stage.\r\n\r\nTo deploy the stack to your AWS account, type the command:\r\n~~~bash\r\n$ cdk deploy\r\n~~~\r\n[Include the --profile option if relevant.]\r\n\r\nAssuming the deployment was successful, the terminal output includes the domain name of the newly created Application Load Balancer resource:\r\n\r\n![][alb]\r\n\r\nCopy the domain name and paste it into a browser tab:\r\n\r\n![][root]\r\n\r\nThe above response confirms the web server is running inside the EC2 instance. The web page displays a Hello World message followed by the server's hostname, which includes the private IP address of the EC2 instance. Hit refresh a few times and notice the hostname alternates between two IP addresses - see `lib/user-data.sh`. Our stack provisioned two EC@ instances, and the Application Load Balancer distributed the requests between the two targets.\r\n\r\nIn the AWS management console, check the stack deployment in CloudFormation:\r\n\r\n![][cf]\r\n\r\nThe stack comprised of several resources, for example:\r\n\r\n- Two EC2 instance.\r\n- An Application load balancer (ALB), with one listener on port 60.\r\n- An Auto Scaling group (ASG) for scaling the EC2 instance. The ASG is the target for the ALB listener.\r\n- A Security group for the EC2 instance(s), with one ingress rule.\r\n\r\nUse the management console to find these resources, for example:\r\n\r\n![][ec2]\r\n\r\n![][albmc]\r\n\r\n### Infrastructure State Management.\r\n\r\nIn the management console, go to the EC2 console and  click 'Security Groups' on the left panel. In the list of groups displayed, find the group with 'cdk-stack-webserversg' in its name. This security group currently has one inbound rule defined. \r\n\r\n![][secgrp]\r\n\r\nTo demonstrate the state management feature of the CDK framework (and, by implication, CloudFormation's support for state management), in VS Code, open the file `lib/cdk-stack.ts` and uncomment the lines:\r\n\r\n~~~ts\r\n    serverSG.addIngressRule(\r\n      Peer.anyIpv4(),\r\n      Port.tcp(22),\r\n      'allow SSH access from anywhere',\r\n    );\r\n~~~\r\nThis code adds a second rule to the security group of the server (EC2 imstamces). Now update the stack's state by redeploying the app using the same command:\r\n~~~bash\r\n$ cdk deploy\r\n~~~\r\n[Include the --profile option if relevant.]\r\n\r\nType 'y' to allow CloudFormation to apply the changes to your deployed resources.\r\n\r\nWhen the deployment is complete, recheck the security group in the AWS management console to confirm the __state change__ has occurred:\r\n\r\n![][secgrp2]\r\n\r\nChange the same lines of code back to comments again and rerun the deploy command. Cloudformation will update the state by removing the rule from the inbound list. \r\n\r\n### Cleanup\r\n\r\nTo avoid incurring any cost, destroy the entire stack from your AWS account with the command:\r\n~~~bash\r\n$ cdk destroy\r\n~~~\r\n[Include the --profile option if relevant.]\r\n\r\nGo to the Cloudformation service page of the AWS management page and confirm it deleted the stack for this demo app. As well, all the related resources were deleted. For example, check the EC2 instance is removed/terminated. Check some of the other resources as well. \r\n\r\n[schema]: ./img/schema.png\r\n[alb]: ./img/alb.png\r\n[root]: ./img/root.png\r\n[api]: ./img/api.png\r\n[cf]: ./img/cf.png\r\n[secgrp]: ./img/secgrp.png\r\n[secgrp2]: ./img/secgrp2.png\r\n[albmc]: ./img/albmc.png\r\n[ec2]: ./img/ec2.png","route":"/lab/{{COURSEURL}}/topic02/book-1/ALB-EC2_Stack","id":"ALB-EC2_Stack","type":"step"}]},{"route":"/lab/{{COURSEURL}}/topic02/lab","type":"lab","title":"Lab 2 -HTML, CSS & Bootstrap#\r","summary":"----------\r","contentMd":"#Lab 2 -HTML, CSS & Bootstrap#\r\n\r\n----------\r\n## HTML Elements\t","frontMatter":{},"id":"lab","img":"","imgFile":"","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"title":"","shortTitle":".","contentMd":"#Lab 2 -HTML, CSS & Bootstrap#\r\n\r\n----------\r\n## HTML Elements\t","route":"/lab/{{COURSEURL}}/topic02/lab/.","id":".","type":"step"}],"pdf":"","pdfFile":""}]},{"route":"/topic/{{COURSEURL}}/topic03","type":"topic","title":" ServerLess Web API.\r","summary":"Leveraging the AWS platform's serverless services to host RESTful APIs","contentMd":"# ServerLess Web API.\r\n \r\nLeveraging the AWS platform's serverless services to host RESTful APIs ","frontMatter":{},"id":"topic03","img":"https://{{COURSEURL}}/topic03/topic.png","imgFile":"topic.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"route":"/talk/{{COURSEURL}}/topic03/talk-1","type":"talk","title":" Serverless.\r","summary":"The fundemantal serverless services available on the AWS platform.","contentMd":"# Serverless.\r\n \r\nThe fundemantal serverless services available on the AWS platform.","frontMatter":{},"id":"talk-1","img":"https://{{COURSEURL}}/topic03/talk-1/Serverless.png","imgFile":"Serverless.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"pdf":"https://{{COURSEURL}}/topic03/talk-1/Serverless.pdf","pdfFile":"Serverless.pdf"},{"route":"/talk/{{COURSEURL}}/topic03/talk-2","type":"talk","title":" Serverless (Contd.).\r","summary":"Serverless services - API Gateway and Cognito.","contentMd":"# Serverless (Contd.).\r\n \r\nServerless services - API Gateway and Cognito.","frontMatter":{},"id":"talk-2","img":"https://{{COURSEURL}}/topic03/talk-2/Serverless.png","imgFile":"Serverless.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"pdf":"https://{{COURSEURL}}/topic03/talk-2/Serverless.pdf","pdfFile":"Serverless.pdf"},{"route":"/lab/{{COURSEURL}}/topic03/book-1","type":"lab","title":"Serverless-Basics","summary":"We want to create a basic serverless app using the CDK to provision the AWS infrastructure resources needed. The app's architecture is shown below:\r","contentMd":"# Basic Serverless app.\r\n\r\nWe want to create a basic serverless app using the CDK to provision the AWS infrastructure resources needed. The app's architecture is shown below:\r\n\r\n![][arch]\r\n\r\n### Setup.\r\n\r\nCreate a new folder (anywhere) called `simple-app`. Execute the following commands:\r\n~~~bash\r\n$ cd simple-app\r\n$ cdk init app --language typescript\r\n~~~\r\nThe second command scaffolds a CDK project based on the Typescript implementation choice, and installs some Node modules. However, we need to change some of these modules. Delete the `node_modules` folder and `package-lock.json`, and replace the content of `package.json` with the following:\r\n~~~json\r\n{\r\n  \"name\": \"simple-app\",\r\n  \"version\": \"0.1.0\",\r\n  \"bin\": {\r\n    \"simple-app\": \"bin/simple-app.js\"\r\n  },\r\n  \"scripts\": {\r\n    \"build\": \"tsc\",\r\n    \"watch\": \"tsc -w\",\r\n    \"cdk\": \"cdk\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@types/aws-lambda\": \"^8.10.93\",\r\n    \"@types/node\": \"20.4.2\",\r\n    \"aws-cdk\": \"2.88.0\",\r\n    \"esbuild\": \"^0.18.17\",\r\n    \"ts-node\": \"^10.9.1\",\r\n    \"typescript\": \"~4.9.5\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@aws-sdk/client-dynamodb\": \"^3.67.0\",\r\n    \"@aws-sdk/lib-dynamodb\": \"^3.79.0\",\r\n    \"@aws-sdk/util-dynamodb\": \"^3.303.0\",\r\n    \"aws-cdk-lib\": \"2.88.0\",\r\n    \"constructs\": \"^10.0.0\",\r\n    \"source-map-support\": \"^0.5.21\"\r\n  }\r\n}\r\n~~~\r\nRun the command:\r\n~~~bash\r\n$ npm install\r\n~~~ \r\nCommit this work:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Setup for lab\"\r\n~~~\r\n\r\n[Optional - Create a new GitHub repository and link it to this app. ]\r\n\r\n[arch]: ./img/arch.png\r\n","frontMatter":{},"id":"book-1","img":"https://{{COURSEURL}}/topic03/book-1/img/main.png","imgFile":"img/main.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"title":" Basic Serverless app.","shortTitle":"Serverless-Basics","contentMd":"# Basic Serverless app.\r\n\r\nWe want to create a basic serverless app using the CDK to provision the AWS infrastructure resources needed. The app's architecture is shown below:\r\n\r\n![][arch]\r\n\r\n### Setup.\r\n\r\nCreate a new folder (anywhere) called `simple-app`. Execute the following commands:\r\n~~~bash\r\n$ cd simple-app\r\n$ cdk init app --language typescript\r\n~~~\r\nThe second command scaffolds a CDK project based on the Typescript implementation choice, and installs some Node modules. However, we need to change some of these modules. Delete the `node_modules` folder and `package-lock.json`, and replace the content of `package.json` with the following:\r\n~~~json\r\n{\r\n  \"name\": \"simple-app\",\r\n  \"version\": \"0.1.0\",\r\n  \"bin\": {\r\n    \"simple-app\": \"bin/simple-app.js\"\r\n  },\r\n  \"scripts\": {\r\n    \"build\": \"tsc\",\r\n    \"watch\": \"tsc -w\",\r\n    \"cdk\": \"cdk\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@types/aws-lambda\": \"^8.10.93\",\r\n    \"@types/node\": \"20.4.2\",\r\n    \"aws-cdk\": \"2.88.0\",\r\n    \"esbuild\": \"^0.18.17\",\r\n    \"ts-node\": \"^10.9.1\",\r\n    \"typescript\": \"~4.9.5\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@aws-sdk/client-dynamodb\": \"^3.67.0\",\r\n    \"@aws-sdk/lib-dynamodb\": \"^3.79.0\",\r\n    \"@aws-sdk/util-dynamodb\": \"^3.303.0\",\r\n    \"aws-cdk-lib\": \"2.88.0\",\r\n    \"constructs\": \"^10.0.0\",\r\n    \"source-map-support\": \"^0.5.21\"\r\n  }\r\n}\r\n~~~\r\nRun the command:\r\n~~~bash\r\n$ npm install\r\n~~~ \r\nCommit this work:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Setup for lab\"\r\n~~~\r\n\r\n[Optional - Create a new GitHub repository and link it to this app. ]\r\n\r\n[arch]: ./img/arch.png\r\n","route":"/lab/{{COURSEURL}}/topic03/book-1/Serverless-Basics","id":"Serverless-Basics","type":"step"},{"title":" Standalone Lambda.","shortTitle":"SimpleLamdba","contentMd":"## Standalone Lambda.\r\n\r\nThe first version of our CDK app is comprised of one stack containing a standalone lambda function. \r\n\r\nWe declare the cloud resources for the app's stack in the file `lib/simple-app-stack.ts`. Replace the content of the file with the following:\r\n~~~ts\r\nimport * as cdk from 'aws-cdk-lib';\r\nimport * as lambdanode from 'aws-cdk-lib/aws-lambda-nodejs';\r\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\r\n\r\nimport { Construct } from 'constructs';\r\n\r\nexport class SimpleAppStack extends cdk.Stack {\r\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\r\n    super(scope, id, props);\r\n\r\n    const simpleFn = new lambdanode.NodejsFunction(this, \"SimpleFn\", {\r\n      architecture: lambda.Architecture.ARM_64,\r\n      runtime: lambda.Runtime.NODEJS_16_X,\r\n      entry: `${__dirname}/../lambdas/simple.ts`,\r\n      timeout: cdk.Duration.seconds(10),\r\n      memorySize: 128,\r\n    });\r\n\r\n  }\r\n}\r\n\r\n~~~\r\nThe 'entry' property in the above lambda function configuration refers to the file containing the function's code:\r\n>>entry: `${__dirname}/../lambdas/simple.ts`,\r\n\r\nCreate a new subfolder of the base called `lambdas` and add a file `simple.ts` with the following content:\r\n~~~ts\r\nimport { Handler } from \"aws-lambda\";\r\n\r\nexport const handler: Handler = async (event, context) => {\r\n  try {\r\n    console.log(\"I was invoked\");\r\n    return {\r\n      statusCode: 200,\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n      },\r\n      body: { message: \"This is a message returned from lambda Function\" },\r\n    };\r\n  } catch (error) {\r\n    console.log(error);\r\n    return {\r\n      statusCode: 500,\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ error }),\r\n    };\r\n  }\r\n};\r\n~~~\r\n\r\nDeploying this CDK app involves compiling the lambda function, bundling it with any dependencies, constructing a CloudFormation template, and uploading both to AWS. Type the following command to initiate this:\r\n~~~bash\r\n$ cdk deploy\r\n~~~\r\n\r\nTo confirm the deployment, use the AWS web management console to check the following:\r\n\r\n+ The CloudFormation service shows the new stack\r\n\r\n![][simplestack]\r\n\r\n+ The Lambda service shows the lambda function.\r\n\r\n![][simplelambda]\r\n\r\nWe can also use the AWS CLI to query the Lambda service about our function:\r\n~~~bash\r\n$ aws lambda list-functions      // Type Q to quit\r\n~~~\r\n\r\nThe simplest way to trigger (execute) the function is via the CLI using the command:\r\n~~~bash\r\n$ aws lambda invoke --function-name [full function name] response.json\r\n~~~\r\nThe response from the list-functions command includes the full function name, for example:\r\n>$ aws lambda invoke --function-name SimpleAppStack-SimpleFn7D0601E0-znMGo1Ft8A60 response.json\r\n\r\nThe body of the response from the invocation is stored in a file called `response.json` in the project's base folder. It should contain the following:\r\n~~~json\r\n{\"statusCode\":200,\"headers\":{\"content-type\":\"application/json\"},\"body\":{\"message\":\"This is a message returned from lambda Function\"}}\r\n~~~\r\n[In `.gitignore`, add 'response.json' to prevent it from being comitted to the repository.]\r\n\r\nThe output from the console.log statements in a lambda function are stored as log streams in the CloudWatch service. In the AWS web management console, navigate to CloudWatch --> Log Groups (left panel) --> Select the relevant log group (e.g. /aws/lambda/SimpleAppStack-SimpleFnxxxxxx) --> Select the most recent Log Stream (bottom of the page) based on the timestamps:\r\n  \r\n![][logstream]\r\n\r\nCloudWatch log streams are very helpful when debugging lambda functions.\r\n\r\nCommit this work:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Simple standalone lambda\"\r\n~~~\r\n\r\n[simplestack]: ./img/simplestack.png\r\n[simplelambda]: ./img/simplelambda.png\r\n[logstream]: ./img/logstream.png\r\n\r\n","route":"/lab/{{COURSEURL}}/topic03/book-1/SimpleLamdba","id":"SimpleLamdba","type":"step"},{"title":" Lambda function URLs.","shortTitle":"FunctionURL","contentMd":"## Lambda function URLs.\r\n\r\nFunction URLs allow us to invoke a lambda function using any HTTP client (e.g. Postman). \r\n\r\nIn `lib/simple-app-stack.ts`, configure the lambda function to include a URL identifier, as follows:\r\n~~~ts\r\n   const simpleFn = new lambdanode.NodejsFunction(this, \"SimpleFn\", {\r\n      ... as before ....\r\n    });\r\n\r\n    const simpleFnURL = simpleFn.addFunctionUrl({\r\n      authType: lambda.FunctionUrlAuthType.NONE,\r\n      cors: {\r\n        allowedOrigins: [\"*\"],\r\n      },\r\n    });\r\n\r\n    new cdk.CfnOutput(this, \"Simple Function Url\", { value: simpleFnURL.url });\r\n~~~\r\nFor convenience we are outputting the generated URL using the CDK L1 construct CfnOutput. Redeploy the app:\r\n~~~bash\r\n$ cdk deploy\r\n~~~\r\nThe terminal response should resemble the following:\r\n\r\n![][furl]\r\n\r\nTest the URL using a web browser as shown below:\r\n\r\n![][browserres]\r\n\r\nWe can also use the web management console to find the URL generated for the function. Go to Lambda Service and navigate to the function's page - see illustration below: \r\n\r\n![][furlconsole]\r\n\r\n### Protected URL.\r\n\r\nA function URL can be configured as private/protected, so only HTTP requests with a valid authentication token can invoke the function. The Lambda service uses the AWS SigV4 protocol for token generation. \r\n\r\nIn `simple-app-stack.ts`, change the function URL creation statement to the following:\r\n~~~ts\r\n    const simpleFnURL = simpleFn.addFunctionUrl({\r\n      authType: lambda.FunctionUrlAuthType.AWS_IAM,   // CHANGE\r\n      cors: {\r\n        allowedOrigins: [\"*\"],\r\n      },\r\n    });\r\n~~~\r\nUpdate the deployment:\r\n~~~bash\r\n$ cdk deploy\r\n~~~\r\nTry to access the function URL in the browser. The response is a '403 Forbidden access' because the request is not appropriately signed. Using the Postman HTTP client (install from [here][postman] ), create a new HTTP request. Use the URL of the lambda function and set the authentication type to AWS Signature. Use your personal AWS Access key and AWS Secret access key in the settings, as well as eu-west-1 for the region and lambda for the service - see screenshot.\r\n\r\n![][postreq]\r\n\r\nClick Send. The response should now contain the function's 200 response body.\r\n\r\nCommit the changes:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Lambda function URLs.\"\r\n~~~\r\n\r\n[furl]: ./img/furl.png\r\n[browserres]: ./img/browserres.png\r\n[furlconsole]: ./img/furlconsole.png\r\n[postreq]: ./img/postreq.png\r\n[postman]: https://www.postman.com/downloads/\r\n","route":"/lab/{{COURSEURL}}/topic03/book-1/FunctionURL","id":"FunctionURL","type":"step"},{"title":" Simple DynamoDB.","shortTitle":"DynamoDB","contentMd":"## Simple DynamoDB.\r\n\r\nDynamoDB is a serverless NoSQL database service from AWS - we cover it later in the module. We can create a DynamoDB table from our CDK IaC code.  In `simple-app-stack.ts` add an import at the top:\r\n~~~ts\r\nimport * as dynamodb from \"aws-cdk-lib/aws-dynamodb\";\r\n~~~\r\nAdd a Table declaration (after the function URL statement (although the sequence does not actually matter):\r\n~~~ts\r\n    const simpleFnURL = simpleFn.addFunctionUrl({\r\n         ... as before ...\r\n    );\r\n    const moviesTable = new dynamodb.Table(this, \"MoviesTable\", {\r\n      billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,\r\n      partitionKey: { name: \"id\", type: dynamodb.AttributeType.NUMBER },\r\n      removalPolicy: cdk.RemovalPolicy.DESTROY,\r\n      tableName: \"Movies\",\r\n    });\r\n~~~\r\nUpdate the stack by redeploying (cdk deploy). In the management console, go to the DynamoDB service and click Tables (left panel). Movies should appear in the table list:\r\n\r\n![][dynamodb]\r\n\r\nSometimes, we'd like to execute some logic AFTER AWS has created an app's infrastructure, for example, seeding a database table after it is initialized. The CDK framework provides the AWSCustomREsource construct for this edge use case. We can configure this construct to execute any command, for example, the DynamoDB SDK PutItem command, to write an item to a table. Internally, the CDK __dynamically creates a lambda function__ to perform the task defined by a custom resource. (AWSCustomRrsource is an advanced concept; we need not be overly concerned about it after this lab.) \r\n\r\nFor convenience, we will use some data from the [TMDB web API][tmdb] as our seed data - we will use this Open API extensively in the second half of this module. Create a new folder in the project called `shared`  and add a file called `types.d.ts` with the following content:\r\n~~~ts\r\n\r\nexport type Movie =   {\r\n  id: number,\r\n  backdrop_path: string,\r\n  genre_ids: number[ ],\r\n  original_language: string,\r\n  original_title: string,\r\n  adult: boolean,\r\n  overview: string,\r\n  popularity: number,\r\n  poster_path: string,\r\n  release_date: string,\r\n  title: string,\r\n  video: boolean,\r\n  vote_average: number,\r\n  vote_count: number\r\n}\r\n~~~\r\nCreate a new folder in the project called `seed`. Download [this archive][seed], unzip it and place the `movies.ts` file in the seed folder. Create the file `shared/util.ts` and add the following code:\r\n~~~ts\r\nimport { marshall } from \"@aws-sdk/util-dynamodb\";\r\nimport { Movie } from \"./types\";\r\n\r\nexport const generateMovieItem = (movie: Movie) => {\r\n  return {\r\n    PutRequest: {\r\n      Item: marshall(movie),\r\n    },\r\n  };\r\n};\r\n\r\nexport const generateBatch = (data: Movie[]) => {\r\n  return data.map((e) => {\r\n    return generateMovieItem(e);\r\n  });\r\n};\r\n\r\n~~~\r\nFinally, in `simple-app-stack.ts` make the following changes:\r\n\r\n+ Add some import statements:\r\n\r\n~~~ts\r\nimport * as custom from \"aws-cdk-lib/custom-resources\";\r\nimport { generateBatch } from \"../shared/util\";\r\nimport {movies} from \"../seed/movies\";\r\n~~~\r\n\r\n+ Add an AWSCustomResource, as follows:\r\n\r\n~~~ts\r\n    const moviesTable = new dynamodb.Table(this, \"MoviesTable\", {\r\n       ... as before ...\r\n    });\r\n\r\n    new custom.AwsCustomResource(this, \"moviesddbInitData\", {\r\n      onCreate: {\r\n        service: \"DynamoDB\",\r\n        action: \"batchWriteItem\",\r\n        parameters: {\r\n          RequestItems: {\r\n            [moviesTable.tableName]: generateBatch(movies),\r\n          },\r\n        },\r\n        physicalResourceId: custom.PhysicalResourceId.of(\"moviesddbInitData\"), //.of(Date.now().toString()),\r\n      },\r\n      policy: custom.AwsCustomResourcePolicy.fromSdkCalls({\r\n        resources: [moviesTable.tableArn],\r\n      }),\r\n    });\r\n~~~\r\nThis custom resource has the following characteristics:\r\n+ It only runs when the stack is initially created, not on subsequent updates (onCreate).\r\n+ Its task is to cause the DynamoDB service to perform a 'batchWriteItem' action.\r\n+ An IAM policy is created and attached to the execution role of a lambda function that performs the seeding. The policy is dynamically created based on the task it must perform, i.e. add an item to a table.\r\n\r\nBecause the custom resource only runs on stack creation, we should destroy the current one first and then deploy:\r\n~~~bash\r\n$ cdk destroy\r\n$ cdk deploy\r\n~~~\r\nIn the management console, go to the DynamoDB service --> click Tables on the left panel --> click the Movies table link in the list --> click the 'Explore Table Items' button (top right), and scroll down. The items should appear as shown:\r\n\r\n![][moviestable]\r\n\r\nCommit the changes:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Create movies table and seed it.\"\r\n~~~\r\n\r\n[moviestable]: ./img/moviestable.png\r\n[dynamodb]: ./img/dynamodb.png\r\n[tmdb]: https://www.themoviedb.org/\r\n[seed]: ./img/movies.ts.zip","route":"/lab/{{COURSEURL}}/topic03/book-1/DynamoDB","id":"DynamoDB","type":"step"},{"title":" Lambda to DynamoDB.","shortTitle":"LambdaToDynamoDB","contentMd":"## Lambda to DynamoDB.\r\n\r\nSuppose we want a lambda function that reads a movie item from the table and returns it to the client. An HTTP request triggers this function, and the request should include a query parameter that specifies the movie's id:\r\n\r\n![][getmovie]\r\n\r\nWe start by creating the infrastructure for this use case. In `simple-app-stack.ts`, add a new lambda function, placing it anywhere AFTER the declaration of the movies table:\r\n~~~ts\r\n    const getMovieByIdFn = new lambdanode.NodejsFunction(\r\n      this,\r\n      \"GetMovieByIdFn\",\r\n      {\r\n        architecture: lambda.Architecture.ARM_64,\r\n        runtime: lambda.Runtime.NODEJS_16_X,\r\n        entry: `${__dirname}/../lambdas/getMovieById.ts`,\r\n        timeout: cdk.Duration.seconds(10),\r\n        memorySize: 128,\r\n        environment: {\r\n          TABLE_NAME: moviesTable.tableName,\r\n          REGION: 'eu-west-1',\r\n        },\r\n      }\r\n    );\r\n\r\n    const getMovieByIdURL = getMovieByIdFn.addFunctionUrl({\r\n      authType: lambda.FunctionUrlAuthType.NONE,\r\n      cors: {\r\n        allowedOrigins: [\"*\"],\r\n      },\r\n    });\r\n\r\n    moviesTable.grantReadData(getMovieByIdFn)\r\n\r\n    new cdk.CfnOutput(this, \"Get Movie Function Url\", { value: getMovieByIdURL.url });\r\n~~~\r\nWe pass two environment variables to the new lambda function: the DynamoDB table's name and the AWS region where the stack is deployed. The function requires permission to read from the table, which is achieved by the statement:\r\n\r\n>    moviesTable.grantReadData(getMovieByIdFn)\r\n\r\nThe CDK framework generates an appropriate IAM policy from this statement and attaches the policy to the function's IAM execution role.\r\n\r\nCreate a new file for the lambda function called `lambdas/getMovieById.ts` and add the following code:\r\n~~~ts\r\nimport { Handler } from \"aws-lambda\";\r\n\r\nimport { DynamoDBClient } from \"@aws-sdk/client-dynamodb\";\r\nimport { DynamoDBDocumentClient, GetCommand } from \"@aws-sdk/lib-dynamodb\";\r\n\r\nconst ddbDocClient = createDDbDocClient();\r\n\r\nexport const handler: Handler = async (event, context) => {\r\n  try {\r\n    console.log(\"Event: \", event);\r\n    const parameters = event?.queryStringParameters;\r\n    const movieId = parameters ? parseInt(parameters.movieId) : undefined;\r\n\r\n    if (!movieId) {\r\n      return {\r\n        statusCode: 404,\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ Message: \"Missing movie Id\" }),\r\n      };\r\n    }\r\n    const commandOutput = await ddbDocClient.send(\r\n      new GetCommand({\r\n        TableName: process.env.TABLE_NAME,\r\n        Key: { id: movieId },\r\n      })\r\n    );\r\n    if (!commandOutput.Item) {\r\n      return {\r\n        statusCode: 404,\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ Message: \"Invalid movie Id\" }),\r\n      };\r\n    }\r\n    const body = {\r\n      data: commandOutput.Item,\r\n    };\r\n\r\n    // Return Response\r\n    return {\r\n      statusCode: 200,\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(body),\r\n    };\r\n  } catch (error: any) {\r\n    console.log(JSON.stringify(error));\r\n    return {\r\n      statusCode: 500,\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ error }),\r\n    };\r\n  }\r\n};\r\n\r\nfunction createDDbDocClient() {\r\n  const ddbClient = new DynamoDBClient({ region: process.env.REGION });\r\n  const marshallOptions = {\r\n    convertEmptyValues: true,\r\n    removeUndefinedValues: true,\r\n    convertClassInstanceToMap: true,\r\n  };\r\n  const unmarshallOptions = {\r\n    wrapNumbers: false,\r\n  };\r\n  const translateConfig = { marshallOptions, unmarshallOptions };\r\n  return DynamoDBDocumentClient.from(ddbClient, translateConfig);\r\n}\r\n\r\n~~~\r\nThe lambda function uses the DynamoDB SDK to communicate with the DynamoDB service. The service has an API, which the SDK understands. The SDK also performs marshalling and unmarshalling data between DynamoDB and itself. The SDK's uses the __command objects__ pattern in its interface with clients (e.g. Lambda function). These objects express the client's request. The above handler sends a GetCommand to the SDK, and the SDK translates it into a GetItem request for a single item from the movies table. \r\n\r\nUpdate the stack:\r\n~~~bash\r\n$ cdk deploy\r\n~~~\r\nThe response looks as follows:\r\n\r\n![][getitemdeploy]\r\n\r\nUse the new function's URL in a browser tab to trigger the function:\r\n\r\n![][getmovie]\r\n\r\nCommit the changes:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Lambda communicating with DynamoDB\"\r\n~~~\r\nComplete the testing of the new function by trying a request with an invalid movie id (e.g. 9999). The response should be:\r\n      \r\n>{\"Message\":\"Invalid movie Id\"}\r\n\r\nTry a request with no query string:\r\n      \r\n>e.g. https://7v3jrykviqizhokjaqa35mevcu0qkczx.lambda-url.eu-west-1.on.aws/? \r\n\r\nThe response should be:\r\n\r\n>{\"Message\":\"Missing movie Id\"}\r\n\r\n[getmovie]: ./img/getmovie.png\r\n[getitemdeploy]: ./img/getitemdeploy.png\r\n","route":"/lab/{{COURSEURL}}/topic03/book-1/LambdaToDynamoDB","id":"LambdaToDynamoDB","type":"step"},{"title":" Debugging with Cloudwatch. ","shortTitle":"Cloudwatch","contentMd":"## Debugging with Cloudwatch. \r\n\r\n----------------------\r\n### Tidy-up.\r\n\r\nWe should do some cleanup before working through this section. In the management console, go to the Cloudwatch service --> Log groups and delete all the groups by selecting them and choosing the Delete action: \r\n\r\n![][deletelog]\r\n\r\n-----------------------------\r\n\r\nIn `lambdas/getMovieById.ts`, the handler starts by extracting the movie id from the event object parameter and logs it to the console. We can use the output from this log statement to explore the shape of the event object. First, trigger the function by requesting a movie (say, 572802) from a browser tab. Then, in the management console, go to  CloudWatch --> Log Groups (left panel) --> Select the '/aws/lambda/SimpleAppStack-GetMovieByIdFn' group --> Select the Log steam --> Expand the stream section generated by the console log statement: \r\n\r\n![][eventshape1]\r\n\r\nLocate the query string parameter in the structure:\r\n\r\n![][eventshape2]\r\n\r\nCloudwatch is also useful when examining the structure of responses from the DynamoDB SDK (or any service SDK). For example, add a console log statement to `getMovieById.ts` as follows:\r\n~~~ts\r\n   const commandOutput = await ddbDocClient.send(\r\n     ... as before ...\r\n    );\r\n    console.log('GetCommand response: ', commandOutput)  // NEW\r\n    if (!commandOutput.Item) {\r\n      ... as before ...\r\n~~~\r\nUpdate the stack (cdk deploy), and resubmit a request for movie 572802 from the browser tab. The Cloudwatch log stream for the new log statement looks as follows:\r\n\r\n![][getcommand]\r\n\r\nA common error when developing lambda functions is insufficient IAM permissions to access other AWS services, such as DynamoDB. In `simple-app-stack.ts` comment out the line:\r\n~~~ts\r\n   // moviesTable.grantReadData(getMovieByIdFn)\r\n~~~\r\n\r\nUpdate the stack (cdk deploy) and try requesting movie 572802 from the browser again. An error response is returned this time:\r\n\r\n![][accessdenied1]\r\n\r\nIn cases where a lanbda function is not triggered by a browser request, we need another means of identifying the error thrown (we will encounter them later in the module). To simulate this, temporarily comment out the catch-block in `getMovieById.ts`. Update the stack (cdk deploy) and try requesting movie 572802. This time we get a generic 'Internal Server Error'. To debug this, go to Cloudwatch and find the log stream for this invocation of the function:\r\n\r\n![][accessdenied2]\r\n\r\nYou will often need to debug lambda functions via CloudWatch logs in this way. \r\n\r\n__Undo all the above code changes__, update the stack and check the get movie feature is working again.\r\n\r\n\r\n[accessdenied1]: ./img/accessdenied1.png\r\n[accessdenied2]: ./img/accessdenied2.png\r\n[eventshape1]: ./img/eventshape1.png\r\n[eventshape2]: ./img/eventshape2.png\r\n[getcommand]: ./img/getcommand.png\r\n[deletelog]: ./img/deletelog.png\r\n","route":"/lab/{{COURSEURL}}/topic03/book-1/Cloudwatch","id":"Cloudwatch","type":"step"},{"title":" Exercise","shortTitle":"Exercise","contentMd":"## Exercise\r\n\r\n__You are required__ to add a new lambda function, with an associated URL, that returns all the movies in the table. The DynamoDBDocumentClient command to get all items from a table is ScanCommand, e.g.\r\n~~~ts\r\n   new ScanCommand({\r\n        TableName: string;\r\n      })\r\n~~~\r\nThe function's response should look as follows:\r\n\r\n![][getall]\r\n\r\nOn completion, commit the work:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Lambda function to get all movies.\"\r\n~~~\r\n\r\n[getall]: ./img/getall.png\r\n","route":"/lab/{{COURSEURL}}/topic03/book-1/Exercise","id":"Exercise","type":"step"},{"title":" Cleanup","shortTitle":"Cleanup","contentMd":"## Cleanup\r\n\r\nTo avoid incurring any unnecessary cost, destroy the entire stack from your AWS account with the command:\r\n~~~bash\r\n$ cdk destroy\r\n~~~\r\n\r\nGo to the Cloudformation service page of the AWS management console and confirm it deleted the stack for this app.\r\n","route":"/lab/{{COURSEURL}}/topic03/book-1/Cleanup","id":"Cleanup","type":"step"}]},{"route":"/lab/{{COURSEURL}}/topic03/book-2","type":"lab","title":"Serverless-Web-API","summary":"In the previous lab, we developed a simple serverless app where each lambda function had a unique URL. A better design would be to have a uniform entry point to the lambda functionality by placing an AWS API Gateway between the client and the backend. The Gateway allows us to define a REST interface to the backend using serverless technology. The diagram below shows our target infrastructure:\r","contentMd":"## Serverless REST API.\r\n\r\nIn the previous lab, we developed a simple serverless app where each lambda function had a unique URL. A better design would be to have a uniform entry point to the lambda functionality by placing an AWS API Gateway between the client and the backend. The Gateway allows us to define a REST interface to the backend using serverless technology. The diagram below shows our target infrastructure:\r\n\r\n![][threetier]\r\n\r\n### Setup.\r\n\r\nDownload and unzip [this archive][start]. It's the solution to the previous lab with minor filename changes, e.g. lib/simple-app.ts renamed lib/rest-api-stack.ts. Import it into VS Code and type the commands\r\n~~~bash\r\n$ npm install\r\n£ cdk deploy\r\n~~~\r\nIn the management console, Check Cloudformation for the new stack:\r\n\r\n![][stack]\r\n\r\n[start]: ./img/start.zip\r\n[stack]: ./img/stack.png\r\n[threetier]: ./img/threetier.png\r\n[submit]: https://moodle.wit.ie/course/view.php?id=199949&section=1\r\n","frontMatter":{},"id":"book-2","img":"https://{{COURSEURL}}/topic03/book-2/img/main.png","imgFile":"img/main.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"title":" Serverless REST API.","shortTitle":"Serverless-Web-API","contentMd":"## Serverless REST API.\r\n\r\nIn the previous lab, we developed a simple serverless app where each lambda function had a unique URL. A better design would be to have a uniform entry point to the lambda functionality by placing an AWS API Gateway between the client and the backend. The Gateway allows us to define a REST interface to the backend using serverless technology. The diagram below shows our target infrastructure:\r\n\r\n![][threetier]\r\n\r\n### Setup.\r\n\r\nDownload and unzip [this archive][start]. It's the solution to the previous lab with minor filename changes, e.g. lib/simple-app.ts renamed lib/rest-api-stack.ts. Import it into VS Code and type the commands\r\n~~~bash\r\n$ npm install\r\n£ cdk deploy\r\n~~~\r\nIn the management console, Check Cloudformation for the new stack:\r\n\r\n![][stack]\r\n\r\n[start]: ./img/start.zip\r\n[stack]: ./img/stack.png\r\n[threetier]: ./img/threetier.png\r\n[submit]: https://moodle.wit.ie/course/view.php?id=199949&section=1\r\n","route":"/lab/{{COURSEURL}}/topic03/book-2/Serverless-Web-API","id":"Serverless-Web-API","type":"step"},{"title":" Basic REST API.","shortTitle":"BasicREST","contentMd":"## Basic REST API.\r\n\r\nIn `lib/rest-api-stack.ts`:\r\n\r\n+ Add an import at the top:\r\n~~~ts\r\nimport * as apig from \"aws-cdk-lib/aws-apigateway\";\r\n~~~\r\n\r\n+ Add the following code (after the Permissions section):\r\n~~~ts\r\n    // Permissions\r\n    ..... as before ....\r\n    // REST API \r\n    const api = new apig.RestApi(this, \"RestAPI\", {\r\n      description: \"demo api\",\r\n      deployOptions: {\r\n        stageName: \"dev\",\r\n      },\r\n      defaultCorsPreflightOptions: {\r\n        allowHeaders: [\"Content-Type\", \"X-Amz-Date\"],\r\n        allowMethods: [\"OPTIONS\", \"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\"],\r\n        allowCredentials: true,\r\n        allowOrigins: [\"*\"],\r\n      },\r\n    });\r\n\r\n    const moviesEndpoint = api.root.addResource(\"movies\");\r\n    moviesEndpoint.addMethod(\r\n      \"GET\",\r\n      new apig.LambdaIntegration(getAllMoviesFn, { proxy: true })\r\n    );\r\n\r\n    const movieEndpoint = moviesEndpoint.addResource(\"{movieId}\");\r\n    movieEndpoint.addMethod(\r\n      \"GET\",\r\n      new apig.LambdaIntegration(getMovieByIdFn, { proxy: true })\r\n    );\r\n~~~\r\nThe above code's effect is adding a REST web API with two resources/endpoints configured as a Lambda_Proxy integration. The two endpoints are:\r\n+ GET /movies - Gaet all movies.\r\n+ GET /movies/:id - Get a specific movie.\r\n\r\nRedeploy the stack :\r\n~~~bash\r\n$ cdk deploy\r\n~~~\r\nTo confirm the changes, in the management console, go to API Gateway --> Select the RestAPI from the list:\r\n\r\n![][apigateway]\r\n\r\nFrom there, select Resources (left panel) --> Click the GET method of the /movies path:\r\n\r\n![][apiresources]\r\n\r\nTo get the URL of a resource, select Stages (left panel) --> Expand the dev stage:\r\n\r\n![][apistage]\r\n\r\nThe current lambda function behind the API's get-all-movies endpoint does not require modification; however, the get-a-specific-movie lamdba expects a movie id path parameter. In `lambdas/getMovieById.ts`:\r\n\r\n+ Change the first import statement to the following:\r\n~~~ts\r\nimport { APIGatewayProxyHandlerV2 } from \"aws-lambda\";\r\n~~~\r\n+ Change the beginning of the handler function as shown below:\r\n~~~ts\r\nexport const handler: APIGatewayProxyHandlerV2 = async (event, context) => {     // Note change\r\n  try {\r\n    console.log(\"Event: \", event);\r\n    const parameters  = event?.pathParameters;\r\n    const movieId = parameters?.movieId ? parseInt(parameters.movieId) : undefined;\r\n\r\n    if (!movieId) {\r\n      ... as before ...\r\n~~~\r\nA cosmetic change is also recommended to `lambdas/getAllMovies.ts`. Change the first import and the handler's signature as follows:\r\n~~~ts\r\nimport { APIGatewayProxyHandlerV2 } from \"aws-lambda\";  // CHANGED\r\nimport { DynamoDBClient } from \"@aws-sdk/client-dynamodb\";\r\nimport { DynamoDBDocumentClient, ScanCommand } from \"@aws-sdk/lib-dynamodb\";\r\n\r\nconst ddbClient = new DynamoDBClient({ region: process.env.REGION });\r\n\r\nexport const handler: APIGatewayProxyHandlerV2 = async (event, context) => { // CHANGED\r\n  try {\r\n    ... as before\r\n~~~\r\nUpdate the stack (cdk deploy). The terminal response includes the root URL of the web API:\r\n\r\n>e.g. RestAPIStack.RESTAPIRootUrl = https://0go567dcib.execute-api.eu-west-1.amazonaws.com/dev/\r\n\r\nTest the API's two endpoints. For example, the get-a-movie response should resemble the following (use one of your movie IDs):\r\n\r\n![][getmovie]\r\n\r\nIn the management console, go to Cloudwatch --> Click Log Groups (left panel) --> Select the group /aws/lambda/RestAPIStack-GetMovieByIdFnxxxx --> Select the most recent log stream. Expand the stream to check the structure of the handler's event argument, in particular, the path parameters property:\r\n\r\n![][pathparameters]\r\n\r\nCommit this work:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Basic REST web API\"\r\n$ git push origin master\r\n~~~\r\n\r\n[apigateway]: ./img/apigateway.png\r\n[apiresources]: ./img/apiresources.png\r\n[apistage]: ./img/apistage.png\r\n[getmovie]: ./img/getmovie.png\r\n[pathparameters]: ./img/pathparameters.png\r\n\r\n","route":"/lab/{{COURSEURL}}/topic03/book-2/BasicREST","id":"BasicREST","type":"step"},{"title":" A POST endpoint.","shortTitle":"ExpandAPI","contentMd":"## A POST endpoint.\r\n\r\nWe want to allow the client to add a new movie to the database. By applying REST design principles, the API should be extended as shown below:\r\n\r\n![][addmovie]\r\n\r\nIn `rest-api-stack.ts`:\r\n\r\n+ Add a new lambda function:\r\n\r\n~~~ts\r\n   //... other lambda functions ...\r\n\r\n   const newMovieFn = new lambdanode.NodejsFunction(this, \"AddMovieFn\", {\r\n      architecture: lambda.Architecture.ARM_64,\r\n      runtime: lambda.Runtime.NODEJS_16_X,\r\n      entry: `${__dirname}/../lambdas/addMovie.ts`,\r\n      timeout: cdk.Duration.seconds(10),\r\n      memorySize: 128,\r\n      environment: {\r\n        TABLE_NAME: moviesTable.tableName,\r\n        REGION: \"eu-west-1\",\r\n      },\r\n    });\r\n~~~\r\n\r\n+ Add appropriate table access permission for this function:\r\n~~~ts\r\n    // other permissions ....\r\n    moviesTable.grantReadWriteData(newMovieFn)\r\n~~~\r\n\r\n+ Extend the API:\r\n~~~ts\r\n    moviesEndpoint.addMethod(\r\n    //   ... as before\r\n    );\r\n    // NEW\r\n    moviesEndpoint.addMethod(\r\n      \"POST\",\r\n      new apig.LambdaIntegration(newMovieFn, { proxy: true })\r\n    );\r\n~~~\r\nCreate the file `lambdas/addMovie.ts` and initialize it with the following code:\r\n~~~ts\r\nimport { APIGatewayProxyHandlerV2 } from \"aws-lambda\";\r\nimport { DynamoDBClient } from \"@aws-sdk/client-dynamodb\";\r\nimport { DynamoDBDocumentClient, PutCommand } from \"@aws-sdk/lib-dynamodb\";\r\n\r\nconst ddbDocClient = createDDbDocClient();\r\n\r\nexport const handler: APIGatewayProxyHandlerV2 = async (event, context) => {\r\n  try {\r\n    // Print Event\r\n    console.log(\"Event: \", event);\r\n    const body = event.body ? JSON.parse(event.body) : undefined;\r\n    if (!body) {\r\n      return {\r\n        statusCode: 500,\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ message: \"Missing request body\" }),\r\n      };\r\n    }\r\n\r\n    const commandOutput = await ddbDocClient.send(\r\n      new PutCommand({\r\n        TableName: process.env.TABLE_NAME,\r\n        Item: body,\r\n      })\r\n    );\r\n    return {\r\n      statusCode: 201,\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ message: \"Movie added\" }),\r\n    };\r\n  } catch (error: any) {\r\n    console.log(JSON.stringify(error));\r\n    return {\r\n      statusCode: 500,\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ error }),\r\n    };\r\n  }\r\n};\r\n\r\nfunction createDDbDocClient() {\r\n  const ddbClient = new DynamoDBClient({ region: process.env.REGION });\r\n  const marshallOptions = {\r\n    convertEmptyValues: true,\r\n    removeUndefinedValues: true,\r\n    convertClassInstanceToMap: true,\r\n  };\r\n  const unmarshallOptions = {\r\n    wrapNumbers: false,\r\n  };\r\n  const translateConfig = { marshallOptions, unmarshallOptions };\r\n  return DynamoDBDocumentClient.from(ddbClient, translateConfig);\r\n}\r\n~~~\r\nTo write/put a new item into a DynamoDB table we send a PutItem command to the DynamoDB engine. Update the stack (cdk deploy) and test the code with Postman, using the JSON below as the body of the POST request:\r\n~~~json\r\n  {\r\n    \"adult\": false,\r\n    \"backdrop_path\": \"/X8yF6STUk5Zr5nAuLBJiio8Sxh.jpg\",\r\n    \"genre_ids\": [ 18, 10749 ],\r\n    \"id\": 1112223,\r\n    \"original_language\": \"tl\",\r\n    \"original_title\": \"Rewind\",\r\n    \"overview\": \"Mary (Marian Rivera) loves John (Dingdong Dantes) for as long as she can remember. But after years of marriage, John's priorities shift, leading to a strained relationship with Mary, which causes a tragic accident that takes away Mary's life. Until one day, John gets an extraordinary proposition - to rewind time and save the life of the woman he loves.\",\r\n    \"popularity\": 506.227,\r\n    \"poster_path\": \"/vW80VheMJhHsj0pDVYJL3qAMWMd.jpg\",\r\n    \"release_date\": \"2023-12-25\",\r\n    \"title\": \"Rewind\",\r\n    \"video\": false,\r\n    \"vote_average\": 0,\r\n    \"vote_count\": 0\r\n  }\r\n~~~\r\nThe request in Postman should look as follows:\r\n\r\n![][postmovie]\r\n\r\nCheck the item was added to the DynamoDB table:\r\n\r\n### Validating JSON Schema at Runtime\r\n\r\nThere is a significant weakness in the above solution; we need to validate the JSON structure in the POST request body because the schemaless nature of Dynamodb means anything is acceptable. Type aliases and interfaces defined in TypeScript work well at compile-time but disappear during runtime,.Also, Typescript cannot help when the data's source is external, i.e. provided by a user or another application. We need extra tooling. The typescript-json-schema CLI creates JSON Schema documents from TypeScript definitions. The JSON follows the [Draft 7 JSON Schema][json], so many applications understand the schemas. Add typescript-json-schema to the project as a dev dependency:\r\n~~~bash\r\n$ npm install -D typescript-json-schema\r\n~~~\r\nAdd a new script to `package.json` as follows:\r\n~~~json\r\n  \"scripts\": {\r\n    ... as before ...\r\n    \"schema\": \"typescript-json-schema --noExtraProps --required --refs false -o ./shared/types.schema.json  \\\"./shared/types.d.ts\\\" \\\"*\\\"\"\r\n  },\r\n~~~\r\nThe script generates JSON schema documents from our TS type/interface definitions in `shared/types.d.ts`. Run the script:\r\n~~~bash\r\n$ npm run schema\r\n~~~\r\nBriefly examine the new file `shared/types.schema.json`. We can use these schemas at runtime to validate JSON data, for example, using the AJV package. Install this package:\r\n~~~bash\r\n$ npm i --save ajv \r\n~~~\r\nMake the following changes to `lambdas/addMovie.ts`:\r\n~~~ts\r\n// other imports ....\r\nimport Ajv from \"ajv\";\r\nimport schema from \"../shared/types.schema.json\";\r\n\r\nconst ajv = new Ajv();\r\nconst isValidBodyParams = ajv.compile(schema.definitions[\"Movie\"] || {});\r\n\r\nconst ddbDocClient = createDDbDocClient();\r\n\r\nexport const handler: APIGatewayProxyHandlerV2 = async (event, context) => {\r\n  try {\r\n    // Print Event\r\n    console.log(\"Event: \", event);\r\n    const body = event.body ? JSON.parse(event.body) : undefined;\r\n    if (!body) {\r\n      // as before ....\r\n    }\r\n    // NEW\r\n    if (!isValidBodyParams(body)) {\r\n      return {\r\n        statusCode: 500,\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          message: `Incorrect type. Must match Movie schema`,\r\n          schema: schema.definitions[\"Movie\"],\r\n        }),\r\n      };\r\n    }\r\n    // Unchanged\r\n    const commandOutput = await ddbDocClient.send(\r\n       // as before\r\n    );\r\n    // as before .....\r\n~~~\r\nBy default, the Typescript compiler does not allow a JSON file as an import. Make a change to the bottom of `tsconfig.json` to allow these imports as follows:\r\n~~~json\r\n \"exclude\": [\r\n  ... as before ...\r\n  ],\r\n  \"include\": [\r\n    \"shared/*.json\"\r\n  ],\r\n}\r\n~~~\r\nThe critical line in `lambdas/addMovie.ts` above is:\r\n\r\n>const isValidBodyParams = ajv.compile(schema.definitions[\"Movie\"] || {});\r\n\r\n'isValidBodyParams' is a dynamically generated function to validate a JS object against the Movie schema produced by typescript-json-schema.\r\n\r\nUpdate the stack (cdk deploy) and try sending the following invalid movie to the add movie endpoint:\r\n~~~json\r\n  {\r\n    \"id\":614479,\r\n    \"genre_ids\":[12,15,23],\r\n    \"original_language\":\"en\",\r\n    \"title\":\"Insidious: The Red Door\"\r\n  }\r\n~~~\r\n\r\n![][posterror]\r\n\r\nIn `.gitignore` add a new line to prevent the generated schemas from being added to the repo:\r\n~~~\r\n*.schema.json\r\n~~~\r\nCommit this work:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Add new movie endpoint.\"\r\n$ git push origin master\r\n~~~\r\n\r\n## Exercise.\r\n\r\n__You are required__ to develop a DELETE /movies/{movieID} endpoint that deletet a movie from the movies table. The DynamoDBDocumentClient command to delete an item is DeleteCommand:\r\n~~~ts\r\nDeleteCommand({\r\n    TableName: string,\r\n    Key: object,\r\n})\r\n~~~\r\nCommit this work:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Exercise: Delete movie endpoint\"\r\n$ git push origin master\r\n~~~\r\n\r\n[addmovie]: ./img/addmovie.png\r\n[postmovie]: ./img/postmovie.png\r\n[posterror]: ./img/posterror.png\r\n[tableupdate]: ./img/tableupdate.png\r\n[json]: https://json-schema.org/specification-links.html#draft-7\r\n","route":"/lab/{{COURSEURL}}/topic03/book-2/ExpandAPI","id":"ExpandAPI","type":"step"},{"title":" Query String parameters.","shortTitle":"DynamoDBQuery","contentMd":"## Query String parameters.\r\n\r\nWe want to include a movie cast resource/endpoint in the web API. It should support the following queries:\r\n+ Get all cast members for a movie.\r\n+ Get Information on a specific actor in a film.\r\n+ Get information on a particular character/role in a movie.\r\n\r\nAll the above requests will be routed to the same resource, as shown below:\r\n\r\n![][castapi]\r\n\r\nThe new resource expects a query string parameter, which can take the following forms:\r\n+ ?movieId=id - Get all cast members for a movie.\r\n+ ?movieId=id&actorName=name - Get the role played by an actor in a specific movie.\r\n+ ?movieId=id&roleName=role - Get the cast member for a particular role in a specific movie.\r\n\r\nWe will store movie casts in a separate table with the following attributes:\r\n+ movieId (partition key)\r\n+ actorName\r\n+ roleName (A character/role in the film) \r\n+ roleDescription\r\n\r\nThe table will have a composite primary key comprised of movieId and actorName (sort key). The table needs a local secondary index to support queries based on role/character name. This index's sort key will be 'roleName'.\r\n\r\n### Reset.\r\nAfter testing the delete movie feature in the previous section, we must repopulate the database. The simplest way to achieve this is to recreate the infrastructure. Type the following commands to achieve this:\r\n~~~bash\r\n$ cdk destroy\r\n$ cdk deploy\r\n~~~\r\n\r\n### Develop new feature.\r\n\r\nIn 'shared/types.d.ts' add new type declarations at the bottom:\r\n~~~ts\r\n  export type MovieCast = {\r\n    movieId: number;\r\n    actorName: string;\r\n    roleName: string;\r\n    roleDescription: string;\r\n  };\r\n  // Used to validate the query string og HTTP Get requests\r\n  export type MovieCastMemberQueryParams = {\r\n    movieId: string;\r\n    actorName?: string;\r\n    roleName?: string\r\n  }\r\n~~~\r\nIn `seed/movies.ts`:\r\n\r\n+ Update the import at the top:\r\n~~~ts\r\nimport {Movie, MovieCast} from '../shared/types'\r\n~~~\r\n\r\n+ Add movie cast data at the bottom:\r\n~~~ts\r\nexport const movieCasts: MovieCast[] = [\r\n  {\r\n    movieId: 1234,\r\n    actorName: \"Joe Bloggs\",\r\n    roleName: \"Male Character 1\",\r\n    roleDescription: \"description of character 1\",\r\n  },\r\n  {\r\n    movieId: 1234,\r\n    actorName: \"Alice Broggs\",\r\n    roleName: \"Female Character 1\",\r\n    roleDescription: \"description of character 2\",\r\n  },\r\n  {\r\n    movieId: 1234,\r\n    actorName: \"Joe Cloggs\",\r\n    roleName: \"Male Character 2\",\r\n    roleDescription: \"description of character 3\",\r\n  },\r\n  {\r\n    movieId: 2345,\r\n    actorName: \"Joe Bloggs\",\r\n    roleName: \"Male Character 1\",\r\n    roleDescription: \"description of character 3\",\r\n  },\r\n];\r\n~~~\r\n[We are not concerned with referential integrity at this stage of our development. Hence, the movie IDs used above do not match those used in the Movie seed data.]\r\n\r\nIn `shared/util.ts` replace the entire content with the following:\r\n~~~ts\r\nimport { marshall } from \"@aws-sdk/util-dynamodb\";\r\nimport { Movie, MovieCast } from \"./types\";\r\n\r\ntype Entity = Movie | MovieCast;  // NEW\r\nexport const generateItem = (entity: Entity) => {\r\n  return {\r\n    PutRequest: {\r\n      Item: marshall(entity),\r\n    },\r\n  };\r\n};\r\n\r\nexport const generateBatch = (data: Entity[]) => {\r\n  return data.map((e) => {\r\n    return generateItem(e);\r\n  });\r\n};\r\n~~~\r\nThe new Entity type declared above allows the two functions to work for seeding both DynamoDB tables (Movie and MovieCast).\r\n\r\nIn `rest-api-stack.ts`, make the following changes:\r\n\r\n+ Add a new table (after the movies table):\r\n~~~ts\r\n    const movieCastsTable = new dynamodb.Table(this, \"MovieCastTable\", {\r\n      billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,\r\n      partitionKey: { name: \"movieId\", type: dynamodb.AttributeType.NUMBER },\r\n      sortKey: { name: \"actorName\", type: dynamodb.AttributeType.STRING },\r\n      removalPolicy: cdk.RemovalPolicy.DESTROY,\r\n      tableName: \"MovieCast\",\r\n    });\r\n\r\n    movieCastsTable.addLocalSecondaryIndex({\r\n      indexName: \"roleIx\",\r\n      sortKey: { name: \"roleName\", type: dynamodb.AttributeType.STRING },\r\n    });\r\n~~~\r\n+ Update the import from the seed data at the top:\r\n~~~ts\r\nimport { movies, movieCasts } from \"../seed/movies\";\r\n~~~\r\n+ Replace the CustomResource so that it covers the seeding of the movie table and movie cast table:\r\n~~~ts\r\n    new custom.AwsCustomResource(this, \"moviesddbInitData\", {\r\n      onCreate: {\r\n        service: \"DynamoDB\",\r\n        action: \"batchWriteItem\",\r\n        parameters: {\r\n          RequestItems: {\r\n            [moviesTable.tableName]: generateBatch(movies),\r\n            [movieCastsTable.tableName]: generateBatch(movieCasts),  // Added\r\n          },\r\n        },\r\n        physicalResourceId: custom.PhysicalResourceId.of(\"moviesddbInitData\"), //.of(Date.now().toString()),\r\n      },\r\n      policy: custom.AwsCustomResourcePolicy.fromSdkCalls({\r\n        resources: [moviesTable.tableArn, movieCastsTable.tableArn],  // Includes movie cast\r\n      }),\r\n    });\r\n~~~\r\n+ Add a new lambda function to the functions section:\r\n~~~ts\r\n//  Functions .....\r\n    const getMovieCastMembersFn = new lambdanode.NodejsFunction(\r\n      this,\r\n      \"GetCastMemberFn\",\r\n      {\r\n        architecture: lambda.Architecture.ARM_64,\r\n        runtime: lambda.Runtime.NODEJS_16_X,\r\n        entry: `${__dirname}/../lambdas/getMovieCastMember.ts`,\r\n        timeout: cdk.Duration.seconds(10),\r\n        memorySize: 128,\r\n        environment: {\r\n          TABLE_NAME: movieCastsTable.tableName,\r\n          REGION: \"eu-west-1\",\r\n        },\r\n      }\r\n    );\r\n~~~\r\n+ Grant the new lambda permission to read from the new table:\r\n~~~ts\r\n// Permissions ......\r\n    movieCastsTable.grantReadData(getMovieCastMembersFn);\r\n~~~\r\n+ Add a new endpoint to the web API:\r\n~~~ts\r\nconst movieCastEndpoint = moviesEndpoint.addResource(\"cast\");\r\nmovieCastEndpoint.addMethod(\r\n    \"GET\",\r\n    new apig.LambdaIntegration(getMovieCastMembersFn, { proxy: true })\r\n);\r\n~~~\r\nCreate a new file for the lambda function called `lambdas/getMovieCastMember.ts` and add the following code:\r\n~~~ts\r\nimport { APIGatewayProxyHandlerV2 } from \"aws-lambda\";\r\nimport { MovieCastMemberQueryParams } from \"../shared/types\";\r\nimport { DynamoDBClient } from \"@aws-sdk/client-dynamodb\";\r\nimport {\r\n  DynamoDBDocumentClient,\r\n  QueryCommand,\r\n  QueryCommandInput,\r\n} from \"@aws-sdk/lib-dynamodb\";\r\nimport Ajv from \"ajv\";\r\nimport schema from \"../shared/types.schema.json\";\r\n\r\nconst ajv = new Ajv();\r\nconst isValidQueryParams = ajv.compile(\r\n  schema.definitions[\"MovieCastMemberQueryParams\"] || {}\r\n);\r\n \r\nconst ddbDocClient = createDocumentClient();\r\n\r\nexport const handler: APIGatewayProxyHandlerV2 = async (event, context) => {\r\n  try {\r\n    console.log(\"Event: \", event);\r\n    const queryParams = event.queryStringParameters;\r\n    if (!queryParams) {\r\n      return {\r\n        statusCode: 500,\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ message: \"Missing query parameters\" }),\r\n      };\r\n    }\r\n    if (!isValidQueryParams(queryParams)) {\r\n      return {\r\n        statusCode: 500,\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          message: `Incorrect type. Must match Query parameters schema`,\r\n          schema: schema.definitions[\"MovieCastMemberQueryParams\"],\r\n        }),\r\n      };\r\n    }\r\n    \r\n    const movieId = parseInt(queryParams.movieId);\r\n    let commandInput: QueryCommandInput = {\r\n      TableName: process.env.TABLE_NAME,\r\n    };\r\n    if (\"roleName\" in queryParams) {\r\n      commandInput = {\r\n        ...commandInput,\r\n        IndexName: \"roleIx\",\r\n        KeyConditionExpression: \"movieId = :m and begins_with(roleName, :r) \",\r\n        ExpressionAttributeValues: {\r\n          \":m\": movieId,\r\n          \":r\": queryParams.roleName,\r\n        },\r\n      };\r\n    } else if (\"actorName\" in queryParams) {\r\n      commandInput = {\r\n        ...commandInput,\r\n        KeyConditionExpression: \"movieId = :m and begins_with(actorName, :a) \",\r\n        ExpressionAttributeValues: {\r\n          \":m\": movieId,\r\n          \":a\": queryParams.actorName,\r\n        },\r\n      };\r\n    } else {\r\n      commandInput = {\r\n        ...commandInput,\r\n        KeyConditionExpression: \"movieId = :m\",\r\n        ExpressionAttributeValues: {\r\n          \":m\": movieId,\r\n        },\r\n      };\r\n    }\r\n    \r\n    const commandOutput = await ddbDocClient.send(\r\n      new QueryCommand(commandInput)\r\n      );\r\n      \r\n      return {\r\n        statusCode: 200,\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          data: commandOutput.Items,\r\n        }),\r\n      };\r\n    } catch (error: any) {\r\n      console.log(JSON.stringify(error));\r\n      return {\r\n        statusCode: 500,\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ error }),\r\n      };\r\n    }\r\n  };\r\n  \r\n  function createDocumentClient() {\r\n    const ddbClient = new DynamoDBClient({ region: process.env.REGION });\r\n    const marshallOptions = {\r\n      convertEmptyValues: true,\r\n      removeUndefinedValues: true,\r\n      convertClassInstanceToMap: true,\r\n    };\r\n    const unmarshallOptions = {\r\n    wrapNumbers: false,\r\n  };\r\n  const translateConfig = { marshallOptions, unmarshallOptions };\r\n  return DynamoDBDocumentClient.from(ddbClient, translateConfig);\r\n}\r\n~~~\r\nWe use the AJV package to validate the structure of the query string parameter object included in the event object. See below for a sample valid structure:\r\n\r\n![][querystructure]\r\n\r\nTo get __a set of items__ from a table, we send a QueryCommand to the DynamoDB document client. The command expects:\r\n+ The table name.\r\n+ (KeyConditionExpression) An expression describing how the DynamoDB engine selects the items to return. The expression is based on the table's key attributes, i.e., partition and sort keys.\r\n+ (IndexName) The index to use when it's not the base index, i.e. a local secondary index.\r\n+ (ExpressionAttributeValues) The bindings for the variables in the KeyConditionExpression.\r\n\r\nNow type the following terminal commands:\r\n~~~bash\r\n$ npm run schema\r\n£ cdk deploy\r\n~~~\r\nUse the API URL provided in the terminal response to test the new resource in the browser:\r\n\r\n+ Get the actors whose name starts with Joe in movie 1234.\r\n\r\n![][getsomeactors]\r\n\r\n+ Get the roles whose name starts with Male in movie 1234.\r\n\r\n![][getsomeroles]\r\n\r\n+ Get the full cast for movie 1234.\r\n\r\n![][getcast]\r\n\r\n+ An invalid query parameter.\r\n\r\n![][geterror]\r\n\r\nCommit this work:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Resource to query cast members.\"\r\n$ git push origin master\r\n~~~\r\n\r\n## Exercise.\r\n\r\n__You are required__ to extend the 'get specific movie' endpoint to allow the option to include a movie's cast in the response (as well as the regular movie metadata). A query string parameter will indicate the inclusion of the cast information:\r\n>>GET /movies/{movieId}?cast=true - Get a movie's metadata and cast.\r\n\r\n>>GET /movies/{movieId} - Get a movie's metadata only.\r\n\r\nTo test the feature, we need to adjust the seed data. In `seed/movies.ts` change the IDs of the first two movies in the array to 1234 and 2345 respectively.\r\nCommit this work:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Exercise: Expand get movie endpoint\"\r\n$ git push origin master\r\n~~~\r\n\r\n[castapi]: ./img/castapi.png\r\n[querystructure]: ./img/querystructure.png\r\n[getsomeactors]: ./img/getsomeactors.png\r\n[getsomeroles]: ./img/getsomeroles.png\r\n[getcast]: ./img/getcast.png\r\n[geterror]: ./img/geterror.png\r\n","route":"/lab/{{COURSEURL}}/topic03/book-2/DynamoDBQuery","id":"DynamoDBQuery","type":"step"},{"title":" Cleanup","shortTitle":"Cleanup","contentMd":"## Cleanup\r\n\r\nTo avoid incurring any unnecessary cost, destroy the entire stack from your AWS account with the command:\r\n~~~bash\r\n$ cdk destroy\r\n~~~\r\n\r\nGo to the Cloudformation service page of the AWS management console and confirm it deleted the stack for this app.\r\n","route":"/lab/{{COURSEURL}}/topic03/book-2/Cleanup","id":"Cleanup","type":"step"}]},{"route":"/lab/{{COURSEURL}}/topic03/book-3","type":"lab","title":"Cognito","summary":"In this lab, we will use the AWS Cognito service to add user authentication to a simple web API. The CDK will provision the following AWS resources:\r","contentMd":"# Cognito Authentication.\r\n\r\nIn this lab, we will use the AWS Cognito service to add user authentication to a simple web API. The CDK will provision the following AWS resources:\r\n\r\n+ A Cognito User pool.\r\n+ An API to perform Authentication processing - The Auth web API.\r\n+ An API to demonstrate public and protected REST endpoints - the App API.\r\n+ A custom authorizer to prevent unauthorized requests accessing protected routes.\r\n\r\nA visual representation of the CDK stack is demonstrated below:\r\n\r\n![][arch]\r\n\r\nThe Auth API will provide endpoints (REST resources) that allow a user to issue the following requests:\r\n\r\n+ User SignUp.\r\n+ SignUp confirmation.\r\n+ User SignIn.\r\n+ User Signout.\r\n\r\n### Setup.\r\n\r\nDownload and unzip [this archive][start]. Import it into VS Code and type the following commands:\r\n\r\n~~~bash\r\n$ npm install\r\n+ npm run schema\r\n£ cdk deploy\r\n~~~\r\nIn `lib/auth-app-stack.ts`, the code provisions a Cognito User Pool, an AppClient for this pool, and a skeleton REST API. In the AWS management console, go to Cognito Service --> User Pools (left panel), and confirm the creation of the user pool:\r\n\r\n![][userpool]\r\n\r\nNotice in `lib/auth-app-stack.ts` that the Stack class declares some private instance variables, i.e.\r\n~~~ts\r\nexport class AwsServerlessAuthStack extends cdk.Stack {\r\n  private auth: apig.IResource;\r\n  private userPoolId: string;\r\n  private userPoolClientId: string;\r\n~~~\r\nThese variables are initialized in the constructor method, for example:\r\n~~~ts\r\n    this.userPoolId = userPool.userPoolId;\r\n~~~\r\nThese instance variables are accessible by any of the class' methods (see below). \r\n\r\nThe authentication web API (Auth API) will have several elements similar in structure. We can define a private method in the class to reduce code duplication for declaring these common elements. In `lib/auth-app-stack.ts`, define the method as follows:\r\n~~~ts\r\nexport class AuthAppStack extends cdk.Stack {\r\n  private auth: apig.IResource;\r\n  private userPoolId: string;\r\n  private userPoolClientId: string;\r\n\r\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\r\n    .... as before .....\r\n  }\r\n// NEW\r\n  private addAuthRoute(\r\n    resourceName: string,\r\n    method: string,\r\n    fnName: string,\r\n    fnEntry: string,\r\n    allowCognitoAccess?: boolean\r\n  ): void {\r\n    const commonFnProps = {\r\n      architecture: lambda.Architecture.ARM_64,\r\n      timeout: cdk.Duration.seconds(10),\r\n      memorySize: 128,\r\n      runtime: lambda.Runtime.NODEJS_18_X,\r\n      handler: \"handler\",\r\n      environment: {\r\n        USER_POOL_ID: this.userPoolId,\r\n        CLIENT_ID: this.userPoolClientId,\r\n        REGION: cdk.Aws.REGION\r\n      },\r\n    };\r\n    \r\n    const resource = this.auth.addResource(resourceName);\r\n    \r\n    const fn = new node.NodejsFunction(this, fnName, {\r\n      ...commonFnProps,\r\n      entry: `${__dirname}/../lambdas/auth/${fnEntry}`,\r\n    });\r\n\r\n    resource.addMethod(method, new apig.LambdaIntegration(fn));\r\n  }  // end private method\r\n} // end class\r\n~~~\r\n\r\nCommit this work:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Setup for Auth APII.\"\r\n~~~\r\n\r\n### Verified Sender Identities.\r\n\r\nBy default, an AWS account is in __sandbox mode__. One consequence is that you can only use the AWS SES (Simple Email Service) to send emails to your __verified sender identities__, with a typical limit of 200 emails daily. A verified sender identity is an email address or domain you confirmed ownership of. \r\n\r\nIn this lab's application, we want to email users on signup. Therefore, you must first add their email address to your verified sender identities. Create a verified sender identity for any email addresses you can access by performing the steps in [this guide][vsi] (scroll to the section titled \"Creating an email address identity\" on the page). We will use these email addresses when demonstrating user registration later.\r\n\r\n[arch]: ./img/arch.png\r\n[start]: ./img/start.zip\r\n[userpool]: ./img/userpool.png\r\n[vsi]: https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html#verify-email-addresses-procedure","frontMatter":{},"id":"book-3","img":"https://{{COURSEURL}}/topic03/book-3/img/main.png","imgFile":"img/main.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"title":" Cognito Authentication.","shortTitle":"Cognito","contentMd":"# Cognito Authentication.\r\n\r\nIn this lab, we will use the AWS Cognito service to add user authentication to a simple web API. The CDK will provision the following AWS resources:\r\n\r\n+ A Cognito User pool.\r\n+ An API to perform Authentication processing - The Auth web API.\r\n+ An API to demonstrate public and protected REST endpoints - the App API.\r\n+ A custom authorizer to prevent unauthorized requests accessing protected routes.\r\n\r\nA visual representation of the CDK stack is demonstrated below:\r\n\r\n![][arch]\r\n\r\nThe Auth API will provide endpoints (REST resources) that allow a user to issue the following requests:\r\n\r\n+ User SignUp.\r\n+ SignUp confirmation.\r\n+ User SignIn.\r\n+ User Signout.\r\n\r\n### Setup.\r\n\r\nDownload and unzip [this archive][start]. Import it into VS Code and type the following commands:\r\n\r\n~~~bash\r\n$ npm install\r\n+ npm run schema\r\n£ cdk deploy\r\n~~~\r\nIn `lib/auth-app-stack.ts`, the code provisions a Cognito User Pool, an AppClient for this pool, and a skeleton REST API. In the AWS management console, go to Cognito Service --> User Pools (left panel), and confirm the creation of the user pool:\r\n\r\n![][userpool]\r\n\r\nNotice in `lib/auth-app-stack.ts` that the Stack class declares some private instance variables, i.e.\r\n~~~ts\r\nexport class AwsServerlessAuthStack extends cdk.Stack {\r\n  private auth: apig.IResource;\r\n  private userPoolId: string;\r\n  private userPoolClientId: string;\r\n~~~\r\nThese variables are initialized in the constructor method, for example:\r\n~~~ts\r\n    this.userPoolId = userPool.userPoolId;\r\n~~~\r\nThese instance variables are accessible by any of the class' methods (see below). \r\n\r\nThe authentication web API (Auth API) will have several elements similar in structure. We can define a private method in the class to reduce code duplication for declaring these common elements. In `lib/auth-app-stack.ts`, define the method as follows:\r\n~~~ts\r\nexport class AuthAppStack extends cdk.Stack {\r\n  private auth: apig.IResource;\r\n  private userPoolId: string;\r\n  private userPoolClientId: string;\r\n\r\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\r\n    .... as before .....\r\n  }\r\n// NEW\r\n  private addAuthRoute(\r\n    resourceName: string,\r\n    method: string,\r\n    fnName: string,\r\n    fnEntry: string,\r\n    allowCognitoAccess?: boolean\r\n  ): void {\r\n    const commonFnProps = {\r\n      architecture: lambda.Architecture.ARM_64,\r\n      timeout: cdk.Duration.seconds(10),\r\n      memorySize: 128,\r\n      runtime: lambda.Runtime.NODEJS_18_X,\r\n      handler: \"handler\",\r\n      environment: {\r\n        USER_POOL_ID: this.userPoolId,\r\n        CLIENT_ID: this.userPoolClientId,\r\n        REGION: cdk.Aws.REGION\r\n      },\r\n    };\r\n    \r\n    const resource = this.auth.addResource(resourceName);\r\n    \r\n    const fn = new node.NodejsFunction(this, fnName, {\r\n      ...commonFnProps,\r\n      entry: `${__dirname}/../lambdas/auth/${fnEntry}`,\r\n    });\r\n\r\n    resource.addMethod(method, new apig.LambdaIntegration(fn));\r\n  }  // end private method\r\n} // end class\r\n~~~\r\n\r\nCommit this work:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Setup for Auth APII.\"\r\n~~~\r\n\r\n### Verified Sender Identities.\r\n\r\nBy default, an AWS account is in __sandbox mode__. One consequence is that you can only use the AWS SES (Simple Email Service) to send emails to your __verified sender identities__, with a typical limit of 200 emails daily. A verified sender identity is an email address or domain you confirmed ownership of. \r\n\r\nIn this lab's application, we want to email users on signup. Therefore, you must first add their email address to your verified sender identities. Create a verified sender identity for any email addresses you can access by performing the steps in [this guide][vsi] (scroll to the section titled \"Creating an email address identity\" on the page). We will use these email addresses when demonstrating user registration later.\r\n\r\n[arch]: ./img/arch.png\r\n[start]: ./img/start.zip\r\n[userpool]: ./img/userpool.png\r\n[vsi]: https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html#verify-email-addresses-procedure","route":"/lab/{{COURSEURL}}/topic03/book-3/Cognito","id":"Cognito","type":"step"},{"title":" User SignUp.","shortTitle":"Signup","contentMd":"## User SignUp.\r\n\r\nIn `lib/auth-app-stack.ts`, add the Signup REST resource by using the private method we declared in the previous section. Place the invocation at the end of the class' constructor:\r\n~~~ts\r\nexport class AuthAppStack extends cdk.Stack {\r\n\r\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\r\n    .........\r\n    this.auth = authApi.root.addResource(\"auth\");  // Unchanged\r\n\r\n     // NEW\r\n    this.addAuthRoute(\r\n      \"signup\",\r\n      \"POST\",\r\n      \"SignupFn\",\r\n      'signup.ts'\r\n    );\r\n\r\n  } // end constructor\r\n\r\n  private addAuthRoute(.....): void {\r\n     ........\r\n  }\r\n}\r\n~~~\r\nCreate the file `lambdas/auth/signup.ts` and add the following code:\r\n~~~ts\r\nimport { APIGatewayProxyHandlerV2 } from \"aws-lambda\";\r\nimport { SignUpBody } from \"../../shared/types\";\r\nimport {\r\n  CognitoIdentityProviderClient,\r\n  SignUpCommand,\r\n  SignUpCommandInput,\r\n} from \"@aws-sdk/client-cognito-identity-provider\"; // ES Modules import\r\nimport Ajv from \"ajv\";\r\nimport schema from \"../../shared/types.schema.json\";\r\n\r\nconst ajv = new Ajv();\r\nconst isValidBodyParams = ajv.compile(schema.definitions[\"SignUpBody\"] || {});\r\n\r\nconst client = new CognitoIdentityProviderClient({ region:  process.env.REGION  });\r\n\r\nexport const handler: APIGatewayProxyHandlerV2 = async (event) => {\r\n  try {\r\n    console.log(\"[EVENT]\", event);\r\n    const body = event.body ? JSON.parse(event.body) : undefined;\r\n\r\n    if (!isValidBodyParams(body)) {\r\n      return {\r\n        statusCode: 500,\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          message: `Incorrect type. Must match SignUpBody schema`,\r\n          schema: schema.definitions[\"SignUpBody\"],\r\n        }),\r\n      };\r\n    }\r\n\r\n    const signUpBody = body as SignUpBody;\r\n\r\n    const params: SignUpCommandInput = {\r\n      ClientId: process.env.CLIENT_ID!,\r\n      Username: signUpBody.username,\r\n      Password: signUpBody.password,\r\n      UserAttributes: [{ Name: \"email\", Value: signUpBody.email }],\r\n    };\r\n\r\n    const command = new SignUpCommand(params);\r\n    const res = await client.send(command);\r\n    return {\r\n      statusCode: 200,\r\n      body: JSON.stringify({\r\n        message: res,\r\n      }),\r\n    };\r\n  } catch (err) {\r\n    console.error(err);\r\n    return {\r\n      statusCode: 500,\r\n      body: JSON.stringify({\r\n        message: err,\r\n      }),\r\n    };\r\n  }\r\n};\r\n~~~\r\nThe function validates the signup request body (see the SignUpBody type in `shared/types.d.ts`) using AJV and then sends a signup request to the Cognito service for our user pool. To test the functionality, use Postman to send a POST request with the following body data:\r\n~~~ts\r\n{\r\n    \"username\": \"userA\",\r\n    \"password\": \"passwA!1\",\r\n    \"email\": \"your_verified_email_identity\"\r\n}\r\n~~~\r\n[By default, Cognito imposes constraints on passwords, e.g. at least one digit and one non-alphanumeric character. The constraints are configurable.]\r\n\r\n![][signup]\r\n\r\nAfter sending this request, check the email account you used in the sign-up for a message containing a verification code, e.g. \r\n\r\n![][code]\r\n\r\nWe will use this code in the next section to confirm a user's registration. Our user pool has self-signup enabled, meaning users confirm their registration.\r\n\r\nCommit this work:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Signup resource\"\r\n~~~\r\n\r\n[signup]: ./img/signup.png\r\n[code]: ./img/code.png\r\n[pathparameters]: ./img/pathparameters.png\r\n\r\n","route":"/lab/{{COURSEURL}}/topic03/book-3/Signup","id":"Signup","type":"step"},{"title":" Confirm SignUp.","shortTitle":"Confirm","contentMd":"## Confirm SignUp.\r\n\r\nIn `lib/auth-app-stack.ts`, add a second resource to the Auth web API using the private function as follows:\r\n~~~ts\r\n    // Unchanged\r\n    this.addAuthRoute(\r\n      \"signup\",\r\n      \"POST\",\r\n      \"SignupFn\",\r\n      'signup.ts'\r\n    );\r\n    // NEW\r\n    this.addAuthRoute(\r\n      \"confirm_signup\",\r\n      \"POST\",\r\n      \"ConfirmFn\",\r\n      \"confirm-signup.ts\"\r\n    );\r\n~~~\r\nCreate the file `lambdas/auth/confirm-signup.ts` and add the following code:\r\n~~~ts\r\nimport { APIGatewayProxyHandlerV2 } from \"aws-lambda\";\r\nimport {\r\n  CognitoIdentityProviderClient,\r\n  ConfirmSignUpCommand,\r\n  ConfirmSignUpCommandInput,\r\n} from \"@aws-sdk/client-cognito-identity-provider\";\r\nimport { ConfirmSignUpBody } from \"../../shared/types\";\r\n\r\nimport Ajv from \"ajv\";\r\nimport schema from \"../../shared/types.schema.json\";\r\n\r\nconst ajv = new Ajv();\r\nconst isValidBodyParams = ajv.compile(\r\n  schema.definitions[\"ConfirmSignUpBody\"] || {}\r\n);\r\n\r\nconst client = new CognitoIdentityProviderClient({ region: process.env.REGION });\r\n\r\nexport const handler: APIGatewayProxyHandlerV2 = async (event) => {\r\n  try {\r\n    console.log(\"[EVENT]\", event);\r\n    const body = event.body ? JSON.parse(event.body) : undefined;\r\n\r\n    if (!isValidBodyParams(body)) {\r\n      return {\r\n        statusCode: 500,\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          message: `Incorrect type. Must match ConfirmSignUpBody schema`,\r\n          schema: schema.definitions[\"ConfirmSignUpBody\"],\r\n        }),\r\n      };\r\n    }\r\n    const confirmSignUpBody = body as ConfirmSignUpBody;\r\n\r\n    const params: ConfirmSignUpCommandInput = {\r\n      ClientId: process.env.CLIENT_ID!,\r\n      Username: confirmSignUpBody.username,\r\n      ConfirmationCode: confirmSignUpBody.code,\r\n    };\r\n\r\n    const command = new ConfirmSignUpCommand(params);\r\n    await client.send(command);\r\n\r\n    return {\r\n      statusCode: 200,\r\n      body: JSON.stringify({\r\n        message: `User ${confirmSignUpBody.username} successfully confirmed`,\r\n        confirmed: true,\r\n      }),\r\n    };\r\n  } catch (err) {\r\n    return {\r\n      statusCode: 500,\r\n      body: JSON.stringify({\r\n        message: err,\r\n      }),\r\n    };\r\n  }\r\n};\r\n\r\n~~~\r\nThe execution flow in the above handler function is similar to the sign-up lambda function. Use Postman to test it, where the body of the POST request is the following:\r\n~~~ts\r\n{\r\n    \"username\": \"userA\",\r\n    \"code\": \"your_verification_code\"\r\n}\r\n~~~\r\n\r\n![][confirm]\r\n\r\nIn the management console, go to Cognito --> User pools (left panel) --> Click your user pool, and notice the Confirmed status of userA:\r\n\r\n![][confirmed]\r\n\r\nCommit this work:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Confirm signup resource.\"\r\n~~~\r\n\r\n[confirm]: ./img/confirm.png\r\n[confirmed]: ./img/confirmed.png\r\n\r\n\r\n","route":"/lab/{{COURSEURL}}/topic03/book-3/Confirm","id":"Confirm","type":"step"},{"title":" User SignIn/out.","shortTitle":"Signin","contentMd":"## User SignIn/out.\r\n\r\nIn `lib/auth-app-stack.ts` add signin and signout resources to the Auth web API:\r\n~~~ts\r\n    // Unchanged\r\n    this.addAuthRoute(\r\n      \"confirm_signup\",\r\n      \"POST\",\r\n      \"ConfirmFn\",\r\n      \"confirm-signup.ts\"\r\n    );\r\n    // NEW\r\n    this.addAuthRoute('signout', 'GET', 'SignoutFn', 'signout.ts');\r\n  this.addAuthRoute('signin', 'POST', 'SigninFn', 'signin.ts');\r\n~~~\r\nCreate the file `lambdas/auth/signin.ts` and add the following code:\r\n~~~ts\r\nimport { APIGatewayProxyHandlerV2 } from \"aws-lambda\";\r\nimport { SignInBody } from \"../../shared/types\";\r\nimport {\r\n  CognitoIdentityProviderClient,\r\n  InitiateAuthCommand,\r\n  InitiateAuthCommandInput,\r\n} from \"@aws-sdk/client-cognito-identity-provider\";\r\nimport Ajv from \"ajv\";\r\nimport schema from \"../../shared/types.schema.json\";\r\n\r\nconst ajv = new Ajv();\r\nconst isValidBodyParams = ajv.compile(schema.definitions[\"SignInBody\"] || {});\r\n\r\nconst client = new CognitoIdentityProviderClient({\r\n  region: process.env.REGION,\r\n});\r\n\r\nexport const handler: APIGatewayProxyHandlerV2 = async (event) => {\r\n  try {\r\n    console.log(\"[EVENT]\", event);\r\n    const body = event.body ? JSON.parse(event.body) : undefined;\r\n\r\n    if (!isValidBodyParams(body)) {\r\n      console.log(\"[Invalid]\", body);\r\n\r\n      const res = {\r\n        statusCode: 500,\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          message: `Incorrect type. Must match SignInBody schema`,\r\n          schema: schema.definitions[\"SignInBody\"],\r\n        }),\r\n      };\r\n      return res;\r\n    }\r\n\r\n    const signInBody = body as SignInBody;\r\n\r\n    const params: InitiateAuthCommandInput = {\r\n      ClientId: process.env.CLIENT_ID!,\r\n      AuthFlow: \"USER_PASSWORD_AUTH\",\r\n      AuthParameters: {\r\n        USERNAME: signInBody.username,\r\n        PASSWORD: signInBody.password,\r\n      },\r\n    };\r\n\r\n    const command = new InitiateAuthCommand(params);\r\n    const { AuthenticationResult } = await client.send(command);\r\n    console.log(\"Auth\", AuthenticationResult);\r\n    if (!AuthenticationResult) {\r\n      return {\r\n        statusCode: 400,\r\n        body: JSON.stringify({\r\n          message: \"User signin failed\",\r\n        }),\r\n      };\r\n    }\r\n    const token = AuthenticationResult.IdToken;\r\n\r\n    return {\r\n      statusCode: 200,\r\n      headers: {\r\n        \"Access-Control-Allow-Headers\": \"*\",\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Set-Cookie\": `token=${token}; SameSite=None; Secure; HttpOnly; Path=/; Max-Age=3600;`,\r\n      },\r\n      body: JSON.stringify({\r\n        message: \"Auth successfull\",\r\n        token: token,\r\n      }),\r\n    };\r\n  } catch (err) {\r\n    console.error(err);\r\n\r\n    return {\r\n      statusCode: 500,\r\n      body: JSON.stringify({\r\n        message: err,\r\n      }),\r\n    };\r\n  }\r\n};\r\n~~~\r\nThe above handler returns a JWT token in the HTTP Set-Cookie response header for a successful login attempt. We use this token with subsequent requests as proof of authentication - we will test this later.\r\n\r\nCreate the file `lambdas/auth/signout.ts` and add the following code:\r\n~~~ts\r\nimport { APIGatewayProxyResult } from \"aws-lambda\";\r\n\r\nexports.handler = async function (): Promise<APIGatewayProxyResult> {\r\n  return {\r\n    statusCode: 200,\r\n    headers: {\r\n      \"Access-Control-Allow-Headers\": \"*\",\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      \"Set-Cookie\":\r\n        \"token=x; SameSite=None; Secure; HttpOnly; Path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT;\",\r\n    },\r\n    body: JSON.stringify({\r\n      message: \"Signout successfull\",\r\n    }),\r\n  };\r\n};\r\n~~~\r\nThis handler's HTTP response clears the JWT token in the browser. \r\n\r\nCommit this work:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Sign-in and signout resourcess.\"\r\n~~~\r\n\r\n\r\n","route":"/lab/{{COURSEURL}}/topic03/book-3/Signin","id":"Signin","type":"step"},{"title":" The App API.","shortTitle":"AppAPI","contentMd":"## The App API.\r\n\r\nWe want to use our authentication infrastructure to protect functionality accessed through a web API (the 'app' API). A request to this functionality must include a valid JWT token in the HTTP Cookies request header. \r\n\r\nFirst, create the infrastructure for the App API. In `lib/auth-app-stack.ts`, add the following code at the end of the constructor: \r\n~~~ts\r\nexport class AuthAppStack extends cdk.Stack {\r\n \r\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\r\n    ..... Auth API - unchanged\r\n\r\n    // ================================\r\n    // NEW\r\n    const appApi = new apig.RestApi(this, \"AppApi\", {\r\n      description: \"App RestApi\",\r\n      endpointTypes: [apig.EndpointType.REGIONAL],\r\n      defaultCorsPreflightOptions: {\r\n        allowOrigins: apig.Cors.ALL_ORIGINS,\r\n      },\r\n    });\r\n\r\n    const appCommonFnProps = {\r\n      architecture: lambda.Architecture.ARM_64,\r\n      timeout: cdk.Duration.seconds(10),\r\n      memorySize: 128,\r\n      runtime: lambda.Runtime.NODEJS_18_X,\r\n      handler: \"handler\",\r\n      environment: {\r\n        USER_POOL_ID: this.userPoolId,\r\n        CLIENT_ID: this.userPoolClientId,\r\n        REGION: cdk.Aws.REGION,\r\n      },\r\n    };\r\n\r\n    const protectedRes = appApi.root.addResource(\"protected\");\r\n\r\n    const publicRes = appApi.root.addResource(\"public\");\r\n\r\n    const protectedFn = new node.NodejsFunction(this, \"ProtectedFn\", {\r\n      ...appCommonFnProps,\r\n      entry: \"./lambda/protected.ts\",\r\n    });\r\n\r\n    const publicFn = new node.NodejsFunction(this, \"PublicFn\", {\r\n      ...appCommonFnProps,\r\n      entry: \"./lambda/public.ts\",\r\n    });\r\n\r\n    const authorizerFn = new node.NodejsFunction(this, \"AuthorizerFn\", {\r\n      ...appCommonFnProps,\r\n      entry: \"./lambda/auth/authorizer.ts\",\r\n    });\r\n\r\n    const requestAuthorizer = new apig.RequestAuthorizer(\r\n      this,\r\n      \"RequestAuthorizer\",\r\n      {\r\n        identitySources: [apig.IdentitySource.header(\"cookie\")],\r\n        handler: authorizerFn,\r\n        resultsCacheTtl: cdk.Duration.minutes(0),\r\n      }\r\n    );\r\n\r\n    protectedRes.addMethod(\"GET\", new apig.LambdaIntegration(protectedFn), {\r\n      authorizer: requestAuthorizer,\r\n      authorizationType: apig.AuthorizationType.CUSTOM,\r\n    });\r\n\r\n    publicRes.addMethod(\"GET\", new apig.LambdaIntegration(publicFn));\r\n\r\n  } // end constructor\r\n\r\n  private addAuthRoute(.....): void {\r\n    ... as before ....\r\n  } // end addAuthRoute\r\n}  // end class\r\n~~~\r\nThe new App API has two resources (endpoints), with the paths '/protected' and '/public', and both use the HTTP GET method for simplicity. The protected resource requires user authentication, and we indicate this by associating an __authorizer__ in the resource's lambda proxy integration, i.e. \r\n~~~ts\r\n    protectedRes.addMethod(\"GET\", new apig.LambdaIntegration(protectedFn), {\r\n      authorizer: requestAuthorizer,\r\n      authorizationType: apig.AuthorizationType.CUSTOM,\r\n    });\r\n~~~\r\nThe authorizer is an instance of the RequestAuthorizer construct. Its configuration specifies where to locate the tokens in client requests (identitySources) and where the authorizer handler implementation is, i.e. \r\n~~~ts\r\n    const requestAuthorizer = new apig.RequestAuthorizer(\r\n      this,\r\n      \"RequestAuthorizer\",\r\n      {\r\n        identitySources: [apig.IdentitySource.header(\"cookie\")],\r\n        handler: authorizerFn,\r\n        resultsCacheTtl: cdk.Duration.minutes(0),\r\n      }\r\n    );\r\n~~~\r\nTo implement our authorizer, first create `lambdas/utils.ts` and add the following code:\r\n~~~ts\r\nimport {\r\n  APIGatewayRequestAuthorizerEvent,\r\n  APIGatewayAuthorizerEvent,\r\n  PolicyDocument,\r\n  APIGatewayProxyEvent,\r\n} from \"aws-lambda\";\r\n\r\nimport axios from \"axios\"\r\nimport jwt from 'jsonwebtoken'\r\nimport jwkToPem from \"jwk-to-pem\";\r\n\r\nexport type CookieMap = { [key: string]: string } | undefined;\r\nexport type JwtToken = { sub: string; email: string } | null;\r\nexport type Jwk = {\r\n  keys: {\r\n    alg: string;\r\n    e: string;\r\n    kid: string;\r\n    kty: string;\r\n    n: string;\r\n    use: string;\r\n  }[];\r\n};\r\n\r\nexport const parseCookies = (\r\n  event: APIGatewayRequestAuthorizerEvent | APIGatewayProxyEvent\r\n) => {\r\n  if (!event.headers || !event.headers.Cookie) {\r\n    return undefined;\r\n  }\r\n\r\n  const cookiesStr = event.headers.Cookie;\r\n  const cookiesArr = cookiesStr.split(\";\");\r\n\r\n  const cookieMap: CookieMap = {};\r\n\r\n  for (let cookie of cookiesArr) {\r\n    const cookieSplit = cookie.trim().split(\"=\");\r\n    cookieMap[cookieSplit[0]] = cookieSplit[1];\r\n  }\r\n\r\n  return cookieMap;\r\n};\r\n\r\nexport const verifyToken = async (\r\n  token: string,\r\n  userPoolId: string | undefined,\r\n  region: string\r\n): Promise<JwtToken> => {\r\n  try {\r\n    const url = `https://cognito-idp.${region}.amazonaws.com/${userPoolId}/.well-known/jwks.json`;\r\n    const { data }: { data: Jwk } = await axios.get(url);\r\n    const pem = jwkToPem(data.keys[0]);\r\n\r\n    return jwt.verify(token, pem, { algorithms: [\"RS256\"] });\r\n  } catch (err) {\r\n    console.log(err);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const createPolicy = (\r\n  event: APIGatewayAuthorizerEvent,\r\n  effect: string\r\n): PolicyDocument => {\r\n  return {\r\n    Version: \"2012-10-17\",\r\n    Statement: [\r\n      {\r\n        Effect: effect,\r\n        Action: \"execute-api:Invoke\",\r\n        Resource: [event.methodArn],\r\n      },\r\n    ],\r\n  };\r\n};\r\n~~~\r\nThe above file includes utility functions that:\r\n\r\n+ Parses a HTTP Cookies Request header's string value and stores the result in a Map data structure for easy processing.\r\n+ Validates a JWT token issued by a Cognito user pool.\r\n+ Dynamically creates an IAM policy document that either denies or allows access to the endpoints of our App API.\r\n\r\n\r\nNow create the file `lambdas/auth/authorizer.ts` and add the following code:\r\n~~~ts\r\nimport { APIGatewayRequestAuthorizerHandler } from \"aws-lambda\";\r\nimport { CookieMap, createPolicy, parseCookies, verifyToken } from \"../utils\";\r\n\r\nexport const handler: APIGatewayRequestAuthorizerHandler = async (event) => {\r\n  console.log(\"[EVENT]\", event);\r\n\r\n  const cookies: CookieMap = parseCookies(event);\r\n\r\n  if (!cookies) {\r\n    return {\r\n      principalId: \"\",\r\n      policyDocument: createPolicy(event, \"Deny\"),\r\n    };\r\n  }\r\n\r\n  const verifiedJwt = await verifyToken(\r\n    cookies.token,\r\n    process.env.USER_POOL_ID,\r\n    process.env.REGION!\r\n  );\r\n\r\n  return {\r\n    principalId: verifiedJwt ? verifiedJwt.sub!.toString() : \"\",\r\n    policyDocument: createPolicy(event, verifiedJwt ? \"Allow\" : \"Deny\"),\r\n  };\r\n};\r\n\r\n~~~\r\nThe API Gateway service invokes the above lambda function when it receives requests targetting the App API. The handler validates the token included in the request. It returns an IAM policy allowing or denying the forwarding of the client's request to the protected backend functionality.\r\n\r\nUpdate the stack:\r\n~~~bash\r\n$ cdk deploy\r\n~~~\r\nTo test this code, we must sign in and then use the returned token to access the protected resource. Sign in using the Auth API URL and the following request body:\r\n~~~js\r\n{\r\n    \"username\": \"userA\",\r\n    \"password\": \"passwA!1\"\r\n}\r\n~~~\r\n\r\n![][signin]\r\n\r\nWhen Postman receives the response, click the Cookies link underneath the Send button and click the token link to see the full token value:\r\n\r\n![][cookies]\r\n\r\nCopy the token value into the clipboard, click Cancel and close the panel to return to the main Postman window. Use Postman to send an HTTP GET request to the protected URL, setting the Host and Cookie headers. The value for the Cookies header is the token value pasted from the clipboard.\r\n\r\n![][protected]\r\n\r\nSend a GET request to the public resource of the App API but omit the token in this case:\r\n\r\n![][public]\r\n\r\nCommit this work:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Added App API endpoints.\"\r\n~~~\r\n\r\n[signin]: ./img/signin.png\r\n[cookies]: ./img/cookies.png\r\n[protected]: ./img/protected.png\r\n[public]: ./img/public.png\r\n\r\n","route":"/lab/{{COURSEURL}}/topic03/book-3/AppAPI","id":"AppAPI","type":"step"},{"title":" Refactoring.","shortTitle":"Refactor","contentMd":"## Refactoring.\r\n\r\nThe CDK framework provides two main concepts for structuring our infrastructure code: Stacks and Construct. To date we have placed all infrastructure code inside one Stack instance, but multi-stack CDK apps are possible. Also, within a Stack, we can encapsulate a logical code block inside a Construct instance. We will refactor the infrastructure code developed in this lab as follows:\r\n\r\n![][construct]\r\n\r\nAuthAPI and AppAPI are custom constructs we will create by extracting logical code blocks from the current stack. The CDK framework provides the L2 constructs in our architecture, which are synthesised into Li constructs during deployment. Cloudformation uses the L1 instances to provision the app's infrastructure, e.g. API Gateway resources, Lambda instances, Cognito user pool.\r\n\r\nBefore refactoring our code, remove the entire stack from your AWS account:\r\n~~~bash\r\n$ cdk destroy\r\n~~~\r\n\r\nCreate the file `lib/auth-api.ts` and add the following code:\r\n~~~ts\r\nimport * as cdk from \"aws-cdk-lib\";\r\nimport { Construct } from \"constructs\";\r\nimport * as apig from \"aws-cdk-lib/aws-apigateway\";\r\nimport * as lambda from \"aws-cdk-lib/aws-lambda\";\r\nimport * as node from \"aws-cdk-lib/aws-lambda-nodejs\";\r\n\r\ntype AuthApiProps = {\r\n  userPoolId: string;\r\n  userPoolClientId: string;\r\n};\r\n\r\nexport class AuthApi extends Construct {\r\n  private auth: apig.IResource;\r\n  private userPoolId: string;\r\n  private userPoolClientId: string;\r\n\r\n  constructor(scope: Construct, id: string, props: AuthApiProps) {\r\n    super(scope, id);\r\n\r\n    ({ userPoolId: this.userPoolId, userPoolClientId: this.userPoolClientId } =\r\n      props);\r\n\r\n    const api = new apig.RestApi(this, \"AuthServiceApi\", {\r\n      description: \"Authentication Service RestApi\",\r\n      endpointTypes: [apig.EndpointType.REGIONAL],\r\n      defaultCorsPreflightOptions: {\r\n        allowOrigins: apig.Cors.ALL_ORIGINS,\r\n      },\r\n    });\r\n\r\n    this.auth = api.root.addResource(\"auth\");\r\n\r\n    this.addAuthRoute(\"signup\", \"POST\", \"SignupFn\", \"signup.ts\");\r\n\r\n    this.addAuthRoute(\r\n      \"confirm_signup\",\r\n      \"POST\",\r\n      \"ConfirmFn\",\r\n      \"confirm-signup.ts\"\r\n    );\r\n\r\n    this.addAuthRoute(\"signout\", \"GET\", \"SignoutFn\", \"signout.ts\");\r\n    this.addAuthRoute(\"signin\", \"POST\", \"SigninFn\", \"signin.ts\");\r\n  }\r\n\r\n  private addAuthRoute(\r\n    resourceName: string,\r\n    method: string,\r\n    fnName: string,\r\n    fnEntry: string\r\n  ): void {\r\n    const commonFnProps = {\r\n      architecture: lambda.Architecture.ARM_64,\r\n      timeout: cdk.Duration.seconds(10),\r\n      memorySize: 128,\r\n      runtime: lambda.Runtime.NODEJS_16_X,\r\n      handler: \"handler\",\r\n      environment: {\r\n        USER_POOL_ID: this.userPoolId,\r\n        CLIENT_ID: this.userPoolClientId,\r\n        REGION: cdk.Aws.REGION,\r\n      },\r\n    };\r\n\r\n    const resource = this.auth.addResource(resourceName);\r\n\r\n    const fn = new node.NodejsFunction(this, fnName, {\r\n      ...commonFnProps,\r\n      entry: `${__dirname}/../lambda/auth/${fnEntry}`,\r\n    });\r\n\r\n    resource.addMethod(method, new apig.LambdaIntegration(fn));\r\n  }\r\n}\r\n~~~\r\nThe above code is identical to what we developed in the Stack class (`lib/auth-app-stack.ts`) - we will remove it from there shortly. Create the file `lib/app-api.ts` and add the following code:\r\n~~~ts\r\nimport { Aws } from \"aws-cdk-lib\";\r\nimport * as cdk from \"aws-cdk-lib\";\r\nimport { Construct } from \"constructs\";\r\nimport * as apig from \"aws-cdk-lib/aws-apigateway\";\r\nimport * as lambda from \"aws-cdk-lib/aws-lambda\";\r\nimport * as node from \"aws-cdk-lib/aws-lambda-nodejs\";\r\n\r\ntype AppApiProps = {\r\n  userPoolId: string;\r\n  userPoolClientId: string;\r\n};\r\n\r\nexport class AppApi extends Construct {\r\n  constructor(scope: Construct, id: string, props: AppApiProps) {\r\n    super(scope, id);\r\n\r\n    const appApi = new apig.RestApi(this, \"AppApi\", {\r\n      description: \"App RestApi\",\r\n      endpointTypes: [apig.EndpointType.REGIONAL],\r\n      defaultCorsPreflightOptions: {\r\n        allowOrigins: apig.Cors.ALL_ORIGINS,\r\n      },\r\n    });\r\n\r\n    const appCommonFnProps = {\r\n      architecture: lambda.Architecture.ARM_64,\r\n      timeout: cdk.Duration.seconds(10),\r\n      memorySize: 128,\r\n      runtime: lambda.Runtime.NODEJS_16_X,\r\n      handler: \"handler\",\r\n      environment: {\r\n        USER_POOL_ID: props.userPoolId,\r\n        CLIENT_ID: props.userPoolClientId,\r\n        REGION: cdk.Aws.REGION,\r\n      },\r\n    };\r\n\r\n    const protectedRes = appApi.root.addResource(\"protected\");\r\n\r\n    const publicRes = appApi.root.addResource(\"public\");\r\n\r\n    const protectedFn = new node.NodejsFunction(this, \"ProtectedFn\", {\r\n      ...appCommonFnProps,\r\n      entry: \"./lambda/protected.ts\",\r\n    });\r\n\r\n    const publicFn = new node.NodejsFunction(this, \"PublicFn\", {\r\n      ...appCommonFnProps,\r\n      entry: \"./lambda/public.ts\",\r\n    });\r\n\r\n    const authorizerFn = new node.NodejsFunction(this, \"AuthorizerFn\", {\r\n      ...appCommonFnProps,\r\n      entry: \"./lambda/auth/authorizer.ts\",\r\n    });\r\n\r\n    const requestAuthorizer = new apig.RequestAuthorizer(\r\n      this,\r\n      \"RequestAuthorizer\",\r\n      {\r\n        identitySources: [apig.IdentitySource.header(\"cookie\")],\r\n        handler: authorizerFn,\r\n        resultsCacheTtl: cdk.Duration.minutes(0),\r\n      }\r\n    );\r\n\r\n    protectedRes.addMethod(\"GET\", new apig.LambdaIntegration(protectedFn), {\r\n      authorizer: requestAuthorizer,\r\n      authorizationType: apig.AuthorizationType.CUSTOM,\r\n    });\r\n\r\n    publicRes.addMethod(\"GET\", new apig.LambdaIntegration(publicFn));\r\n  }\r\n}\r\n~~~\r\nThis code is identical to the App API code currently in the Stack class. In `lib/auth-app-stack.ts`, replace the entire content with the following:\r\n~~~ts\r\nimport * as cdk from \"aws-cdk-lib\";\r\nimport { Construct } from \"constructs\";\r\nimport { UserPool } from \"aws-cdk-lib/aws-cognito\";\r\nimport { AuthApi } from './auth-api'\r\nimport {AppApi } from './app-api'\r\nexport class AuthAppStack extends cdk.Stack {\r\n\r\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\r\n    super(scope, id, props);\r\n\r\n    const userPool = new UserPool(this, \"UserPool\", {\r\n      signInAliases: { username: true, email: true },\r\n      selfSignUpEnabled: true,\r\n      removalPolicy: cdk.RemovalPolicy.DESTROY,\r\n    });\r\n\r\n    const userPoolId = userPool.userPoolId;\r\n\r\n    const appClient = userPool.addClient(\"AppClient\", {\r\n      authFlows: { userPassword: true },\r\n    });\r\n\r\n    const userPoolClientId = appClient.userPoolClientId;\r\n\r\n    new AuthApi(this, 'AuthServiceApi', {\r\n      userPoolId: userPoolId,\r\n      userPoolClientId: userPoolClientId,\r\n    });\r\n\r\n    new AppApi(this, 'AppApi', {\r\n      userPoolId: userPoolId,\r\n      userPoolClientId: userPoolClientId,\r\n    } );\r\n\r\n  } \r\n\r\n}\r\n~~~\r\nThe Stack class above creates the Cognito user pool and a client for the pool - these are framework L2 constructs. It then instantiates instances of our custom L2 constructs, effectively delegating the creation of all the other stack resources to our constructs.\r\n\r\nDeploy our refactored app:\r\n~~~bash\r\n$ cdk deploy\r\n~~~\r\n\r\nRetest the full set of endpoints - signup, confirm signup, signin, protected functionality. It should all work as before.\r\n\r\nCommit this work:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Refactored stack into custom constructs.\"\r\n~~~\r\n[construct]: ./img/construct.png\r\n ","route":"/lab/{{COURSEURL}}/topic03/book-3/Refactor","id":"Refactor","type":"step"}]}]},{"route":"/topic/{{COURSEURL}}/topic04","type":"topic","title":" Introduction to React.\r","summary":"Component Model, TSX, Storybook, Material Design.","contentMd":"# Introduction to React.\r\n \r\nComponent Model, TSX, Storybook, Material Design. ","frontMatter":{},"id":"topic04","img":"https://{{COURSEURL}}/topic04/topic.png","imgFile":"topic.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"route":"/talk/{{COURSEURL}}/topic04/talk-1","type":"talk","title":" React Fundamentals and Storybook.\r","summary":"Examine the fundamentals of React's component model, including JSX, props, iteration and hierarchy. Introduce the Storybook development tool.","contentMd":"# React Fundamentals and Storybook.\r\n \r\nExamine the fundamentals of React's component model, including JSX, props, iteration and hierarchy. Introduce the Storybook development tool.","frontMatter":{},"id":"talk-1","img":"https://{{COURSEURL}}/topic04/talk-1/React.png","imgFile":"React.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"pdf":"https://{{COURSEURL}}/topic04/talk-1/React.pdf","pdfFile":"React.pdf"},{"route":"/talk/{{COURSEURL}}/topic04/talk-2","type":"talk","title":" Material UI.\r","summary":"An overview of the Material Design system and the related Material UI library.","contentMd":"# Material UI.\r\n \r\nAn overview of the Material Design system and the related Material UI library.","frontMatter":{},"id":"talk-2","img":"https://{{COURSEURL}}/topic04/talk-2/MaterialUI.png","imgFile":"MaterialUI.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"pdf":"https://{{COURSEURL}}/topic04/talk-2/MaterialUI.pdf","pdfFile":"MaterialUI.pdf"},{"route":"/lab/{{COURSEURL}}/topic04/book-1","type":"lab","title":"Lab-React_Basics","summary":"This lab guides you through the basic concepts of ReactJS. You will complete a series of exercises to produce simple UI components.","contentMd":"# ReactJs Basics.\r\n\r\nThis lab guides you through the basic concepts of ReactJS. You will complete a series of exercises to produce simple UI components.","frontMatter":{},"id":"book-1","img":"https://{{COURSEURL}}/topic04/book-1/img/main.png","imgFile":"img/main.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"title":" ReactJs Basics.","shortTitle":"Lab-React_Basics","contentMd":"# ReactJs Basics.\r\n\r\nThis lab guides you through the basic concepts of ReactJS. You will complete a series of exercises to produce simple UI components.","route":"/lab/{{COURSEURL}}/topic04/book-1/Lab-React_Basics","id":"Lab-React_Basics","type":"step"},{"title":" Startup.","shortTitle":"Startup","contentMd":"## Startup.\r\n\r\nDownload and unzip [this archive][code] and import it into VS Code. Open an integrated terminal in the editor and type:\r\n~~~\r\n$ npm install\r\n~~~\r\n[This installs the JS modules needed (e.g. React and its dependencies) in a local folder called `node_modules`.]\r\n\r\nThis lab contains the following top-level folder structure:\r\n~~~\r\n     basicReactLab\r\n       |\r\n       |---.storybook\r\n       |---components\r\n       |     |\r\n       |     |---exercises\r\n       |     |---samples\r\n       |\r\n       |---node_modules\r\n       |---stories\r\n       |---types\r\n       |     |\r\n       |     |---samples\r\n       package.json\r\n~~~\r\nYour primary focus will be on the two sub-folders of `components`. The `components/samples` folder contains the sample components discussed in the lectures. The `components/exercises` folder has skeleton implementations of the components you will develop during this lab. In the terminal, type:\r\n~~~\r\n$ npm run storybook\r\n~~~\r\nThis command is shorthand for:\r\n>$ npx storybook dev -p 6006\r\n\r\nThe command runs the binary executable `./node_modules/.bin/start-storybook`. This executable transpiles all ts and tsx code, starts the storybook web server on port 6006, opens a web browser tab and navigates to http://localhost:6006 :\r\n\r\n![image-20240225225944507](./img/image-20240225225944507.png) \r\n\r\n### The sample components.\r\n\r\nEach file in the `components/samples` folder contains a component implementation. The file names are prefixed with a sequence number (01_, 02_ etc.) to help relate them to the text names appearing in the Storybook UI's side panel. For example, the component definition in `components/samples/03_props.tsx` is associated with  'Samples -> 03 - component with props' in the Storybook UI\r\n\r\n![image-20240225230022234](./img/image-20240225230022234.png) \r\n\r\nIt is conventional for a component file name to match the component name it exports. This practice is not applied here only for convenience.\r\n\r\nThe Storybook server provides live reloading or hot module replacement (HMR) - no need to refresh the browser after a code changes manually. For example, in the browser, click the `01 - static component` sample. Open the file `components/samples/01_staticComponent.tsx` and change the list of languages to the following:\r\n~~~\r\n<ul>\r\n<li>Erlang</li>\r\n<li>Clojure</li>\r\n</ul>  \r\n~~~\r\nSave the change and return to the browser - the changed module is replaced in the browser automatically,\r\n\r\n### The exercises components.\r\n\r\nClick on any of the exercise components in the Storybook UI side panel - they are incomplete.\r\n\r\n![image-20240225230055507](./img/image-20240225230055507.png) \r\n\r\n[code]: ./archives/archive-2.zip\r\n[storybook]: ./img/storybook.png\r\n[numbers]: ./img/numbers.png\r\n[exercises]: ./img/exercises.png\r\n\r\n","route":"/lab/{{COURSEURL}}/topic04/book-1/Startup","id":"Startup","type":"step"},{"title":" Exercise 1 (Static Component).","shortTitle":"01","contentMd":"## Exercise 1 (Static Component).\r\n\r\n[Start the Storybook server if it is not already running.]\r\n\r\nSuppose we want a static React component that renders a view similar to that illustrated below: \r\n\r\n![][exercise1]\r\n\r\n(Substitute your course title and module names, if necessary. For now, assume exactly two modules in the table body.]\r\n\r\nThe following raw HTML table syntax is a guide for generating the modules list in the above screenshot:\r\n~~~\r\n<table className=\"table table-bordered\">\r\n  <thead>\r\n    <tr>\r\n      <th>Name</th>\r\n      <th>No lectures</th>\r\n      <th>No practicals</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody >\r\n    <tr>\r\n      <td>DevOps</td>\r\n      <td>2</td>\r\n      <td>2</td>\r\n    </tr>\r\n    <tr>\r\n      <td>Enterprise Web Dev</td>\r\n      <td>3</td>\r\n      <td>2</td>\r\n    </tr>\r\n  </tbody >\r\n</table>\r\n~~~\r\n\r\n__You are required__ to implement the new component. For convenience, a story is  provided - see `src/stories/exercises/01-component.stories.ts`.\r\n\r\nThe steps to completing this exercise are:\r\n\r\n+ __Step 1__: In the Storybook UI in the browser, click the link: 'Samples -> 01 - static component'. Examine this story's related component code in `components/samples/01_staticComponent.tsx`.\r\n+ __Step 2__: In the Storybook UI, click the link: 'Exercises -> 01 - static component' and open the related component file:  `components/exercises/01_staticComponent.tsx`. Change the component return statement to generate the output shown earlier. \r\n\r\n[If necessary, consult the 'Exercise 1 solution' in the last section of this lab.]\r\n\r\nOn completion, stop the Storybook server and update the local Git repo:\r\n~~~\r\n$ git add -A\r\n$ git commit -m \"Exercise 1 completed\"\r\n~~~\r\nRestart the Storybook server:\r\n~~~\r\n$ npm run storybook\r\n~~~\r\n[exercise1]: ./img/exercise1.png\r\n","route":"/lab/{{COURSEURL}}/topic04/book-1/01","id":"01","type":"step"},{"title":" Exercise 2 (Embedded variables).","shortTitle":"02","contentMd":"## Exercise 2 (Embedded variables).\r\n\r\nIn exercise 1 the course data was hard-coded in the JSX - course name, module details. A slight improvement would be to place the data in local variables and reference them from the JSX code. __You are required__ to implement this improvement.\r\n\r\nFor convenience, we will implement the component in a separate file = `components/exercises/02_embeddedVars.tsx`. The story for this exercise is already provided - see `src/stories/exercises/02-component.stories.ts`.\r\n\r\nThe steps to complete this exercise are as follows:\r\n\r\n+ __Step 1__: In the Storybook UI in the browser, click the link: 'Samples -> 02 - JSX embedded variables'. Examine the related component code in `components/samples/02_embeddedVariables.tsx`.\r\n+ __Step 2__: Copy the code from `components/exercises/01_staticComponent.tsx` to  `components/exercises/02_embeddedVars.tsx`.\r\n+ __Step 3__: Modify the copied code to use embedded variables for its data, e.g. a two-element array for the modules. See the hint below.\r\n+ __Step 4__: In the browser, click the link: 'Exercises -> 02 - JSX embedded variables' to see the result of your implementation. \r\n\r\nHint: The TSX excerpt below is a guide to the solution required:\r\n~~~ \r\n  . . . . . . \r\n<tr>\r\n  <td>{modules[1].name}</td>\r\n  <td>{modules[1].noLectures}</td>\r\n  <td>{modules[1].noPracticals}</td>\r\n</tr>\r\n  . . . . . . . \r\n~~~\r\n\r\n[If necessary, see 'Exercise 2 solution' in the last section of the lab.]\r\n\r\nOn completing the exercise, stop the server and type these commands in the terminal:\r\n~~~\r\n$ git add -A\r\n$ git commit -m \"Exercise 2 completed\"\r\n~~~\r\nRestart the server.\r\n","route":"/lab/{{COURSEURL}}/topic04/book-1/02","id":"02","type":"step"},{"title":" Exercise 3 (Props).","shortTitle":"03","contentMd":"## Exercise 3 (Props).\r\n\r\nA further design improvement to our component is to make it __reusable__ by passing the data in as __props__.\r\n\r\nThe story for this exercise is implemented in `stories/exercises/03-component..stories.ts`.\r\n\r\nImplement your solution in `components/exercises/03_props.tsx`. Use the code from exercise 2 as the starting point and reference `components/samples/03_props.tsx` as a guide to the changes required. Note your component must use the same prop names as the story, i.e. course and modules.\r\n\r\nClick 'Exercises -> 03 component with props' in the Storybook UI to see your solution render.\r\n\r\nOn completing the exercise, stop the server and type these commands in the terminal:\r\n~~~\r\n$ git add -A\r\n$ git commit -m \"Exercise 3 completed.\"\r\n~~~\r\nRestart the Storybook server.\r\n\r\n","route":"/lab/{{COURSEURL}}/topic04/book-1/03","id":"03","type":"step"},{"title":" Exercise 4 (Iteration).","shortTitle":"04","contentMd":"## Exercise 4 (Iteration).\r\n\r\nIn the previous exercise, the component was hard-coded to expect a module array prop of exactly two elements. It should be flexible enough to handle any array size. __You are required__ to implement a solution to address this requirement and place it in `components/exercises/04_iteration.tsx`. Use `components/samples/04_iteration.tsx` as a guide.\r\n\r\nThe story for this exercise is implemented in `stories/exercises/04-component.stories.ts`.\r\n\r\nThe Storybook UI renders your solution on clicking 'Exercises -> 04 - iteration'. The  output should resemble the following:\r\n\r\n![][exercise4] \r\n\r\nOn completing the exercise, update the local repository:\r\n~~~\r\n$ git add -A\r\n$ git commit -m \"Exercise 4 completed.\"\r\n~~~\r\nThat completes the lab.\r\n\r\n[exercise4]: ./img/exercise4.png\r\n\r\n","route":"/lab/{{COURSEURL}}/topic04/book-1/04","id":"04","type":"step"},{"title":" Solutions","shortTitle":"Solutions","contentMd":"## Solutions\r\n\r\n### Exercise 1 (Static Component) solution.\r\n\r\n~~~react\r\nimport React from \"react\";\r\nimport \"../../../node_modules/bootstrap/dist/css/bootstrap.css\";\r\n\r\nconst Demo: React.FC = () => {\r\n    return (\r\n        <div>\r\n        <h1>MSc Enterprise Software Systems - Modules Timetable</h1>\r\n        <table className=\"table table-bordered\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>No lectures</th>\r\n                    <th>No practicals</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody >\r\n                <tr>\r\n                    <td>DevOps</td>\r\n                    <td>2</td>\r\n                    <td>2</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Enterprise Web Dev</td>\r\n                    <td>3</td>\r\n                    <td>2</td>\r\n                </tr>\r\n            </tbody >\r\n        </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Demo;\r\n~~~\r\n\r\n### Exercise 2 (Embedded variables) solution.\r\n\r\n~~~react\r\n\r\nimport React from \"react\";\r\nimport \"../../../node_modules/bootstrap/dist/css/bootstrap.css\";\r\n\r\ninterface Module {\r\n  name: string;\r\n  noLectures: number;\r\n  noPracticals: number;\r\n}\r\n\r\nconst modules: Module[] = [\r\n  { name: 'DevOps', noLectures: 2, noPracticals: 2 },\r\n  { name: 'Enterprise Web Dev', noLectures: 3, noPracticals: 2 },\r\n];\r\n\r\nconst header: string = 'MSc Enterprise Software Systems - Modules Timetable';\r\n\r\nconst Demo: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <h1>{header}</h1>\r\n      <table className=\"table table-bordered\">\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>No lectures</th>\r\n            <th>No practicals</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {modules.map((module, index) => (\r\n            <tr key={index}>\r\n              <td>{module.name}</td>\r\n              <td>{module.noLectures}</td>\r\n              <td>{module.noPracticals}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\nexport default Demo;\r\n\r\n\r\n~~~\r\n\r\n\r\n\r\n### Exercise 3 Props(note:  see ``interfaces.d.ts``  below. Make sure it's in correct location)\r\n\r\n~~~react\r\nimport React from \"react\";\r\nimport \"../../../node_modules/bootstrap/dist/css/bootstrap.css\";\r\nimport { programmeModules } from \"../../types/interfaces\"\r\n\r\nconst Demo: React.FC<programmeModules> = (props) => {\r\n\r\n  return (\r\n    <div>\r\n      <h1>{props.course}</h1>\r\n      <table className=\"table table-bordered\">\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>No lectures</th>\r\n            <th>No practicals</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody >\r\n        <tr>\r\n            <td>{props.modules[0].name}</td>\r\n            <td>{props.modules[0].noLectures}</td>\r\n            <td>{props.modules[0].noPracticals}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>{props.modules[1].name}</td>\r\n            <td>{props.modules[1].noLectures}</td>\r\n            <td>{props.modules[1].noPracticals}</td>\r\n          </tr>\r\n        </tbody >\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Demo;\r\n~~~\r\n\r\n\r\n\r\n### Exercise 4 outline solution (Iteration).\r\n\r\n~~~react\r\nimport React from \"react\";\r\nimport \"../../../node_modules/bootstrap/dist/css/bootstrap.css\";\r\nimport { programmeModules } from \"../../interfaces\"\r\n\r\nconst Demo: React.FC<programmeModules> = (props) => {\r\n\r\n  const list = props.modules.map((module, index) => (\r\n    <tr key={index}>\r\n      <td>{module.name}</td>\r\n      <td>{module.noLectures}</td>\r\n      <td>{module.noPracticals}</td>\r\n    </tr>\r\n  ));\r\n\r\n  return (\r\n    <div>\r\n      <h1>{props.course}</h1>\r\n      <table className=\"table table-bordered\">\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>No lectures</th>\r\n            <th>No practicals</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody >\r\n          {list}\r\n        </tbody >\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Demo;\r\n~~~\r\n\r\ninterfaces.d.ts:\r\n~~~typescript\r\ninterface module { name: string, noLectures: number, noPracticals: number };\r\nexport interface programmeModules {course:string, modules: module[]}\r\n~~~\r\n\r\n","route":"/lab/{{COURSEURL}}/topic04/book-1/Solutions","id":"Solutions","type":"step"}]},{"route":"/lab/{{COURSEURL}}/topic04/book-2","type":"lab","title":"Lab-Vite_tool","summary":"This lab introduces the Vite tool. While Storybook is a tool for developing individual components, Vite is for developing a complete application (app).","contentMd":"# Vite tool.\r\n\r\nThis lab introduces the Vite tool. While Storybook is a tool for developing individual components, Vite is for developing a complete application (app).","frontMatter":{},"id":"book-2","img":"https://{{COURSEURL}}/topic04/book-2/img/main.png","imgFile":"img/main.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"title":" Vite tool.","shortTitle":"Lab-Vite_tool","contentMd":"# Vite tool.\r\n\r\nThis lab introduces the Vite tool. While Storybook is a tool for developing individual components, Vite is for developing a complete application (app).","route":"/lab/{{COURSEURL}}/topic04/book-2/Lab-Vite_tool","id":"Lab-Vite_tool","type":"step"},{"title":" Startup.","shortTitle":"Startup","contentMd":"## Startup.\r\n\r\nWe will use the 'course modules' context again in this lab for convenience. \r\n\r\nCreate a new empty folder (away from `basicReactLab`). Open an ordinary operating system terminal/shell window, go to the new folder and type the commands:\r\n~~~\r\n$  npm create vite@latest\r\n~~~\r\nVite asks a series of questions about the app you want to create. Use the screenshot below to guide you through the answers.\r\n\r\n![image-20240122224218181](./img/image-20240122224218181.png)\r\n\r\nVite will **scaffold** a React project located in a new folder called `course-app` with content similar to that illustrated below:\r\n\r\n![image-20240122224402465](./img/image-20240122224402465.png)\r\n\r\nFiles with the `.tsx` extension are React component files. \r\n\r\nDrag-n-drop the `course-app` folder into VS Code. Open an integrated terminal and install the dependencies:\r\n~~~\r\n$ npm install\r\n~~~\r\n\r\n\r\n\r\nThe default app is runnable from the outset. Before proving this, we will change the configuration so that the development server uses port 3000. Replace the content of `vite.config.ts` with the following:\r\n\r\n~~~\r\nimport { defineConfig } from 'vite'\r\nimport react from '@vitejs/plugin-react'\r\n\r\n// https://vitejs.dev/config/\r\nexport default defineConfig({\r\n  plugins: [react()],\r\n  server: {\r\n    port: 3000\r\n  }\r\n})\r\n~~~\r\nType the following command in the integrated terminal:\r\n~~~\r\n$ npm run dev\r\n~~~\r\nThis command performs the following task sequence:\r\n\r\n- All the third-party modules are merged into one unit or bundle.\r\n- The TSX files are transpiled into plain JS.\r\n- The development server is started and listens on port 3000.\r\n\r\nOpen a new tab in the browser and navigate to http://localhost:3000/. The server responds with index.html, the individual compiled source code modules and the bundle containing the third-party modules.\r\n\r\n![image-20240122225702204](./img/image-20240122225702204.png)\r\n\r\nStop the development server and create a local Git repository:\r\n~~~\r\n$ git init\r\n$ git add -A\r\n% git commit -m \"Initial structure.\"\r\n~~~\r\n\r\n-----------------------------\r\n\r\nWe will mould this skeleton app into our simple custom app. The desired user interface we want to achieve is similar to the following (Substitute the course name and module names accordingly):\r\n\r\n![][obj]\r\n\r\nThe app's component hierarchy design will be as follows:\r\n~~~\r\n       App (default)\r\n        |\r\n        |\r\n        V\r\n      Programme\r\n        |\r\n        |  \r\n        V\r\n      Module\r\n~~~\r\nThe App component renders a child called Course. Course renders many instances of a Module component. \r\n\r\n[vitestart]: ./img/vitestart.png\r\n[scaffold]: ./img/scaffold.png\r\n[obj]: ./img/obj.png\r\n[default]: ./img/default.png\r\n","route":"/lab/{{COURSEURL}}/topic04/book-2/Startup","id":"Startup","type":"step"},{"title":" The Components.","shortTitle":"01","contentMd":"## The Components.\r\n\r\nCreate a sub-folder of `src` called `types`. Create a new file, `src/types/interfaces.d.ts` and paste in the following code:\r\n\r\n~~~typescript\r\nexport interface moduleProps { name: string, noLectures: number, noPracticals: number };\r\nexport interface programmeProps { title: string, modules: moduleProps[] }\r\n~~~\r\n\r\nCreate a sub-folder of `src` called `components`. Create a new file, `src/components/module.tsx` and paste in the following code:\r\n\r\n~~~react\r\nimport React from \"react\"\r\nimport {moduleProps} from \"../types/interfaces\"\r\n\r\nconst Module: React.FC<moduleProps> = (module) => {\r\n\r\n    return (\r\n        <tr>\r\n        <td>{module.name}</td>\r\n        <td>{module.noLectures}</td>\r\n        <td>{module.noPracticals}</td>\r\n      </tr>\r\n    );\r\n  };\r\n  \r\n  export default Module;\r\n\r\n~~~\r\nCreate a second file, `src/components/programme.tsx` , paste in the following:\r\n~~~react\r\nimport React from \"react\"\r\nimport Module from \"./module\"\r\nimport {programmeProps} from \"../types/interfaces\"\r\n\r\nconst Programme: React.FC<programmeProps> = (props) => {\r\nconst list = props.modules.map((module, index) => (\r\n    <Module key={index} {...module} />\r\n))\r\n  return (\r\n    <>\r\n      <h2>{`${props.title} modules table`} </h2>\r\n      <table className=\"table table-bordered\">\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>No lectures</th>\r\n            <th>No practicals</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{list}</tbody>\r\n      </table>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Programme;\r\n~~~\r\nDownload [this SETU logo image][wit] and place it in the `src/assets` folder.\r\n\r\nIn VS Code's integrated terminal window, commit the work done so far (CRA created the local Git repository automatically):\r\n~~~\r\n$ git add -A\r\n$ git commit -m \"Components completed.\"\r\n~~~\r\n\r\n[wit]: ./img/setu_crest.png\r\n","route":"/lab/{{COURSEURL}}/topic04/book-2/01","id":"01","type":"step"},{"title":" Assemble the App components.","shortTitle":"02","contentMd":"## Assemble the App components.\r\n\r\nIn `src/App.tsx`, replace the entire content with the following:\r\n~~~react\r\nimport Programme from './components/programme'\r\nimport setuCrest from \"./assets/setu_crest.png\";\r\nimport './App.css'\r\n\r\nconst App = () => {\r\n  // Substitute your module names here.\r\n  const modules = [\r\n    {\r\n      name: \"Cloud Architecture\",\r\n      noLectures: 1,\r\n      noPracticals: 2,\r\n    },\r\n    {\r\n      name: \"Programming\",\r\n      noLectures: 2,\r\n      noPracticals: 3,\r\n    },\r\n    {\r\n      name: \"Enterprise Web Dev\",\r\n      noLectures: 2,\r\n      noPracticals: 2,\r\n    },\r\n    {\r\n      name: \"Mobile App Development\",\r\n      noLectures: 2,\r\n      noPracticals: 2,\r\n    },\r\n    {\r\n      name: \"Agile Software Development\",\r\n      noLectures: 2,\r\n      noPracticals: 3,\r\n    },\r\n  ];\r\n  const name = \"MSc Enterprise Software Systems\"; // Substitute\r\n\r\n\r\n  return (\r\n    <>\r\n      <header className=\"App-header\">\r\n        <img className=\"center\" src={setuCrest} alt=\"logo\" />\r\n      </header>\r\n      <div className=\"programme\">\r\n        <Programme title={name} modules={modules} />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n~~~\r\nReplace the content of `src/App.css` with the following:\r\n~~~css\r\n.App-header {\r\n  background-color: lightblue;\r\n  height: 200px;\r\n  padding: 10px;\r\n  color: white;\r\n}\r\n\r\n.programme {\r\n  padding: 10px;\r\n}\r\n~~~\r\nAssuming the server is still running (start it with 'npm run dev'), the browser should now render the desired result, except for some styling issues (see next section). You should now review all the above code developed so far to ensure you understand how the app produced it's UI.\r\n\r\nFrom the integrated terminal prompt, commit this work:\r\n~~~\r\n$ git add -A\r\n$ git commit -m \"App assembled\"\r\n~~~","route":"/lab/{{COURSEURL}}/topic04/book-2/02","id":"02","type":"step"},{"title":" The Bootstrap CSS library.","shortTitle":"03","contentMd":"## The Bootstrap CSS library.\r\n\r\nThe current styling problem in our app is due to the omission of the Bootstrap CSS file. Stop the server and install it from the integrated terminal as follows:\r\n~~~\r\n$ npm install --save  bootstrap@4.4.1\r\n$ npm run dev\r\n~~~\r\nThe traditional approach (which we won't use) to referencing CSS is by adding a link tag to `index.html`, e.g.\r\n~~~\r\n<link href=\"... path to CSS file ...\" rel=\"stylesheet\">\r\n~~~\r\nA newer and more developer-friendly approach is to reference it directly from the JS code. Add an import to `src/main.tsx`:\r\n\r\n~~~\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.css'\r\n~~~\r\nand remove the line:\r\n~~~\r\nimport './index.css'\r\n~~~\r\n\r\nThe app should now be rendering as planned. \r\n\r\nCommit this work:\r\n~~~\r\n$ git add -A\r\n$ git commit -m \"Styled with Bootstrap.\"\r\n~~~","route":"/lab/{{COURSEURL}}/topic04/book-2/03","id":"03","type":"step"},{"title":" Hot Module Replacement (HMR).","shortTitle":"04","contentMd":"## Hot Module Replacement (HMR).\r\n\r\nWhen a source code file/module is edited, Vite re-transpiles it and sends it down to the browser to replace the old version, i.e. Hot module replacement. HMR allows the developer to see the effect of the change immediately. As a simple example, in `src/App.tsx`, replace the line:\r\n~~~\r\n  const name = \"MSc Enterprise Software Systems\";\r\n~~~\r\nwith:\r\n~~~\r\n  const name = \"Masters in Enterprise Software Systems\";\r\n~~~\r\nSave the change and switch to the browser to see the changed UI.\r\n\r\nThe instant feedback of HMR also aids debugging. In `components/programme.tsx` change the line:\r\n~~~\r\n  const list = props.modules.map((module, index) => (\r\n\r\n~~~\r\nwith:\r\n~~~\r\n  const list = props.allmodules.map((module, index) => (\r\n~~~\r\nThe replaced module in the browser causes an error, which we discover immediately:\r\n\r\n![][error]\r\n\r\nUndo the change to fix the error.\r\n\r\n[error]: ./img/error.png\r\n[error2]: ./img/error2.png\r\n","route":"/lab/{{COURSEURL}}/topic04/book-2/04","id":"04","type":"step"},{"title":" Building a production app.","shortTitle":"05","contentMd":"## Building a production app.\r\n\r\nThe app is now complete, but the development server environment is not suitable for a public-facing or production app. Transpilation should not be happening dynamically and all file sizes should be **minified**, thus improving load-time performance. To build a production-ready app, stop the development server and type the command:\r\n~~~\r\n$ npm run build\r\n~~~\r\nThis command creates a `dist` folder to house the production-quality, static form of the app:\r\n\r\n![][build]\r\n\r\nThe name of the minified bundle file containing your React code is a computed hash value of its content, e.g. `index.5e85u2365.js`. This naming style aids the browser's caching operations. In `dist/index.html` the script tag references the bundle.\r\n\r\n\r\nTo use the production version of the app, type the command:\r\n\r\n~~~\r\n$ npm run preview\r\n~~~\r\nThis starts a standard web server that hosts the 'dist` folder. Open a browser at the web address given in the terminal window, e.g. http://localhost:4173/\r\n\r\n![][window]\r\n\r\n\r\nNotice in the project's `.gitignore` file (generated by Vite), the `/dist` folder is included - we never commit generated files/folders to a repository. Performing a git commit anytime in the future will exclude the dist files from the repository.\r\n\r\n\r\n\r\n[build]: ./img/build.png\r\n[window]: ./img/window.png\r\n","route":"/lab/{{COURSEURL}}/topic04/book-2/05","id":"05","type":"step"},{"title":" Material UI.","shortTitle":"07","contentMd":"## Material UI.\r\n\r\nWhile Bootstrap is a popular CSS library, it does not allow us to implement styling consistent with the component model of React. The Material UI framework (see [here](https://material-ui.com/)) is a much better fit.\r\n\r\nAdd the library to your project:\r\n~~~\r\n$ npm install @emotion/react@11.10.5 @emotion/styled@11.6 \r\n$ npm install @mui/material@5.11.4\r\n~~~\r\n\r\nWe will refactor our app to use the new library; however, we will perform the refactoring in new files for comparison.\r\n\r\nCreate the file `src/AppMUI.tsx` and add this code:\r\n~~~react\r\nimport Programme from './components/programme'\r\nimport setuCrest from \"./assets/setu_crest.png\";\r\nimport Box from \"@mui/material/Box\";\r\n\r\nconst styles = {\r\n  appHeader: {\r\n    backgroundColor: \"lightblue\",\r\n    height: \"200px\",\r\n    padding: \"10px\",\r\n    color: \"white\",\r\n  },\r\n  course: {\r\n    padding: \"10px\",\r\n  },\r\n};\r\n\r\nconst App = () => {\r\n  const modules = [\r\n    {\r\n      name: \"Cloud Architecture\",\r\n      noLectures: 1,\r\n      noPracticals: 2,\r\n    },\r\n    {\r\n      name: \"Programming\",\r\n      noLectures: 2,\r\n      noPracticals: 3,\r\n    },\r\n    {\r\n      name: \"Enterprise Web Dev\",\r\n      noLectures: 2,\r\n      noPracticals: 2,\r\n    },\r\n    {\r\n      name: \"Mobile App Development\",\r\n      noLectures: 2,\r\n      noPracticals: 2,\r\n    },\r\n    {\r\n      name: \"Agile Software Development\",\r\n      noLectures: 2,\r\n      noPracticals: 3,\r\n    },\r\n  ];\r\nconst name = \"MSc Enterprise Software Systems\"; // Substitute\r\n\r\n  return (\r\n    <>\r\n      <header style={styles.appHeader}>\r\n        <img src={setuCrest} alt=\"logo\" />\r\n      </header>\r\n      <Box sx={styles.course}>\r\n        <Programme title={name} modules={modules} />\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\nexport default App;\r\n~~~\r\nSome points to note in the above code:\r\n\r\n+ We use the CSS-in-JS approach to declaring our custom CSS.\r\n+ `App.css` is redundant in the above code.\r\n+ The Box component is a generic wrapper provided by Material UI.\r\n\r\nIn `src/main.tsx`, replace the line:\r\n~~~\r\nimport App from './App.tsx';\r\n~~~\r\nwith:\r\n~~~\r\nimport App from './AppMUI.tsx';\r\n~~~\r\nRestart the development server. The app should render just as before in the browser. However, we are still using the original Course and Module components. Create the file `src/components/programmeMUI.tsx` and paste in this code:\r\n~~~react\r\nimport React from \"react\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nconst styles = {\r\n  root: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-around\",\r\n    padding: 1.5,\r\n  },\r\n};\r\nexport default function Course(props) {\r\n\r\n  return (\r\n    <>\r\n      <Typography sx={styles.root} variant=\"h4\" component=\"h1\">\r\n        {`${props.title} modules table`}\r\n      </Typography>\r\n      <TableContainer component={\"div\"}>\r\n        <Table aria-label=\"modules table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Name</TableCell>\r\n              <TableCell>No. of Lectures</TableCell>\r\n              <TableCell>No. of Practicals</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {props.modules.map((m, index) => (\r\n              <TableRow key={index}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {m.name}\r\n                </TableCell>\r\n                <TableCell>{m.noLectures}</TableCell>\r\n                <TableCell>{m.noPracticals}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n}\r\n~~~\r\nPoints to note in the above code:\r\n\r\n+ We use the Typography component to include text in the UI. It helps achieve a consistent theme in the font family, spacing, padding, etc. The variant prop applies the typography styles to the text (see [here](https://material-ui.com/components/typography/#component)). The component prop declares the DOM element to use for the text block.\r\n+ Some custom styling is added to the Typography for illustration purposes. It simply centres the heading. \r\n+ The best example of Material Ui's component model so far is implementing the table above. \r\n+ For convenience, we are not defining a new Module component. The modules' details are generated inside the table code using the map method.\r\n\r\nIn `src/AppMUI.tsx`, replace the line:\r\n~~~\r\nimport Programme from './components/programme';\r\n~~~\r\nwith:\r\n~~~\r\nimport Programme from './components/programmeMUI';\r\n~~~\r\n\r\nThe app should now be rendering similar to before.\r\n\r\nCommit this work:\r\n~~~\r\n$ git add -A\r\n$ git commit -m \"Demo Material UI.\"\r\n~~~","route":"/lab/{{COURSEURL}}/topic04/book-2/07","id":"07","type":"step"}]},{"route":"/lab/{{COURSEURL}}/topic04/book-3","type":"lab","title":"Startup","summary":"## UI Description Samples\r","contentMd":"\r\n## UI Description Samples\r\n\r\nFrom Lecture \r\n\r\nDownload and unzip [this archive][code]\r\n\r\n[code]: ./archives/archive.zip","frontMatter":{},"id":"book-3","img":"https://{{COURSEURL}}/topic04/book-3/img/main.jpg","imgFile":"img/main.jpg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"title":"","shortTitle":"Startup","contentMd":"\r\n## UI Description Samples\r\n\r\nFrom Lecture \r\n\r\nDownload and unzip [this archive][code]\r\n\r\n[code]: ./archives/archive.zip","route":"/lab/{{COURSEURL}}/topic04/book-3/Startup","id":"Startup","type":"step"}]}]},{"route":"/topic/{{COURSEURL}}/topic05","type":"topic","title":"  React: The Component model.\r","summary":"Examine the core aspects of the component model, including state, hooks, and unidirectional data flow.","contentMd":"#  React: The Component model.\r\n \r\nExamine the core aspects of the component model, including state, hooks, and unidirectional data flow. ","frontMatter":{},"id":"topic05","img":"https://{{COURSEURL}}/topic05/topic.jpeg","imgFile":"topic.jpeg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"route":"/talk/{{COURSEURL}}/topic05/talk-1","type":"talk","title":" React Component model.\r","summary":"A look at React's data flow patterns and lifecycle hooks.","contentMd":"# React Component model.\r\n \r\nA look at React's data flow patterns and lifecycle hooks.","frontMatter":{},"id":"talk-1","img":"https://{{COURSEURL}}/topic05/talk-1/Component.png","imgFile":"Component.png","video":"/video/{{COURSEURL}}/topic05/talk-1/NPSw3icL0QI","videoids":{"videoid":"NPSw3icL0QI","videoIds":[{"service":"youtube","id":"NPSw3icL0QI"}]},"hide":false,"pdf":"https://{{COURSEURL}}/topic05/talk-1/Component.pdf","pdfFile":"Component.pdf"},{"route":"/lab/{{COURSEURL}}/topic05/book-1","type":"lab","title":"Lab-Movie_App-Part1","summary":"In this lab, we commence the development of a SPA for Movie enthusiasts. The product will go through several iterations over the coming weeks, adding new functionality and refactoring existing code during that period. The app's data source will be the open web API [The Movie DataBase](tmdb).\r","contentMd":"# Developing a Movies Fan App.\r\n\r\nIn this lab, we commence the development of a SPA for Movie enthusiasts. The product will go through several iterations over the coming weeks, adding new functionality and refactoring existing code during that period. The app's data source will be the open web API [The Movie DataBase](tmdb).\r\n\r\n## App overview.\r\n\r\nThe features of the React app will include:\r\n\r\n- Display a list of current movie releases. For each one, show its poster image, title, release date and viewer rating.\r\n- Display more detailed information on a movie from the above list by clicking its 'More Info ..' button. The details include plot, genres, runtime, revenue, etc.\r\n- Show extracts from written reviews for a movie.\r\n- Show the full review text for a review.\r\n- Add movies to your favourites list.\r\n- Write a review for one of your favourites.\r\n\r\nThe views for the app will look as follows:\r\n\r\n> > Discover page - List the first 20 movies returned by the TMDB API:\r\n\r\n![][home]\r\n\r\n> > The list of movies can be filtered by genre, title, or both:\r\n\r\n![][filtering]\r\n\r\n> > The Movie Details page will look as follows:\r\n\r\n![][details]\r\n\r\n> > The Details page can optionally show extracts from all reviews written for the movie:\r\n\r\n![][extracts]\r\n\r\n> > The above review extracts are clickable to give the full review text (The Review page):\r\n\r\n![][review]\r\n\r\n> > The Favorites page - Lists the user's favourite movies, as selected from the Home page list:\r\n\r\n![][favorites]\r\n\r\n> > The User can write a review for any of their favourite movies:\r\n\r\n![][form]\r\n\r\nThe TMDB (The Movie Database) API has a rich data model. At its core is the Movie entity. A sample instance of this entity is listed below - study its structure.\r\n\r\n```\r\n{\r\n  \"adult\": false,\r\n  \"backdrop_path\": \"/5Iw7zQTHVRBOYpA0V6z0yypOPZh.jpg\",\r\n  \"belongs_to_collection\": {\r\n    \"id\": 10,\r\n    \"name\": \"Star Wars Collection\",\r\n    \"poster_path\": \"/iTQHKziZy9pAAY4hHEDCGPaOvFC.jpg\",\r\n    \"backdrop_path\": \"/d8duYyyC9J5T825Hg7grmaabfxQ.jpg\"\r\n  },\r\n  \"budget\": 200000000,\r\n  \"genres\": [\r\n    {\r\n      \"id\": 14,\r\n      \"name\": \"Fantasy\"\r\n    },\r\n    {\r\n      \"id\": 12,\r\n      \"name\": \"Adventure\"\r\n    },\r\n    {\r\n      \"id\": 878,\r\n      \"name\": \"Science Fiction\"\r\n    },\r\n    {\r\n      \"id\": 28,\r\n      \"name\": \"Action\"\r\n    }\r\n  ],\r\n  \"homepage\": \"https://www.starwars.com/films/star-wars-episode-viii-the-last-jedi\",\r\n  \"id\": 181808,\r\n  \"imdb_id\": \"tt2527336\",\r\n  \"original_language\": \"en\",\r\n  \"original_title\": \"Star Wars: The Last Jedi\",\r\n  \"overview\": \"Rey develops her newly discovered abilities with the guidance of Luke Skywalker, who is unsettled by the strength of her powers. Meanwhile, the Resistance prepares to do battle with the First Order.\",\r\n  \"popularity\": 44.208,\r\n  \"poster_path\": \"/kOVEVeg59E0wsnXmF9nrh6OmWII.jpg\",\r\n  \"production_companies\": [\r\n    {\r\n      \"id\": 1,\r\n      \"logo_path\": \"/o86DbpburjxrqAzEDhXZcyE8pDb.png\",\r\n      \"name\": \"Lucasfilm\",\r\n      \"origin_country\": \"US\"\r\n    },\r\n    {\r\n      \"id\": 11092,\r\n      \"logo_path\": null,\r\n      \"name\": \"Ram Bergman Productions\",\r\n      \"origin_country\": \"US\"\r\n    },\r\n    {\r\n      \"id\": 2,\r\n      \"logo_path\": \"/wdrCwmRnLFJhEoH8GSfymY85KHT.png\",\r\n      \"name\": \"Walt Disney Pictures\",\r\n      \"origin_country\": \"US\"\r\n    }\r\n  ],\r\n  \"production_countries\": [\r\n    {\r\n      \"iso_3166_1\": \"US\",\r\n      \"name\": \"United States of America\"\r\n    }\r\n  ],\r\n  \"release_date\": \"2017-12-13\",\r\n  \"revenue\": 1332459537,\r\n  \"runtime\": 152,\r\n  \"spoken_languages\": [\r\n    {\r\n      \"iso_639_1\": \"en\",\r\n      \"name\": \"English\"\r\n    }\r\n  ],\r\n  \"status\": \"Released\",\r\n  \"tagline\": \"Darkness rises... and light to meet it\",\r\n  \"title\": \"Star Wars: The Last Jedi\",\r\n  \"video\": false,\r\n  \"vote_average\": 7,\r\n  \"vote_count\": 9692\r\n}\r\n```\r\n\r\nLet's start building the app.\r\n\r\n[tmdb]: https://developers.themoviedb.org/3/getting-started/introduction\r\n[home]: ./img/home.png\r\n[filtering]: ./img/filtering.png\r\n[details]: ./img/details.png\r\n[extracts]: ./img/extracts.png\r\n[review]: ./img/review.png\r\n[favorites]: ./img/favorites.png\r\n[form]: ./img/form.png","frontMatter":{},"id":"book-1","img":"https://{{COURSEURL}}/topic05/book-1/img/main.jpg","imgFile":"img/main.jpg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"title":" Developing a Movies Fan App.","shortTitle":"Lab-Movie_App-Part1","contentMd":"# Developing a Movies Fan App.\r\n\r\nIn this lab, we commence the development of a SPA for Movie enthusiasts. The product will go through several iterations over the coming weeks, adding new functionality and refactoring existing code during that period. The app's data source will be the open web API [The Movie DataBase](tmdb).\r\n\r\n## App overview.\r\n\r\nThe features of the React app will include:\r\n\r\n- Display a list of current movie releases. For each one, show its poster image, title, release date and viewer rating.\r\n- Display more detailed information on a movie from the above list by clicking its 'More Info ..' button. The details include plot, genres, runtime, revenue, etc.\r\n- Show extracts from written reviews for a movie.\r\n- Show the full review text for a review.\r\n- Add movies to your favourites list.\r\n- Write a review for one of your favourites.\r\n\r\nThe views for the app will look as follows:\r\n\r\n> > Discover page - List the first 20 movies returned by the TMDB API:\r\n\r\n![][home]\r\n\r\n> > The list of movies can be filtered by genre, title, or both:\r\n\r\n![][filtering]\r\n\r\n> > The Movie Details page will look as follows:\r\n\r\n![][details]\r\n\r\n> > The Details page can optionally show extracts from all reviews written for the movie:\r\n\r\n![][extracts]\r\n\r\n> > The above review extracts are clickable to give the full review text (The Review page):\r\n\r\n![][review]\r\n\r\n> > The Favorites page - Lists the user's favourite movies, as selected from the Home page list:\r\n\r\n![][favorites]\r\n\r\n> > The User can write a review for any of their favourite movies:\r\n\r\n![][form]\r\n\r\nThe TMDB (The Movie Database) API has a rich data model. At its core is the Movie entity. A sample instance of this entity is listed below - study its structure.\r\n\r\n```\r\n{\r\n  \"adult\": false,\r\n  \"backdrop_path\": \"/5Iw7zQTHVRBOYpA0V6z0yypOPZh.jpg\",\r\n  \"belongs_to_collection\": {\r\n    \"id\": 10,\r\n    \"name\": \"Star Wars Collection\",\r\n    \"poster_path\": \"/iTQHKziZy9pAAY4hHEDCGPaOvFC.jpg\",\r\n    \"backdrop_path\": \"/d8duYyyC9J5T825Hg7grmaabfxQ.jpg\"\r\n  },\r\n  \"budget\": 200000000,\r\n  \"genres\": [\r\n    {\r\n      \"id\": 14,\r\n      \"name\": \"Fantasy\"\r\n    },\r\n    {\r\n      \"id\": 12,\r\n      \"name\": \"Adventure\"\r\n    },\r\n    {\r\n      \"id\": 878,\r\n      \"name\": \"Science Fiction\"\r\n    },\r\n    {\r\n      \"id\": 28,\r\n      \"name\": \"Action\"\r\n    }\r\n  ],\r\n  \"homepage\": \"https://www.starwars.com/films/star-wars-episode-viii-the-last-jedi\",\r\n  \"id\": 181808,\r\n  \"imdb_id\": \"tt2527336\",\r\n  \"original_language\": \"en\",\r\n  \"original_title\": \"Star Wars: The Last Jedi\",\r\n  \"overview\": \"Rey develops her newly discovered abilities with the guidance of Luke Skywalker, who is unsettled by the strength of her powers. Meanwhile, the Resistance prepares to do battle with the First Order.\",\r\n  \"popularity\": 44.208,\r\n  \"poster_path\": \"/kOVEVeg59E0wsnXmF9nrh6OmWII.jpg\",\r\n  \"production_companies\": [\r\n    {\r\n      \"id\": 1,\r\n      \"logo_path\": \"/o86DbpburjxrqAzEDhXZcyE8pDb.png\",\r\n      \"name\": \"Lucasfilm\",\r\n      \"origin_country\": \"US\"\r\n    },\r\n    {\r\n      \"id\": 11092,\r\n      \"logo_path\": null,\r\n      \"name\": \"Ram Bergman Productions\",\r\n      \"origin_country\": \"US\"\r\n    },\r\n    {\r\n      \"id\": 2,\r\n      \"logo_path\": \"/wdrCwmRnLFJhEoH8GSfymY85KHT.png\",\r\n      \"name\": \"Walt Disney Pictures\",\r\n      \"origin_country\": \"US\"\r\n    }\r\n  ],\r\n  \"production_countries\": [\r\n    {\r\n      \"iso_3166_1\": \"US\",\r\n      \"name\": \"United States of America\"\r\n    }\r\n  ],\r\n  \"release_date\": \"2017-12-13\",\r\n  \"revenue\": 1332459537,\r\n  \"runtime\": 152,\r\n  \"spoken_languages\": [\r\n    {\r\n      \"iso_639_1\": \"en\",\r\n      \"name\": \"English\"\r\n    }\r\n  ],\r\n  \"status\": \"Released\",\r\n  \"tagline\": \"Darkness rises... and light to meet it\",\r\n  \"title\": \"Star Wars: The Last Jedi\",\r\n  \"video\": false,\r\n  \"vote_average\": 7,\r\n  \"vote_count\": 9692\r\n}\r\n```\r\n\r\nLet's start building the app.\r\n\r\n[tmdb]: https://developers.themoviedb.org/3/getting-started/introduction\r\n[home]: ./img/home.png\r\n[filtering]: ./img/filtering.png\r\n[details]: ./img/details.png\r\n[extracts]: ./img/extracts.png\r\n[review]: ./img/review.png\r\n[favorites]: ./img/favorites.png\r\n[form]: ./img/form.png","route":"/lab/{{COURSEURL}}/topic05/book-1/Lab-Movie_App-Part1","id":"Lab-Movie_App-Part1","type":"step"},{"title":" Start-up.","shortTitle":"Startup","contentMd":"## Start-up.\r\n\r\nDownload [this archive][start], unzip it and import it into VS Code. Open an integrate terminal and run:\r\n\r\n```\r\n$ npm install\r\n```\r\n\r\nThe archive contained a skeleton Vite project for a React app. The `src` folder has been divided into several subfolders to reflect the different code elements of a React app based on best practices.\r\n\r\nOur Movies Fan app will communicate with The TMDB API (Note: We will use version 3 of the API). An API Key authenticates all requests to the API. Please follow these steps to acquire a personal key for development:\r\n\r\n- Signup for an account [here][signup].\r\n- Log in to your account. To get a key, follow this sequence:\r\n\r\n>>Settings > API > Create > Click on Request an API > Click \"Developer\" > Fill in form details (use localhost:300 for the URL and an arbitrary description)\r\n\r\n![][apikey]\r\n\r\nIn VS Code, in the project base folder, create a new file called `.env` with the following content:\r\n\r\n```\r\nVITE_TMDB_KEY=.... your API key value ...\r\n```\r\n\r\nLater we will use this environment variable in HTTP calls to the API.\r\n\r\nIt is imperative to keep your API key private. For example, never include it in a project pushed up to GitHub. Notice, in `.gitignore`, it is listed in `.env` to safeguard against this.\r\n\r\n---\r\n\r\n## GitHub repository.\r\nCreate a repo in your GitHub account called 'labMoviesApp' and add it as a remote repo for the movies app project on your local computer. Type the following commands in the VS Code integrated terminal:\r\n~~~\r\n$ git remote add origin https://github.com/..your username.../labMoviesApp.git\r\n~~~\r\n\r\nNow, log in to [Moodle][moodle] and navigate to the Assessment section of this module. Click the 'Submit Lab Repo' link and upload a simple text file (reactLab.txt) that contains the URL of the GitHub repository you created. **Note that labs are NOT part of the module's assessment, but we require evidence of time spent on the labs.**\r\n\r\n## The Development process.\r\n\r\n_Thinking in React_ is a development process recommended by the React design team (discussed in the lectures). This lab is focused on the first step of this process, titled `Build a static version` of the app. In subsequent labs, we will add user interaction and routing.\r\n\r\n---------------------------------------\r\n\r\n\r\n\r\n\r\n[start]: ./archives/startercode-ts.zip\r\n[signup]: https://www.themoviedb.org/account/signup\r\n[tmdb]: https://developers.themoviedb.org/3/getting-started/introduction\r\n[apikey]: ./img/apikey.png\r\n[moodle]: https://moodle.wit.ie/course/view.php?id=200387&section=1","route":"/lab/{{COURSEURL}}/topic05/book-1/Startup","id":"Startup","type":"step"},{"title":" Developing the Home Page components.","shortTitle":"HomePage_Components","contentMd":"## Developing the Home Page components.\r\n\r\nThe image below shows a possible component breakdown of the app's Home page:\r\n\r\n![][homecomponents]\r\n\r\n[ NOTE: We will ignore the navigation bar at the top for now.]\r\n\r\nThe components suggested from this breakdown are:\r\n\r\n1. Movie Card.\r\n1. Movie List.\r\n1. Movie List Header.\r\n1. Filtering movies card.\r\n\r\n[The Filtering movies card component will display as a side sheet when the user clicks the Filtering button. This dynamic behaviour is covered in a later lab.\r\n\r\n![][filtersheet]\r\n]\r\nWe will use Storybook to help with the development of these components. \r\n\r\n### The Base Movie Type\r\n\r\nWe will need to define some types for the Movie data we will be using in our React app. In VS Code, in the `src` folder, add a folder called ``types``. Create a file in this folder called  `interfaces.d.ts`  with the following content:\r\n\r\n~~~tsx\r\nexport interface BaseMovie {\r\n    title: string;\r\n    budget: number;\r\n    homepage: string | undefined;\r\n    id: number;\r\n    imdb_id: string;\r\n    original_language: string;\r\n    overview: string;\r\n    release_date: string;\r\n    vote_average: number;\r\n    popularity: number;\r\n    poster_path?: string;\r\n    tagline: string;\r\n    runtime: number;\r\n    revenue: number;\r\n    vote_count: number;\r\n    favourite?: boolean;\r\n  }\r\n~~~\r\n\r\n\r\n\r\n### The MovieCard component.\r\n\r\nIn VS Code, create the folder `src/components/movieCard` and add the file `index.tsx`:\r\n\r\n~~~tsx\r\nimport React from \"react\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardActions from \"@mui/material/CardActions\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport CardHeader from \"@mui/material/CardHeader\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\nimport CalendarIcon from \"@mui/icons-material/CalendarTodayTwoTone\";\r\nimport StarRateIcon from \"@mui/icons-material/StarRate\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport img from '../../images/film-poster-placeholder.png';\r\nimport { BaseMovie } from \"../../types/interfaces\"; \r\n\r\nconst styles = {\r\n  card: { maxWidth: 345 },\r\n  media: { height: 500 },\r\n  avatar: {\r\n    backgroundColor: \"rgb(255, 0, 0)\",\r\n  },\r\n};\r\n\r\nconst MovieCard: React.FC<BaseMovie> = (props) => {\r\n \r\n\r\n  return (\r\n    <Card sx={styles.card}>\r\n      <CardHeader title={props.title} />\r\n      <CardMedia\r\n        sx={styles.media}\r\n        image={\r\n          props.poster_path\r\n            ? `https://image.tmdb.org/t/p/w500/${props.poster_path}`\r\n            : img\r\n        }\r\n      />\r\n      <CardContent>\r\n        <Grid container>\r\n          <Grid item xs={6}>\r\n            <Typography variant=\"h6\" component=\"p\">\r\n              <CalendarIcon fontSize=\"small\" />\r\n              {props.release_date}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Typography variant=\"h6\" component=\"p\">\r\n              <StarRateIcon fontSize=\"small\" />\r\n              {\"  \"} {props.vote_average}{\" \"}\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <CardActions disableSpacing>\r\n        <IconButton aria-label=\"add to favorites\" >\r\n          <FavoriteIcon color=\"primary\" fontSize=\"large\" />\r\n        </IconButton>\r\n        <Button variant=\"outlined\" size=\"medium\" color=\"primary\">\r\n          More Info ...\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default MovieCard;\r\n~~~\r\nNote, the `More Info ...' button and the Favourite icon are inactive - we are only developing a static web app at this stage.\r\n\r\nSome comments on the code above:\r\n\r\n+ A Material UI Card component is used to contain the information - see [here](https://material-ui.com/components/cards/).\r\n+ For some movies, TMDB does not have a related poster. We display a placeholder in those cases. \r\n+ In the card's content section, we use the Material's Grid component to structure the information - see [here](https://material-ui.com/components/grid/). We want the content to be horizontally aligned. \r\n+ The Typography component controls how text is displayed and represented in the DOM - see [here](https://material-ui.com/components/typography/). In this example, the text will show as an h6 header, and its DOM representation will be a paragraph (p).\r\n+ The MovieCard component expects a BaseMovie type as a prop - we saw an example of a Movie's data structure in an earlier section of this lab.\r\n\r\nWe use Storybook to help us verify our component renders correctly. Create `src/stories/movieCard.stories.ts`and add this code:\r\n\r\n~~~tsx\r\nimport type { Meta, StoryObj } from '@storybook/react';\r\nimport MovieCard from \"../components/movieCard\";\r\nimport SampleMovie from \"./sampleData\";\r\n\r\nconst meta = {\r\n    title: 'Home Page/MovieCard',\r\n    component: MovieCard,\r\n} satisfies Meta<typeof MovieCard>;\r\nexport default meta;\r\n\r\ntype Story = StoryObj<typeof meta>;\r\nexport const Basic: Story = {\r\n    args: SampleMovie\r\n\r\n};\r\nBasic.storyName = \"Default\";\r\n\r\nconst sampleNoPoster = { ...SampleMovie, poster_path: undefined };\r\nexport const Exceptional: Story = {\r\n    args: sampleNoPoster\r\n\r\n};\r\nExceptional.storyName = \"Exception\";\r\n~~~\r\nThe second story deals with the exceptional case when a movie does not have a poster image. The stories use sample data from a file `src/stories/sampleData.ts`. Create the file and add the following:\r\n~~~tsx\r\nexport default {\r\n    adult: false,\r\n    backdrop_path: \"/5Iw7zQTHVRBOYpA0V6z0yypOPZh.jpg\",\r\n    belongs_to_collection: {\r\n      id: 10,\r\n      name: \"Star Wars Collection\",\r\n      poster_path: \"/iTQHKziZy9pAAY4hHEDCGPaOvFC.jpg\",\r\n      backdrop_path: \"/d8duYyyC9J5T825Hg7grmaabfxQ.jpg\",\r\n    },\r\n    budget: 200000000,\r\n    genres: [\r\n      {\r\n        id: 14,\r\n        name: \"Fantasy\",\r\n      },\r\n      {\r\n        id: 12,\r\n        name: \"Adventure\",\r\n      },\r\n      {\r\n        id: 878,\r\n        name: \"Science Fiction\",\r\n      },\r\n      {\r\n        id: 28,\r\n        name: \"Action\",\r\n      },\r\n    ],\r\n    homepage:\r\n      \"https://www.starwars.com/films/star-wars-episode-viii-the-last-jedi\",\r\n    id: 181808,\r\n    imdb_id: \"tt2527336\",\r\n    original_language: \"en\",\r\n    original_title: \"Star Wars: The Last Jedi\",\r\n    overview:\r\n      \"Rey develops her newly discovered abilities with the guidance of Luke Skywalker, who is unsettled by the strength of her powers. Meanwhile, the Resistance prepares to do battle with the First Order.\",\r\n    popularity: 44.208,\r\n    poster_path: \"/kOVEVeg59E0wsnXmF9nrh6OmWII.jpg\",\r\n    production_companies: [\r\n      {\r\n        id: 1,\r\n        logo_path: \"/o86DbpburjxrqAzEDhXZcyE8pDb.png\",\r\n        name: \"Lucasfilm\",\r\n        origin_country: \"US\",\r\n      },\r\n      {\r\n        id: 11092,\r\n        logo_path: null,\r\n        name: \"Ram Bergman Productions\",\r\n        origin_country: \"US\",\r\n      },\r\n      {\r\n        id: 2,\r\n        logo_path: \"/wdrCwmRnLFJhEoH8GSfymY85KHT.png\",\r\n        name: \"Walt Disney Pictures\",\r\n        origin_country: \"US\",\r\n      },\r\n    ],\r\n    production_countries: [\r\n      {\r\n        iso_3166_1: \"US\",\r\n        name: \"United States of America\",\r\n      },\r\n    ],\r\n    release_date: \"2017-12-13\",\r\n    revenue: 1332459537,\r\n    runtime: 152,\r\n    spoken_languages: [\r\n      {\r\n        iso_639_1: \"en\",\r\n        name: \"English\",\r\n      },\r\n    ],\r\n    status: \"Released\",\r\n    tagline: \"Darkness rises... and light to meet it\",\r\n    title: \"Star Wars: The Last Jedi\",\r\n    video: false,\r\n    vote_average: 7,\r\n    vote_count: 9692,\r\n  };\r\n~~~\r\nFrom the integrated terminal panel, start the Storybook server:\r\n~~~\r\n$ npm run storybook\r\n~~~\r\n\r\n![][cardstory]\r\n\r\nLeave the server running.\r\n\r\n### The Filtering Card component.\r\n\r\nIn VS Code, create the folder `src/components/filterMoviesCard` and add an `index.tsx` file with the following:\r\n~~~tsx\r\nimport React from \"react\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport FilterAltIcon from '@mui/icons-material/FilterAlt';\r\nimport SortIcon from '@mui/icons-material/Sort';\r\n\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport Select from \"@mui/material/Select\";\r\n\r\nconst styles = {\r\n  root: {\r\n    maxWidth: 345,\r\n  },\r\n  media: { height: 300 },\r\n \r\n  formControl: {\r\n    margin: 1,\r\n    minWidth: 220,\r\n    backgroundColor: \"rgb(255, 255, 255)\",\r\n  },\r\n};\r\n\r\n\r\n  const FilterMoviesCard: React.FC= () => {\r\n\r\n  const genres = [\r\n    {id: 1, name: \"Animation\"},\r\n    {id: 2, name: \"Comedy\"},\r\n    {id: 3, name: \"Thriller\"}\r\n  ]\r\n\r\n  return (\r\n    <>\r\n    <Card sx={styles.root} variant=\"outlined\">\r\n      <CardContent>\r\n        <Typography variant=\"h5\" component=\"h1\">\r\n          <FilterAltIcon fontSize=\"large\" />\r\n          Filter the movies.\r\n        </Typography>\r\n        <TextField\r\n          sx={styles.formControl}\r\n          id=\"filled-search\"\r\n          label=\"Search field\"\r\n          type=\"search\"\r\n          variant=\"filled\"\r\n        />\r\n        <FormControl sx={styles.formControl}>\r\n          <InputLabel id=\"genre-label\">Genre</InputLabel>\r\n          <Select\r\n            labelId=\"genre-label\"\r\n            id=\"genre-select\"\r\n          >\r\n            {genres.map((genre) => {\r\n              return (\r\n                <MenuItem key={genre.id} value={genre.id}>\r\n                  {genre.name}\r\n                </MenuItem>\r\n              );\r\n            })}\r\n          </Select>\r\n        </FormControl>\r\n      </CardContent>\r\n    </Card>\r\n    <Card sx={styles.root} variant=\"outlined\">\r\n        <CardContent>\r\n          <Typography variant=\"h5\" component=\"h1\">\r\n            <SortIcon fontSize=\"large\" />\r\n            Sort the movies.\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n      </>\r\n  );\r\n}\r\n\r\nexport default FilterMoviesCard;\r\n~~~\r\nThe genre list is hard-coded for now, but we will dynamically construct it in a future lab. Notice how the genre dropdown list is generated at runtime using array mapping.\r\n\r\nCreate the file `src/stories/filterMoviesCard.stories.ts` and add the following:\r\n\r\n~~~tsx\r\nimport type { Meta, StoryObj } from '@storybook/react';\r\nimport FilterMoviesCard from \"../components/filterMoviesCard\";\r\n\r\nconst meta = {\r\n  title: 'Home Page/FilterMoviesCard',\r\n  component: FilterMoviesCard,\r\n} satisfies Meta<typeof FilterMoviesCard>;\r\n\r\nexport default meta;\r\n\r\ntype Story = StoryObj<typeof meta>;\r\n\r\nexport const Basic: Story = {\r\n};\r\nBasic.storyName = \"Default\";\r\n\r\n~~~\r\nCheck the story in the UI:\r\n\r\n![][filterstory]\r\n\r\n### The Header component.\r\n\r\nIn VS Code, create the folder `src/components/headerMovieList` and add a file named `index.tsx`:\r\n~~~tsx\r\nimport React from \"react\";\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\r\nimport ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nconst styles = {\r\n    root: {\r\n        display: \"flex\",\r\n        justifyContent: \"space-around\",\r\n        alignItems: \"center\",\r\n        flexWrap: \"wrap\",\r\n        marginBottom: 1.5,\r\n    },\r\n};\r\n\r\ninterface HeaderProps {\r\n    title: string;\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = (props) => {\r\n    const title = props.title\r\n\r\n    return (\r\n        <Paper component=\"div\" sx={styles.root}>\r\n            <IconButton\r\n                aria-label=\"go back\"\r\n            >\r\n                <ArrowBackIcon color=\"primary\" fontSize=\"large\" />\r\n            </IconButton>\r\n\r\n            <Typography variant=\"h4\" component=\"h3\">\r\n                {title}\r\n            </Typography>\r\n            <IconButton\r\n                aria-label=\"go forward\"\r\n            >\r\n                <ArrowForwardIcon color=\"primary\" fontSize=\"large\" />\r\n            </IconButton>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n~~~\r\nThe backward/forward arrows do not work yet. The Material Paper component is a generic wrapper component (see [here](https://material-ui.com/components/paper/)).\r\n\r\nCreate the file `src/stories/movieListHeader.stories.tsx` and add the following:\r\n\r\n~~~tsx\r\nimport type { Meta, StoryObj } from '@storybook/react';\r\nimport MovieListHeader from \"../components/headerMovieList\";\r\n\r\nconst meta = {\r\n    title: 'Home Page/Header',\r\n    component: MovieListHeader,\r\n  } satisfies Meta<typeof MovieListHeader>;\r\n  \r\n  export default meta;\r\n\r\n  type Story = StoryObj<typeof meta>;\r\n\r\nexport const Basic: Story = {\r\n  args:{ title:'Discover Movies'}\r\n};\r\n\r\nBasic.storyName = \"Default\";\r\n~~~\r\nCheck it in the UI.\r\n\r\nBefore continuing, from the integrated terminal panel, update the git repository as follows:\r\n~~~\r\n$ git add -A\r\n$ git commit -m \"Home page components.\"\r\n$ git push origin master\r\n~~~\r\n\r\n[homecomponents]: ./img/homecomponents.png\r\n[filtersheet]: ./img/filtersheet.png\r\n[cardstory]: ./img/cardstory.png\r\n[filterstory]: ./img/filterstory.png\r\n","route":"/lab/{{COURSEURL}}/topic05/book-1/HomePage_Components","id":"HomePage_Components","type":"step"},{"title":" Assembling the Home page.","shortTitle":"HomePage","contentMd":"## Assembling the Home page.\r\n\r\nWe can now bring the components together to form a page in the app. \r\n\r\n+ Add the following interface description to `/types/interfaces.d.ts`\r\n\r\n~~~tsx\r\n export interface BaseMovieList { \r\n    movies: BaseMovie[];\r\n  }   \r\n~~~\r\n\r\n\r\n\r\nCreate the file `src/pages/homePage.tsx` and paste in this code:\r\n\r\n~~~tsx\r\nimport React from \"react\";\r\nimport Header from \"../components/headerMovieList\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport MovieList from \"../components/movieList\";\r\nimport { BaseMovieList } from \"../types/interfaces\";\r\n \r\nconst styles = {\r\n  root: {\r\n    padding: \"20px\",\r\n  },\r\n};\r\n\r\n\r\n\r\nconst MovieListPage: React.FC<BaseMovieList> = (props) => {\r\n  return (\r\n    <Grid container sx={styles.root}>\r\n      <Grid item xs={12}>\r\n        <Header title={\"Home Page\"} />\r\n      </Grid>\r\n      <Grid item container spacing={5}>\r\n        <MovieList movies={props.movies}></MovieList>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\nexport default MovieListPage;\r\n\r\n~~~\r\nAlso, create the file `src/components/movieList/index.tsx` (referenced by the above code) and add this code:\r\n~~~tsx\r\nimport React from \"react\";\r\nimport Movie from \"../movieCard/\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport { BaseMovieList } from \"../../types/interfaces\";\r\n\r\nconst MovieList: React.FC<BaseMovieList> = (props) => {\r\n  const movies=props.movies;\r\n  let movieCards = movies.map((m) => (\r\n    <Grid key={m.id} item xs={12} sm={6} md={4} lg={3} xl={2}>\r\n      <Movie key={m.id} {...m} />\r\n    </Grid>\r\n  ));\r\n  return movieCards;\r\n}\r\n\r\n  export default MovieList;\r\n~~~\r\nWe use the Material's Grid system above to enable a responsive UI. For example, when the browser's viewport is extra-large (xl), we allow six cards per row, whereas a small viewport (sm) allows only two cards per row - see later.\r\n\r\nWe will eventually plug this page into a routing component. In the meantime, we will statically link it to a top-level component that feeds it an array of movies. \r\n\r\n+ Create `src/index.tsx` and add this code:\r\n\r\n~~~tsx\r\nimport React from \"react\";\r\nimport { createRoot } from \"react-dom/client\";\r\nimport HomePage from \"./pages/HomePage\";\r\nimport sample from './stories/sampleData'\r\n\r\nconst movies = [sample, sample, sample, sample, sample, sample, sample];\r\n\r\nconst App = () => {\r\n  return (\r\n      <HomePage movies={movies} />\r\n  );\r\n};\r\n\r\nconst rootElement = createRoot(document.getElementById(\"root\")!); \r\nrootElement.render(<App />);\r\n~~~\r\nThe App component is at the top of the component hierarchy - this will change in a future lab. To see the HomePage rendering, stop the StoryBook server and start the development server provided by the Vite tool:\r\n~~~\r\n$ npm run dev\r\n~~~\r\nClick the localhost URL provided in the command response - the page should render as follows:\r\n\r\n![][homepage]\r\n\r\nA small/mobile browser viewport renders the page as:\r\n\r\n![][homepagesm]\r\n\r\nBefore continuing, from the integrated terminal panel, update the git repository as follows:\r\n~~~ \r\n$ git add -A\r\n$ git commit -m \"Home Page rendering.\"\r\n$ git push origin master\r\n~~~\r\n\r\n[homepage]: ./img/homepage.png\r\n[homepagesm]: ./img/homepagesm.png\r\n","route":"/lab/{{COURSEURL}}/topic05/book-1/HomePage","id":"HomePage","type":"step"},{"title":" The Movie Details Page components.","shortTitle":"MovieDetails_Components","contentMd":"## The Movie Details Page components.\r\n\r\nThe Movie Details page has a simple component breakdown (at least for now):\r\n\r\n![][moviecomponents]\r\n\r\n[We're assuming the sliding images section on the left is not generally reusable and therefore not a candidate for a component.]\r\n\r\nJust two components:\r\n\r\n+ Movie Details.\r\n+ Movie Header.\r\n\r\nStart the Storybook server:\r\n~~~\r\n$ npm run storybook\r\n~~~\r\n\r\n### The MovieDetails component.\r\n\r\nExtend the Base Movie interface\r\n\r\nThis component will display genre data. Add the following interface to the `/src/types/interfaces.d.ts`:\r\n~~~typescript\r\nexport interface MovieT extends BaseMovie {\r\n    genres: {\r\n      id: number;\r\n      name: string;\r\n    }[];\r\n  }\r\n~~~\r\n\r\n\r\n\r\nIn VS Code, create the file `src/components/movieDetails/index.tsx` and add the following:\r\n\r\n~~~tsx\r\nimport React from \"react\";\r\nimport Chip from \"@mui/material/Chip\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport AccessTimeIcon from \"@mui/icons-material/AccessTime\";\r\nimport MonetizationIcon from \"@mui/icons-material/MonetizationOn\";\r\nimport StarRate from \"@mui/icons-material/StarRate\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { MovieT } from \"../../types/interfaces\";\r\n\r\nconst styles = {\r\n    chipSet: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        flexWrap: \"wrap\",\r\n        listStyle: \"none\",\r\n        padding: 1.5,\r\n        margin: 0,\r\n    },\r\n    chipLabel: {\r\n        margin: 0.5,\r\n    },\r\n};\r\n\r\nconst MovieDetails: React.FC<MovieT> = (props) => {\r\n\r\n    return (\r\n        <>\r\n            <Typography variant=\"h5\" component=\"h3\">\r\n                Overview\r\n            </Typography>\r\n\r\n            <Typography variant=\"h6\" component=\"p\">\r\n                {props.overview}\r\n            </Typography>\r\n\r\n            <Paper component=\"ul\" sx={styles.chipSet}>\r\n                <li>\r\n                    <Chip label=\"Genres\" sx={styles.chipLabel} color=\"primary\" />\r\n                </li>\r\n                {props.genres.map((g) => (\r\n                    <li key={g.name}>\r\n                        <Chip label={g.name} />\r\n                    </li>\r\n                ))}\r\n            </Paper>\r\n            <Paper component=\"ul\" sx={styles.chipSet}>\r\n                <Chip icon={<AccessTimeIcon />} label={`${props.runtime} min.`} />\r\n                <Chip\r\n                    icon={<MonetizationIcon />}\r\n                    label={`${props.revenue.toLocaleString()}`}\r\n                />\r\n                <Chip\r\n                    icon={<StarRate />}\r\n                    label={`${props.vote_average} (${props.vote_count}`}\r\n                />\r\n                <Chip label={`Released: ${props.release_date}`} />\r\n            </Paper>\r\n        </>\r\n    );\r\n};\r\nexport default MovieDetails;\r\n~~~\r\nThis component uses Material's Clip (see [here](https://material-ui.com/components/chips/)) and Floating Action Button (see [here](https://material-ui.com/components/floating-action-button/)) components. We will add a click handler to the button later. The styling code demonstrates:\r\n\r\n+ A default Material Theme is inherited by all our components. It declares app-wide properties and guarantees consistent styling. We can access the theme using: makeStyles((theme) => ({ ...}). It allows us to customize the theme.\r\n\r\nA component can have a mixture of static and dynamically generated JSX. In the excerpt below, we are constructing a movie's list of genres at runtime:\r\n~~~tsx\r\n  {props.genres.map((g) => (\r\n    <li key={g.name}>\r\n      <Chip label={g.name} />\r\n    </li>\r\n  ))}\r\n~~~\r\nUsing the map method in this way is a common pattern in React development.\r\n\r\nCreate the file `src/stories/movieDetails.stories.tsx` and add the following:\r\n\r\n~~~tsx\r\nimport type { Meta, StoryObj } from '@storybook/react';\r\nimport MovieDetails from \"../components/movieDetails\";\r\nimport SampleMovie from \"./sampleData\";\r\n\r\nconst meta = {\r\n  title: \"Movie Details Page/MovieDetails\",\r\n  component: MovieDetails,\r\n} satisfies Meta<typeof MovieDetails>;\r\nexport default meta;\r\n\r\ntype Story = StoryObj<typeof meta>;\r\nexport const Basic: Story = {\r\n  args:  SampleMovie\r\n};\r\nBasic.storyName = \"Default\";\r\n~~~\r\nThe story should render as below:\r\n\r\n![][detailsstory]\r\n\r\n### The MovieHeader component.\r\n\r\nCreate the file `src/components/headerMovie/index.tsx` and add the following code:\r\n~~~tsx\r\nimport React from \"react\";\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\r\nimport ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport HomeIcon from \"@mui/icons-material/Home\";\r\nimport { MovieT } from \"../../types/interfaces\"; \r\n\r\nconst styles = {\r\n    root: {  \r\n    display: \"flex\",\r\n    justifyContent: \"space-around\",\r\n    alignItems: \"center\",\r\n    flexWrap: \"wrap\",\r\n    padding: 1.5,\r\n  },\r\n};\r\n\r\nconst MovieHeader: React.FC<MovieT> = (props) => {\r\n  \r\n  return (\r\n    <Paper component=\"div\" sx={styles.root}>\r\n      <IconButton aria-label=\"go back\">\r\n        <ArrowBackIcon color=\"primary\" fontSize=\"large\" />\r\n      </IconButton>\r\n\r\n      <Typography variant=\"h4\" component=\"h3\">\r\n        {props.title}{\"   \"}\r\n        <a href={props.homepage}>\r\n          <HomeIcon color=\"primary\"  fontSize=\"large\"/>\r\n        </a>\r\n        <br />\r\n        <span>{`${props.tagline}`} </span>\r\n      </Typography>\r\n      <IconButton aria-label=\"go forward\">\r\n        <ArrowForwardIcon color=\"primary\" fontSize=\"large\" />\r\n      </IconButton>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default MovieHeader;\r\n~~~\r\nCreate the file `src/stories/movieHeader.stories.ts` and add the following:\r\n~~~tsx\r\nimport type { Meta, StoryObj } from '@storybook/react';\r\nimport MovieHeader from \"../components/headerMovie\";\r\nimport SampleMovie from \"./sampleData\";\r\n\r\nconst meta = {\r\n    title: \"Movie Details Page/MovieHeader\",\r\n    component: MovieHeader,\r\n} satisfies Meta<typeof MovieHeader>;\r\nexport default meta;\r\n\r\ntype Story = StoryObj<typeof meta>;\r\nexport const Basic: Story = {\r\n    args: SampleMovie\r\n};\r\nBasic.storyName = \"Default\";\r\n~~~\r\nCheck the rendering in the Storybook UI.\r\n\r\nUpdate the local git repository, as follows:\r\n~~~\r\n$ git add -A\r\n$ git commit -m \"Movie Details  page components.\"\r\n$ git push origin master\r\n~~~\r\n\r\n[moviecomponents]: ./img/moviecomponents.png\r\n[detailsstory]: ./img/detailstory.png","route":"/lab/{{COURSEURL}}/topic05/book-1/MovieDetails_Components","id":"MovieDetails_Components","type":"step"},{"title":" Assembling the Movie Details page.","shortTitle":"MovieDetailsPage","contentMd":"## Assembling the Movie Details page.\r\n\r\nTo bring the components from the previous section together, create the file `src/pages/movieDetailsPage.tsx` and paste in this code:\r\n~~~tsx\r\nimport React from \"react\";\r\nimport MovieHeader from \"../components/headerMovie/\";\r\nimport MovieDetails from \"../components/movieDetails\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport ImageList from \"@mui/material/ImageList\";\r\nimport ImageListItem from \"@mui/material/ImageListItem\";\r\nimport { MovieT, MovieImage } from \"../types/interfaces\";\r\n\r\nconst styles = {\r\n  imageListRoot: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"space-around\",\r\n  },\r\n  gridListTile: { \r\n    width: \"100%\",\r\n    height: \"auto\",\r\n  },\r\n\r\n};\r\n\r\ninterface MoviePageProps {\r\n  movie: MovieT;\r\n  images: MovieImage[];\r\n}\r\n\r\nconst MoviePage: React.FC<MoviePageProps> = (props) => {\r\n  const movie = props.movie;\r\n  const images = props.images;\r\n\r\n  return (\r\n    <>\r\n      {movie ? (\r\n        <>\r\n          <MovieHeader {...movie} />\r\n          <Grid container spacing={5} style={{ padding: \"15px\" }}>\r\n            <Grid item xs={3}>\r\n              <div >\r\n                <ImageList sx={styles.imageListRoot} cols={1}>\r\n                  {images.map((image) => (\r\n                    <ImageListItem\r\n                      key={image.file_path}\r\n                      sx={styles.gridListTile}\r\n                      cols={1}\r\n                    >\r\n                     <img\r\n                        src={`https://image.tmdb.org/t/p/w500/${image.file_path}`}\r\n                        alt={'Image alternative'}\r\n                      />                    \r\n                    </ImageListItem>\r\n                  ))}\r\n                </ImageList>\r\n              </div>\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <MovieDetails {...movie} />\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      ) : (\r\n        <h2>Waiting for API data</h2>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MoviePage;\r\n~~~\r\nThe page will initially have compile errors. Currently, this page component expects to receive two props: a movie object and an array of poster images for that movie. We already have an interface defined for movies, but not for images. \r\nIn /`src/types/interface.d.ts`, enter the following MovieImage interface: \r\n\r\n~~~typescript\r\n  export interface MovieImage {\r\n    file_path: string;\r\n    aspect_ratio?: number; //some props are optional...\r\n    height?: number;\r\n    iso_639_1?: string;\r\n    vote_average?: number;\r\n    vote_count?: number;\r\n    width?: number;\r\n  }\r\n~~~\r\n\r\n\r\n\r\nLater in this lab series, we will request the movie data directly from the TMDB API. This communication will be asynchronous, and consequently, the page will render __before__ the API's response is received. Therefore the movie object reference will be 'undefined' and the app will crash. To avoid this error we use the ternary operator (?:) to check the movie object's status. When it is undefined (boolean false), a placeholder text - 'Waiting for API data' - is displayed. \r\n\r\nThe code above uses the Material ImageList component for displaying a set of images (see [here](https://material-ui.com/components/grid-list/)).\r\n\r\nAs a temporary solution, we will statically connect this page to the App component. In `src/index.tsx`, replace the line:\r\n~~~tsx\r\nimport HomePage from \"./pages/homePage\";\r\n~~~\r\nwith this:\r\n~~~tsx\r\nimport MovieDetailsPage from './pages/movieDetailsPage'\r\n~~~\r\nIn the same file, add an array of image filenames:\r\n~~~tsx\r\nconst images: MovieImage[] = [\r\n  { file_path: \"/kOVEVeg59E0wsnXmF9nrh6OmWII.jpg\"},\r\n  { file_path: \"/v1QQKq8M0fWxMgSdGOX1aCv8qMB.jpg\"},\r\n  { file_path: \"/2iGN0aKHJYD0xQydlfuCUAcgNbO.jpg\"},\r\n  { file_path: \"/rjBwhsOzHKUw2NIOrE7aMqjfe6s.jpg\"},\r\n];\r\n~~~\r\nAnd change the App component as follows:\r\n~~~tsx\r\nconst App = () => {\r\n  return (\r\n    <MovieDetailsPage movie={sample} images={images} />\r\n  );\r\n};\r\n~~~\r\nStart the development server:\r\n~~~\r\n$ npm run dev\r\n~~~\r\nThe browser should render the Movie Details page:\r\n\r\n![][moviepage]\r\n\r\nUpdate the project's git repository as follows:\r\n~~~ \r\n$ git add -A\r\n$ git commit -m \"Movie Details Page rendering.\"\r\n$ git push origin master\r\n~~~\r\n\r\n[moviepage]: ./img/moviepage.png\r\n","route":"/lab/{{COURSEURL}}/topic05/book-1/MovieDetailsPage","id":"MovieDetailsPage","type":"step"},{"title":" Exercise.","shortTitle":"Exercise","contentMd":"## Exercise.\r\n\r\nA movie's attributes include a list of countries used in the production (the production_countries array). \r\n\r\nYou are required to modify the relevant interface and component code so that the details page render this information, as illustrated below.\r\n\r\n(hint: examine how *Genres* are handled in the component for guidance.) \r\n\r\n![][exercise]\r\n\r\nOn completion, update the project's git repository, as follows:\r\n~~~ \r\n$ git add -A\r\n$ git commit -m \"Movie Details Page - included production countries.\"\r\n$ git push origin master\r\n~~~\r\n\r\n[exercise]: ./img/exercise.png\r\n\r\n","route":"/lab/{{COURSEURL}}/topic05/book-1/Exercise","id":"Exercise","type":"step"}]},{"route":"/lab/{{COURSEURL}}/topic05/book-3","type":"lab","title":"Resources","summary":"## Resources.\r","contentMd":"\r\n## Resources.\r\n\r\nSampleApp1 and SampleApp2 demo from lecture - React + TypeScript + Vite.\r\n\r\nDownload and unzip [this archive][code]\r\n\r\nDemonstrates data flow patterns in a React app\r\n\r\n+ Hooks (useState, useEffect) \r\n+ Side Effect example(async API call)\r\n\r\n## Install & Run\r\n\r\nIn the root directory, run:\r\n\r\n```bash\r\nnpm install\r\nnpm run dev\r\n```\r\n\r\n\r\n\r\n\r\n[code]: ./archives/archive.zip","frontMatter":{},"id":"book-3","img":"https://{{COURSEURL}}/topic05/book-3/img/main.jpg","imgFile":"img/main.jpg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"title":"","shortTitle":"Resources","contentMd":"\r\n## Resources.\r\n\r\nSampleApp1 and SampleApp2 demo from lecture - React + TypeScript + Vite.\r\n\r\nDownload and unzip [this archive][code]\r\n\r\nDemonstrates data flow patterns in a React app\r\n\r\n+ Hooks (useState, useEffect) \r\n+ Side Effect example(async API call)\r\n\r\n## Install & Run\r\n\r\nIn the root directory, run:\r\n\r\n```bash\r\nnpm install\r\nnpm run dev\r\n```\r\n\r\n\r\n\r\n\r\n[code]: ./archives/archive.zip","route":"/lab/{{COURSEURL}}/topic05/book-3/Resources","id":"Resources","type":"step"}]}]},{"route":"/topic/{{COURSEURL}}/topic06","type":"topic","title":"  Navigation and App Design.\r","summary":"See how to add navigation to a React app. Design for composition, not inheritance. Thinking in React","contentMd":"#  Navigation and App Design.\r\n \r\nSee how to add navigation to a React app. Design for composition, not inheritance. Thinking in React ","frontMatter":{},"id":"topic06","img":"https://{{COURSEURL}}/topic06/topic.png","imgFile":"topic.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"route":"/talk/{{COURSEURL}}/topic06/talk-1","type":"talk","title":" TS Top Up.\r","summary":"The destructuring and spread operator syntax.","contentMd":"# TS Top Up.\r\n \r\nThe destructuring and spread operator syntax.","frontMatter":{},"id":"talk-1","img":"https://{{COURSEURL}}/topic06/talk-1/ES6.jpg","imgFile":"ES6.jpg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"pdf":"https://{{COURSEURL}}/topic06/talk-1/ES6.pdf","pdfFile":"ES6.pdf"},{"route":"/talk/{{COURSEURL}}/topic06/talk-2","type":"talk","title":" React: Navigation.\r","summary":"Navigation adds the 'app nature' to a React SPA. The react-router library provides this support.","contentMd":"# React: Navigation.\r\n \r\nNavigation adds the 'app nature' to a React SPA. The react-router library provides this support. ","frontMatter":{},"id":"talk-2","img":"https://{{COURSEURL}}/topic06/talk-2/Navigation.png","imgFile":"Navigation.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"pdf":"https://{{COURSEURL}}/topic06/talk-2/Navigation.pdf","pdfFile":"Navigation.pdf"},{"route":"/talk/{{COURSEURL}}/topic06/talk-3","type":"talk","title":" Design Patterns in React.\r","summary":"React favours composition over inheritance. We look at some helpful composition patterns.","contentMd":"# Design Patterns in React.\r\n \r\nReact favours composition over inheritance. We look at some helpful composition patterns.","frontMatter":{},"id":"talk-3","img":"https://{{COURSEURL}}/topic06/talk-3/DesignPatterns.png","imgFile":"DesignPatterns.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"pdf":"https://{{COURSEURL}}/topic06/talk-3/DesignPatterns.pdf","pdfFile":"DesignPatterns.pdf"},{"route":"/lab/{{COURSEURL}}/topic06/book-1","type":"lab","title":"Lab-Movie_App-Part2","summary":"In this lab, we will enhance the static Movies Fan app from the previous lab session. \r","contentMd":"# Developing a Movies Fan App.\r\n\r\nIn this lab, we will enhance the static Movies Fan app from the previous lab session. \r\n\r\nThe features we will add are:\r\n\r\n1. Live data retrieved from the TMDB API.\r\n1. Navigation.\r\n1. Filtering of the movie list displayed on the home page.\r\n1. Tagging your favourite movies.\r\n \r\nFrom a technical perspective, this will involve using:\r\n\r\n1. The useState and useEffect hooks.\r\n1. The React-Router module.\r\n","frontMatter":{},"id":"book-1","img":"https://{{COURSEURL}}/topic06/book-1/img/main.jpeg","imgFile":"img/main.jpeg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"title":" Developing a Movies Fan App.","shortTitle":"Lab-Movie_App-Part2","contentMd":"# Developing a Movies Fan App.\r\n\r\nIn this lab, we will enhance the static Movies Fan app from the previous lab session. \r\n\r\nThe features we will add are:\r\n\r\n1. Live data retrieved from the TMDB API.\r\n1. Navigation.\r\n1. Filtering of the movie list displayed on the home page.\r\n1. Tagging your favourite movies.\r\n \r\nFrom a technical perspective, this will involve using:\r\n\r\n1. The useState and useEffect hooks.\r\n1. The React-Router module.\r\n","route":"/lab/{{COURSEURL}}/topic06/book-1/Lab-Movie_App-Part2","id":"Lab-Movie_App-Part2","type":"step"},{"title":" Routing.","shortTitle":"Routing","contentMd":"## Routing.\r\n\r\nInitially, the app will support two routes:\r\n\r\n+ / (root path) - this will match the Home page, which shows a list of movies from the TMDB API.\r\n+ /movies/:id (a parameterized route) - this will match the Movie Details page, where we use the id parameter (Movie ID) to retrieve the relevant movie details from the API.\r\n\r\nIn general, the top component in an app's component hierarchy is concerned with routing. In `src/index.tsx`, replace the entire content with the following code:\r\n~~~tsx\r\nimport React from \"react\";\r\nimport ReactDOM from 'react-dom/client'\r\nimport { BrowserRouter, Route, Navigate, Routes } from \"react-router-dom\";\r\nimport HomePage from \"./pages/homePage\";\r\nimport MoviePage from \"./pages/movieDetailsPage\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Routes>\r\n        <Route path=\"/movies/:id\" element={<MoviePage />} />\r\n        <Route path=\"/\" element={<HomePage />} />\r\n        <Route path=\"*\" element={<Navigate to=\"/\" />} />\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nReactDOM.createRoot(document.getElementById('root')!).render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n)\r\n~~~\r\nThese changes will break our app temporarily, but you may continue anyway.\r\n\r\n","route":"/lab/{{COURSEURL}}/topic06/book-1/Routing","id":"Routing","type":"step"},{"title":" Using Live Movie Data.","shortTitle":"TMDB_API","contentMd":"## Using Live Movie Data.\r\n\r\n[ You will need an API key for the TMDB service to complete this section - see the previous lab for details.]\r\n\r\nWe're going to add another movie interface to our interfaces.d.ts file. This interface will represent the details of a listed movie. You might be questioning why we need yet another Movie interface. This is to conform to what's returned from the API when requesting a Movie list.  In `src/types/interfaces.d.ts`, add the following type:\r\n~~~ts\r\n  export interface ListedMovie extends BaseMovie {\r\n    genre_ids: number[];\r\n  }\r\n~~~\r\n\r\n\r\nWe want the HomePage to request live movie data from the API. In `src/pages/homePage.tsx`, make the changes shown below:\r\n~~~tsx\r\nimport React, { useState, useEffect } from \"react\";  // Changed\r\nimport { ListedMovie}  from \"../types/interfaces\"; //changed\r\n..... other imports .......\r\n\r\n...... styles code ........\r\n\r\nconst MovieListPage: React.FC= () => {\r\n    const [movies, setMovies] = useState<ListedMovie[]>([]);\r\n\r\n    useEffect(() => {\r\n      fetch(\r\n        `https://api.themoviedb.org/3/discover/movie?api_key=${import.meta.env.VITE_TMDB_KEY}&language=en-US&include_adult=false&page=1`\r\n      )\r\n        .then((res) => res.json())\r\n        .then((json) => {\r\n          return json.results;\r\n        })\r\n        .then((movies) => {\r\n          setMovies(movies);\r\n        });\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    \r\n  return (\r\n      ..... code as before .......\r\n       <MovieList movies={movies}></MovieList>  //change to use movies from state instead of props.movies\r\n       ..... code as before .......\r\n  );\r\n};\r\nexport default MovieListPage;\r\n~~~\r\nYou will notice the Typescript compiler indicates an error for ``import.meta.env.VITE_TMDB_KEY``.  TypeScript compiler doesn't know about the `env` property on `import.meta` as it's a feature specific to Vite. To fix this, create a file called **vite-env.d.ts** in the root of the vite project. with the folling content:\r\n\r\n~~~react\r\n// vite-env.d.ts\r\ninterface ImportMeta {\r\n  env: Record<string, string>;\r\n}\r\n~~~\r\n\r\nOpen your TypeScript configuration file (`tsconfig.json`) and  vite-env.d.ts dd it to the `include` array:\r\n\r\n~~~react\r\n..... code as before .......\r\n\"include\": [\"src\",\"vite-env.d.ts\"],\r\n    ..... code as before .......\r\n~~~\r\n\r\n\r\n\r\nRestart the development server (npm run dev). The browser should be showing a list of current movie titles:\r\n\r\n![][current]\r\n\r\nIn the above code, the useEffect hook is querying the `Discovery` endpoint of the API for a set of current movies (read more [here][discovery] ). The URL includes a query string:\r\n\r\n>?api_key=${import.meta.env.VITE_TMDB_KEY}&language=en-US&include_adult=false&page=1\r\n\r\nTMDB uses the api_key in the query string of the URL to authenticate the HTTP request. The page attribute at the end indicates the subset of movies we are requesting. It can range from 1 to 1000, where 1 means the first 20 movies, 2 means movies 21 to 40, etc. We have hard-coded it to page 1 for convenience. \r\n\r\nNote the last 'then clause' in the fetch call:\r\n~~~tsx\r\n.then(movies => {\r\n    setMovies(movies);\r\n});\r\n~~~\r\nIt stores the API's response in a state variable called *movies* - created by the useState hook. \r\n\r\nThe second 'then' clause of the fetch has a (commented-out) console.log statement; enable it to help your understanding of the response structure from the API. Uncomment the line and open the developer tools in the browser and examine the output from the log statement:\r\n\r\n![][structure]\r\n\r\nTake some time to explore the content of the response's *results* property.\r\n\r\nThe 'eslint' line in the above code stops the ESLint tool from reporting an (annoying) warning message.\r\n\r\nIn `src/components/movieCard/index.tsx` make two changes:\r\n\r\n+ Wrap the 'More Info' button in a Link, as follows\r\n~~~tsx\r\n        <Link to={`/movies/${props.id}`}>\r\n          <Button variant=\"outlined\" size=\"medium\" color=\"primary\">\r\n            More Info ...\r\n          </Button>\r\n        </Link>\r\n~~~\r\n+ Add an import at the top of the file:\r\n~~~tsx\r\nimport { Link } from \"react-router-dom\";\r\n~~~\r\n\r\nThis modification means clicking a card's 'More Info' button will change the browser's URL address, for example, to this:\r\n\r\n> http://127.0.0.1:5173//movies/475557\r\n\r\nThis URL pattern  matches the first Route in the app's routing configuration (see `src/index.tsx`):\r\n~~~tsx\r\n    <Route path=\"/movies/:id\" element={<MoviePage />} />\r\n~~~\r\nThe id parameter in the Route's path will be bound to the id of the clicked movie, e.g. 475557. The Route causes the app to mount the Movie Details page. That page's logic must request the movie's details from the TMDB API - previously, we passed in the details as a prop, but this was a temporary solution. In `src/pages/movieDetailsPage.tsx`, make the following modifications:\r\n\r\n~~~tsx\r\nimport React, {useState, useEffect}  from \"react\"; // replace existing react import\r\nimport { useParams } from \"react-router-dom\";\r\n\r\n..... other imports ......\r\n\r\n...... style code .....\r\n\r\nconst MoviePage: React.FC= () => {\r\n  const { id } = useParams();\r\n  const [movie, setMovie] = useState<MovieT>();\r\n  const [images, setImages] = useState<MovieImage[]>([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      `https://api.themoviedb.org/3/movie/${id}?api_key=${import.meta.env.VITE_TMDB_KEY}`\r\n    )\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((movie) => {\r\n        // console.log(movie)\r\n        setMovie(movie);\r\n      });\r\n  }, [id]);\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      `https://api.themoviedb.org/3/movie/${id}/images?api_key=${import.meta.env.VITE_TMDB_KEY}`\r\n    )\r\n      .then((res) => res.json())\r\n      .then((json) => json.posters)\r\n      .then((images) => {\r\n        setImages(images);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n     ..... code as before .....\r\n\r\n    </>\r\n  );\r\n};\r\n~~~\r\n[Note: You are replacing the 'img' tag currently in the code with the one shown above.]\r\n\r\nSome observations on the above code:\r\n\r\n+ The useParams hook (from react-router) allows the component to extract the movie id from the browser's parameterized URL address. \r\n+ The first useEffect hook uses the API's movie endpoint (read more [here][movie]) to get the full details on the film. \r\n+ The second useEffect gets the set of images for the same movie.\r\n\r\nClick the 'More Info' button of any movie on the home page. You should now see the details page for that movie:\r\n\r\n![][detailp]\r\n\r\nThe list of genres in the filtering card's dropdown is hard-coded. Instead, we can populate the list from the API's genre endpoint (read more [here][genres]), which returns an array, for example:\r\n~~~tsx\r\n[\r\n  {\r\n    id: '\"1\",\r\n    name: \"Action\"\r\n  },\r\n  {\r\n    id: '\"2\",\r\n    name: \"Adventure\"\r\n  },  {\r\n    id: '\"3\",\r\n    name: \"Animation\"\r\n  },\r\n  . . . etc . . . . \r\n]\r\n~~~\r\nThis array returned by TMDB does not include the 'all genres' option; we must add it manually. Assigning it a genre id of zero will avoid a clash with any existing genre id.\r\n\r\nCreate a new type to restricts the Filter options to either `\"title\"` or `\"genre\"`. In `src/types/interfaces.d.ts`, add the following type:\r\n\r\n~~~typescript\r\nexport type FilterOption = \"title\" | \"genre\";\r\n~~~\r\n\r\n\r\nIn `src/components/filterMoviesCard/index.tsx`, make the changes shown below:\r\n~~~tsx\r\nimport React, { useState, useEffect, ChangeEvent } from \"react\";\r\nimport { FilterOption } from \"../../types\"\r\nimport { SelectChangeEvent } from \"@mui/material\";\r\n..... other imports ......\r\n\r\n...... style code .....\r\n\r\ninterface FilterMoviesCardProps {\r\n  titleFilter: string;\r\n  genreFilter: string;\r\n}\r\n\r\nconst FilterMoviesCard: React.FC<FilterMoviesCardProps> = (props) => {\r\n  const [genres, setGenres] = useState([{ id: '0', name: \"All\" }])\r\n \r\n   useEffect(() => {\r\n     fetch(\r\n       `https://api.themoviedb.org/3/genre/movie/list?api_key=${import.meta.env.VITE_TMDB_KEY}`\r\n     )\r\n       .then(res => res.json())\r\n       .then(json => {\r\n         return json.genres\r\n       })\r\n       .then(apiGenres => {\r\n         setGenres([genres[0], ...apiGenres]);\r\n       });\r\n     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n   }, []);\r\n \r\n  const handleChange = (e: SelectChangeEvent, type: FilterOption, value: string) => {\r\n    e.preventDefault()\r\n    // Completed later\r\n  };\r\n\r\n  const handleTextChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    handleChange(e, \"title\", e.target.value)\r\n  }\r\n\r\n  const handleGenreChange = (e: SelectChangeEvent) => {\r\n    handleChange(e, \"genre\", e.target.value)\r\n  };\r\n  return (\r\n    <>\r\n      .....code as before ....\r\n~~~\r\nIn the same file, replace the lines:\r\n~~~tsx\r\n    <TextField\r\n      sx={styles.formControl}\r\n      id=\"filled-search\"\r\n      label=\"Search field\"\r\n      type=\"search\"\r\n      variant=\"filled\"\r\n    />\r\n~~~\r\nwith this:\r\n~~~tsx\r\n    <TextField\r\n      sx={styles.formControl}\r\n      id=\"filled-search\"\r\n      label=\"Search field\"\r\n      type=\"search\"\r\n      value={props.titleFilter}\r\n      variant=\"filled\"\r\n      onChange={handleTextChange}\r\n    />\r\n~~~\r\nand replace the lines:\r\n~~~tsx\r\n    <Select\r\n      labelId=\"genre-label\"\r\n      id=\"genre-select\"\r\n    >\r\n~~~\r\nwith this:\r\n~~~tsx\r\n    <Select\r\n      labelId=\"genre-label\"\r\n      id=\"genre-select\"\r\n      value={props.genreFilter}\r\n      onChange={handleGenreChange}\r\n    >\r\n~~~\r\nFiltering the list of movies on the home page is not yet complete. For now, the changes to note above are:\r\n\r\n+ The component retrieves the complete list of genres from TMDB and stores them in a local state.\r\n+ This list is augmented with an 'all genres' entry, \r\n+ The user input fields (text box and dropdown menu) have an event handlers function to process the user input (not yet complete).\r\n\r\nWe will see the effect of the above changes in the next section\r\n\r\nBefore continuing, update the project's git repository, as follows:\r\n~~~\r\n$ git add -A\r\n$ git commit -m \"Added routing and live data from API.\"\r\n$ git push origin master\r\n~~~\r\n\r\n[discovery]: https://developers.themoviedb.org/3/discover\r\n[movie]: https://developers.themoviedb.org/3/movies/get-movie-details\r\n[genres]: https://developers.themoviedb.org/3/genres/get-movie-list\r\n[current]: ./img/current.png\r\n[structure]: ./img/structure.png\r\n[detailp]: ./img/detailp.png\r\n[allgenres]: ./img/allgenres.png","route":"/lab/{{COURSEURL}}/topic06/book-1/TMDB_API","id":"TMDB_API","type":"step"},{"title":" The Filtering behaviour.","shortTitle":"Filtering","contentMd":"## The Filtering behaviour.\r\n\r\nThe user can filter the list of movies displayed on the home page. A floating action button ([read more](https://material-ui.com/components/floating-action-button/)) will trigger the displaying of the FilterMoviesCard component. This component allows the user enter a movie title substring and/or select a movie genre. The Material design Drawer component ([read more](https://material-ui.com/components/drawers/)) is used as a side sheet to display the filter card.\r\n\r\n>\"Side sheets are surfaces containing supplementary content that is anchored to the left or right edge of the screen.\"\r\n\r\n![][filtering]\r\n\r\nThe FilterMoviesCard component manages the filtering input fields. However, the HomePage component uses these values to compute the matching list of movies. The design solution for this problem is the *Inverse data flow pattern* or *Data Down, Action Up*. According to the pattern, the HomePage component stores the filtering data as 'state'.\r\n\r\nIn `src/pages/homePage.tsx`, we need:\r\n\r\n+ A useState hook to manage the state variables.\r\n+ A function to update the state.\r\n+ Logic to compute the subset of matching movies.\r\n+ A 'floating action' button.\r\n\r\nIn `src/pages/homePage.tsx`, replace the entire content with the following:\r\n~~~tsx\r\nimport React, { useState, useEffect } from \"react\";  // Changed\r\nimport Header from \"../components/headerMovieList\";\r\nimport FilterCard from \"../components/filterMoviesCard\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport MovieList from \"../components/movieList\";\r\nimport Fab from \"@mui/material/Fab\";\r\nimport Drawer from \"@mui/material/Drawer\";\r\nimport { FilterOption, ListedMovie} from \"../types\";\r\n\r\n \r\nconst styles = {\r\n  root: {\r\n    padding: \"20px\",\r\n  }, fab: {\r\n    marginTop: 8,\r\n    position: \"fixed\",\r\n    top: 2,\r\n    right: 2,\r\n  },\r\n};\r\n\r\n  const MovieListPage: React.FC= () => {\r\n    const [movies, setMovies] = useState([]);\r\n    const [titleFilter, setTitleFilter] = useState(\"\");\r\n    const [genreFilter, setGenreFilter] = useState(\"0\");\r\n    const [drawerOpen, setDrawerOpen] = useState(false);\r\n\r\n    const genreId = Number(genreFilter);\r\n\r\n    let displayedMovies = movies\r\n    .filter((m: ListedMovie) => {\r\n      return m.title.toLowerCase().search(titleFilter.toLowerCase()) !== -1;\r\n    })\r\n    .filter((m: ListedMovie) => {\r\n      return genreId > 0 ? m.genre_ids.includes(genreId) : true;\r\n    });\r\n\r\n    const handleChange = (type: FilterOption, value: string) => {\r\n      if (type === \"title\") setTitleFilter(value);\r\n      else setGenreFilter(value);\r\n    };\r\n\r\n    useEffect(() => {\r\n      fetch(\r\n        `https://api.themoviedb.org/3/discover/movie?api_key=${import.meta.env.VITE_TMDB_KEY}&language=en-US&include_adult=false&page=1`\r\n      )\r\n        .then((res) => res.json())\r\n        .then((json) => {\r\n          // console.log(json);\r\n          return json.results;\r\n        })\r\n        .then((movies) => {\r\n          setMovies(movies);\r\n        });\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    \r\n    return (\r\n      <>\r\n      <Grid container sx={styles.root}>\r\n        <Grid item xs={12}>\r\n          <Header title={\"Home Page\"} />\r\n        </Grid>\r\n        <Grid item container spacing={5}>\r\n          <MovieList movies={displayedMovies}></MovieList>\r\n        </Grid>\r\n      </Grid>\r\n      <Fab\r\n          color=\"secondary\"\r\n          variant=\"extended\"\r\n          onClick={() => setDrawerOpen(true)}\r\n          sx={styles.fab}\r\n        >\r\n          Filter\r\n      </Fab>\r\n      <Drawer\r\n        anchor=\"left\"\r\n        open={drawerOpen}\r\n        onClose={() => setDrawerOpen(false)}\r\n      >\r\n        <FilterCard\r\n          onUserInput={handleChange}\r\n          titleFilter={titleFilter}\r\n          genreFilter={genreFilter}\r\n        />\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\nexport default MovieListPage;\r\n~~~\r\nThe above change will cause a compile error for the <FilterCard...> element. This is because we pass a callback function to the FilterMoviesCard and need to ppecify it in the interface for the component. FilterMoviesCard invokes the callback whenever the user changes a filtering input. In `components/filterMoviesCard/index.tsx`, update the interface and the handleChange event handler as follows:\r\n~~~tsx\r\n ..... code as before .....\r\n\r\ninterface FilterMoviesCardProps {\r\n  onUserInput: (f: FilterOption, s: string)  => void; // Add this line\r\n  titleFilter: string;\r\n  genreFilter: string;\r\n}\r\n\r\n ..... code as before .....\r\n\r\n\r\n const handleChange = (e: SelectChangeEvent, type: FilterOption, value: string) => {\r\n    e.preventDefault()\r\n    props.onUserInput(type, value)\r\n  };\r\n\r\n   ..... code as before .....\r\n   \r\n~~~\r\n\r\nGo to the Home page in the browser, click the floating action button (top right) and change the genre selection or type in the text box. Click anywhere on the page. The app recomputes the list of displayed movies automatically.\r\n\r\nBefore continuing, from the integrated terminal panel, update the git repository as follows:\r\n~~~\r\n$ git add -A\r\n$ git commit -m \"Added filtering of movie list.\"\r\n$ git push origin master\r\n~~~\r\n\r\n[filtering]: ./img/filtering.png","route":"/lab/{{COURSEURL}}/topic06/book-1/Filtering","id":"Filtering","type":"step"},{"title":" Tagging favourite movies.","shortTitle":"Favorites","contentMd":"## Tagging favourite movies.\r\n\r\nOn the Home page, we can tag a movie as one of our favourites by clicking its 'Favourite' icon. This tagging will cause the related card to show a red Favorite Icon on the title bar. As a temporary solution, we will record a tagging by adding a 'favourite' property to the movie object and set it to true. [A more realistically approach is to persist them to a database via an API.] \r\n\r\n![][favorites]\r\n\r\nWe will again use the inverse data flow (Data down, Action up) pattern, this time to handle when a user tags a movie as a favourite. We record this fact by adding a 'favourite' property to the movie object and set it to true. In `pages/homePage.tsx`, make the following changes to the component:\r\n~~~react\r\n..... code as before ......\r\n\r\n const MovieListPage: FC= () => {\r\n  ..... code as before .......\r\n\r\n  // New function\r\n  const addToFavourites = (movieId: number) => {\r\n    const updatedMovies = movies.map((m: ListedMovie) =>\r\n      m.id === movieId ? { ...m, favourite: true } : m\r\n    );\r\n    setMovies(updatedMovies);\r\n  };\r\n\r\n  useEffect(() => {\r\n    ..... code as before .....\r\n  }\r\n  return (\r\n    ...... code as before .....\r\n~~~\r\nAlso, replace the line:\r\n~~~\r\n   <MovieList movies={displayedMovies} />\r\n~~~\r\nwith this:\r\n~~~\r\n    <MovieList movies={displayedMovies} selectFavourite={addToFavourites} />\r\n~~~\r\nIn `components/movieList/index.tsx`, add/change the following::\r\n~~~tsx\r\n... imports as before ....\r\n\r\ninterface MovieListProps extends BaseMovieList {\r\n  addToFavourites: (movieId: number) => void;\r\n}\r\n\r\n... code as before ....\r\n~~~\r\n\r\nReplace the line:\r\n~~~tsx\r\n    <Movie key={m.id} movie={m} />\r\n~~~\r\nwith this:\r\n~~~tsx\r\n    <Movie key={m.id} movie={m} selectFavourite={props.selectFavourite} />\r\n~~~\r\nIn `components/movieCard/index.tsx`, add/change the following change to accommodate the new event prop:\r\n\r\n~~~tsx\r\nimport React, {MouseEvent} from \"react\";\r\n... imports as before ....\r\n... style as before ....\r\n\r\ninterface MovieCardProps extends BaseMovie {\r\n  selectFavourite: (movieId: number) => void;\r\n} // Add this\r\n\r\nconst MovieCard: React.FC<MovieCardProps> = (props) => {// update this\r\n\r\n  const handleAddToFavourite = (e: MouseEvent<HTMLButtonElement>) => {\r\n    e.preventDefault();\r\n    props.selectFavourite(props.id);\r\n  };\r\n\r\n  return (\r\n    ...... code as before .....\r\n~~~\r\n+ In the same file, replace the lines:\r\n~~~tsx\r\n    <IconButton aria-label=\"add to favourites\" onClick={null}>\r\n      <FavoriteIcon color=\"primary\" fontSize=\"large\" />\r\n    </IconButton>\r\n~~~\r\nwith this:\r\n~~~tsx\r\n    <IconButton aria-label=\"add to favourites\" onClick={handleAddToFavourite}>\r\n          <FavoriteIcon color=\"primary\" fontSize=\"large\" />\r\n    </IconButton>\r\n~~~\r\n+ add an import at the top:\r\n~~~tsx\r\nimport Avatar from \"@mui/material/Avatar\";\r\n~~~\r\n+ and replace the line:\r\n~~~tsx\r\n    <CardHeader title={movie.title} />\r\n~~~\r\nwith this:\r\n~~~tsx\r\n <CardHeader\r\n        avatar={\r\n          props.favourite ? (\r\n            <Avatar sx={styles.avatar}>\r\n              <FavoriteIcon />\r\n            </Avatar>\r\n          ) : null\r\n        }\r\n        title={\r\n          <Typography variant=\"h5\" component=\"p\">\r\n            {props.title}{\" \"}\r\n          </Typography>\r\n        }\r\n      />\r\n~~~\r\nUntil now, a component prop is either a data object or a callback functions. However, in the last excerpt above, a component is the value assigned to the title and avatar props. This is acceptable because a component transpiles to a function. Later we will develop custom components that accept other components as props.\r\n\r\nThe above changes cause the following runtime execution flow:\r\n1. On the Home page, the user clicks a movie card's Favourite icon.\r\n1. The event handler invokes the callback provided by the HomePage. \r\n1. The callback sets the movie's favourite property to true - a state change. \r\n1. This state change causes the HomePage to re-render. \r\n1. The tagged MovieCard displays a (red) Favourite icon in its title.   \r\n\r\nTry selecting some movies as your favourites.\r\n\r\nWe need a new view to display the list of favourites. Its layout will be identical to the home page. Implementing this without violating the DRY principle (Don't Repeat Yourself) will require some refactoring - see next section. As a placeholder, create the file `src/pages/favouriteMoviesPage.tsx` and add this code:\r\n~~~tsx\r\nimport React, { FC } from \"react\";\r\n\r\nconst FavouriteMoviesPage: FC= () => {\r\n    return <h2>Favourite Movies</h2>\r\n}\r\n\r\nexport default FavouriteMoviesPage\r\n~~~\r\nWe must update the routing configuration and add a simple site navigation bar. In `src/index.tsx`, completely replace the content with the following:\r\n~~~tsx\r\nimport React from \"react\";\r\nimport ReactDOM from 'react-dom/client'\r\nimport { BrowserRouter, Route, Navigate, Routes, Link } from \"react-router-dom\";\r\nimport HomePage from \"./pages/homePage\";\r\nimport MoviePage from \"./pages/movieDetailsPage\";\r\nimport FavouriteMoviesPage from \"./pages/favouriteMoviesPage\"; // NEW\r\n\r\nconst App = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/\">Home</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/movies/favourites\">Favourites</Link>\r\n        </li>\r\n      </ul>\r\n      <Routes>\r\n        <Route path=\"/movies/favourites\" element={<FavouriteMoviesPage />} />\r\n        <Route path=\"/movies/:id\" element={<MoviePage />} />\r\n        <Route path=\"/\" element={<HomePage />} />\r\n        <Route path=\"*\" element={<Navigate to=\"/\" />} />\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nReactDOM.createRoot(document.getElementById('root')!).render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n)\r\n\r\n~~~\r\nWe must restart the development server whenever we nake routing configuration changes:\r\n~~~\r\n$ npm run dev\r\n~~~\r\nIn the browser, check the new navigation links at the top are working.\r\n\r\nThe app has a bug! Try the following sequence:\r\n\r\n1. Go to the home page.\r\n1. Click the 'Favourites' icon of the first three movies.\r\n1. Notice, the selected movies are tagged as expected. \r\n1. Go to the Favourites page, using the navigation links on top\r\n1. Navigate back to the Home page. The three selected movies are no longer tagged. This reset happened because the useEffect hook queries the API every time the home page component is mounted, i.e. we overwrite the tagged movies information. We will fix this issue in the next lab - I promise!\r\n\r\nCommit this work to the repository:\r\n~~~\r\n$ git add -A\r\n$ git commit -m \"Add to favourites logic completed; Dummy favourites page.\"\r\n$ git push origin master\r\n~~~\r\n\r\n[navigation]: ./img/navigation.png\r\n[favorites]: ./img/favorites.png\r\n","route":"/lab/{{COURSEURL}}/topic06/book-1/Favorites","id":"Favorites","type":"step"},{"title":" Refactoring.","shortTitle":"Refactoring","contentMd":"## Refactoring.\r\n\r\n### The DRY (Don't Repeat Yourself) principle.\r\n\r\nTo avoid code duplication between the home page and favourites page, we can define a template page for displaying a list of movies. Props will allow us to reuse the template in different scenarios.\r\n\r\n+ Add the following interface to /types/interfaces.d.ts:\r\n\r\n  ~~~tsx\r\n  export interface MovieListPageTemplateProps {\r\n    movies: ListedMovie[];\r\n    title: string;\r\n    selectFavourite: (m: number) => void;\r\n  }\r\n  ~~~\r\n\r\n  \r\n\r\nCreate the file `src/components/templateMovieListPage/index.tsx` and add the following code:\r\n\r\n```tsx\r\nimport  { useState } from \"react\";\r\nimport Header from \"../headerMovieList\";\r\nimport FilterCard from \"../filterMoviesCard\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Fab from \"@mui/material/Fab\";\r\nimport Drawer from \"@mui/material/Drawer\";\r\nimport MovieList from \"../movieList\";\r\nimport {  MovieListPageTemplateProps} from \"../../types/interfaces\";\r\n\r\nconst styles = {\r\n  root: {\r\n    padding: \"20px\",\r\n  },\r\n  fab: {\r\n    marginTop: 8,\r\n    position: \"fixed\",\r\n    top: 2,\r\n    right: 2,\r\n  },\r\n};\r\n\r\nfunction MovieListPageTemplate({ movies, title, selectFavourite }: MovieListPageTemplateProps) {\r\n  const [titleFilter, setTitleFilter] = useState(\"\");\r\n  const [genreFilter, setGenreFilter] = useState(\"0\");\r\n  const [drawerOpen, setDrawerOpen] = useState(false);\r\n  \r\n  const genreId = Number(genreFilter);\r\n\r\n  let displayedMovies = movies\r\n    .filter((m) => {\r\n      return m.title.toLowerCase().search(titleFilter.toLowerCase()) !== -1;\r\n    })\r\n    .filter((m) => {\r\n      return genreId > 0 ? m.genre_ids.includes(genreId) : true;\r\n    });\r\n\r\n  const handleChange = (type: string, value: string) => {\r\n    if (type === \"title\") setTitleFilter(value);\r\n    else setGenreFilter(value);\r\n  };\r\n\r\n  return (\r\n   <>\r\n      <Grid container sx={styles.root}>\r\n        <Grid item xs={12}>\r\n          <Header title={title} />\r\n        </Grid>\r\n        <Grid item container spacing={5}>\r\n          <MovieList\r\n            movies={displayedMovies}\r\n            selectFavourite={selectFavourite}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Fab\r\n        color=\"secondary\"\r\n        variant=\"extended\"\r\n        onClick={() => setDrawerOpen(true)}\r\n        sx={styles.fab}\r\n      >\r\n        Filter\r\n      </Fab>\r\n      <Drawer\r\n        anchor=\"left\"\r\n        open={drawerOpen}\r\n        onClose={() => setDrawerOpen(false)}\r\n      >\r\n        <FilterCard\r\n          onUserInput={handleChange}\r\n          titleFilter={titleFilter}\r\n          genreFilter={genreFilter}\r\n        />\r\n      </Drawer>\r\n    </>  \r\n  );\r\n}\r\nexport default MovieListPageTemplate;\r\n```\r\n\r\n\r\nThe bulk of the code currently in `pages/homePage.tsx` has moved to the template page component above. In `pages/homePage.tsx`, completely replace its content with the following:\r\n```tsx\r\nimport React, { useState, useEffect, FC } from \"react\";  \r\nimport PageTemplate from '../components/templateMovieListPage';\r\nimport { ListedMovie } from \"../types/interfaces\";\r\n\r\n\r\n \r\nconst styles = {\r\n  root: {\r\n    padding: \"20px\",\r\n  }, fab: {\r\n    marginTop: 8,\r\n    position: \"fixed\",\r\n    top: 2,\r\n    right: 2,\r\n  },\r\n};\r\n\r\n  const HomePage: FC= () => {\r\n    const [movies, setMovies] = useState<ListedMovie[]>([]);\r\n    const favourites = movies.filter(m => m.favourite)\r\n    localStorage.setItem('favourites', JSON.stringify(favourites))\r\n    // New function\r\n  const addToFavourites = (movieId: number) => {\r\n    const updatedMovies = movies.map((m: ListedMovie) =>\r\n      m.id === movieId ? { ...m, favourite: true } : m\r\n    );\r\n    setMovies(updatedMovies);\r\n  };\r\n\r\n    useEffect(() => {\r\n      fetch(\r\n        `https://api.themoviedb.org/3/discover/movie?api_key=${import.meta.env.VITE_TMDB_KEY}&language=en-US&include_adult=false&page=1`\r\n      )\r\n        .then((res) => res.json())\r\n        .then((json) => {\r\n          // console.log(json);\r\n          return json.results;\r\n        })\r\n        .then((movies) => {\r\n          setMovies(movies);\r\n        });\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    \r\n    return (\r\n      <PageTemplate\r\n      title='Discover Movies'\r\n      movies={movies}\r\n      selectFavourite={addToFavourites}\r\n    />\r\n  );\r\n};\r\nexport default HomePage;\r\n```\r\nThe Home page should now display as before. \r\n\r\nNote, we are storing the favourite movie objects in the browser's local storage to enable the Favourite movies page access them - we will use a better approach later. In `pages/favouriteMoviesPage.tsx`, replace the entire content with the following:\r\n\r\n```tsx\r\nimport React from \"react\";\r\nimport PageTemplate from \"../components/templateMovieListPage\";\r\n\r\nconst FavouriteMoviesPage: React.FC= () => {\r\n    const toDo = () => true;\r\n    // Get movies from local storage.\r\n    const movies = JSON.parse(localStorage.getItem(\"favourites\") || '[]');\r\n  \r\n    return (\r\n      <PageTemplate\r\n        title=\"Favourite Movies\"\r\n        movies={movies}\r\n        selectFavourite={toDo}\r\n      />\r\n    );\r\n}\r\n\r\nexport default FavouriteMoviesPage\r\n```\r\nIn the browser, go to the Home page and tag some movies as your favourites. Then use the navigation links at the top to navigate to the favourites page:\r\n\r\n![][favpage]\r\n\r\nThere is another known bug in our app; the movies listed on the 'Favourite Movie' pages each have an 'Add to Favourites' icon. This label is not meaningful. We will change it to a 'Delete' icon to mean remove from the favourites, but that's for a future lab.\r\n\r\n### Separation of Concerns principle.\r\n\r\nHaving HTTP fetching code mixed in with UI component code is considered a poor separation of concerns. Create a new file `src/api/tmdb-api.ts` and add the following:\r\n\r\n```tsx\r\nexport const getMovies = () => {\r\n    return fetch(\r\n      `https://api.themoviedb.org/3/discover/movie?api_key=${import.meta.env.VITE_TMDB_KEY}&language=en-US&include_adult=false&page=1`\r\n    )\r\n      .then(res => res.json())\r\n      .then(json => json.results);\r\n  };\r\n  \r\n  export const getMovie = ( id : string) => {\r\n    return fetch(\r\n      `https://api.themoviedb.org/3/movie/${id}?api_key=${import.meta.env.VITE_TMDB_KEY}`\r\n    ).then(res => res.json());\r\n  };\r\n  \r\n  export const getGenres = () => {\r\n    return fetch(\r\n      \"https://api.themoviedb.org/3/genre/movie/list?api_key=\" +\r\n        import.meta.env.VITE_TMDB_KEY +\r\n        \"&language=en-US\"\r\n    )\r\n      .then(res => res.json())\r\n      .then(json => json.genres);\r\n  };\r\n  \r\n   export const getMovieImages = ( id : string | number) => {\r\n    return fetch(\r\n      `https://api.themoviedb.org/3/movie/${id}/images?api_key=${import.meta.env.VITE_TMDB_KEY}`\r\n    )\r\n      .then((res) => res.json())\r\n      .then((json) => json.posters);\r\n  };\r\n```\r\nIn `pages/homePage.tsx` make the following changes:\r\n\r\n- add an import:\r\n```tsx\r\nimport { getMovies } from \"../api/tmdb-api\";\r\n```\r\n- replace the useEffect code with the following:\r\n```tsx\r\n useEffect(() => {\r\n    getMovies().then(movies => {\r\n      setMovies(movies);\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n```\r\nIn `pages/movieDetailsPage.tsx` make similar changes:\r\n\r\n- add an import:\r\n```tsx\r\nimport { getMovie, getMovieImages } from \"../api/tmdb-api\";\r\n```\r\n\r\n- replace the two useEffects with the following:\r\n```tsx\r\n  useEffect(() => {\r\n    getMovie(id ?? \"\").then((movie) => {\r\n      setMovie(movie);\r\n    });\r\n  }, [id]);\r\n\r\n  useEffect(() => {\r\n    getMovieImages(id ?? \"\").then((images) => {\r\n      setImages(images);\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n```\r\nFinally, in `components/filterMoviesCard/index.jsx`:\r\n\r\n- add an import:\r\n```tsx\r\nimport { getGenres } from \"../../api/tmdb-api\";\r\n```\r\n- replace the useEffect code with:\r\n```tsx\r\n  useEffect(() => {\r\n    getGenres().then((allGenres) => {\r\n      setGenres([genres[0], ...allGenres]);\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n```\r\nThe app functionality should all work as before.\r\n\r\nCommit this work to the repository:\r\n~~~\r\n$ git add -A\r\n$ git commit -m \"Refactor: Template list page; HTTP API calls centralised.\"\r\n$ git push origin master\r\n~~~\r\n\r\n[favpage]: ./img/favpage.png\r\n","route":"/lab/{{COURSEURL}}/topic06/book-1/Refactoring","id":"Refactoring","type":"step"},{"title":" Exercise.","shortTitle":"Exercise","contentMd":"## Exercise.\r\n\r\nObjective: In the Movie Details page, display the red heart icon in the page header if the movie was tagged as a favourite.\r\n\r\n![][exercise]\r\n\r\nBe aware that your solution can only work partially as expected due to the deficiencies in the favourite tagging logic explained earlier. Test your solution with the following process:\r\n\r\n1. Go to the home page.\r\n1. Tag a movie as a favourite.\r\n1. Navigate to that movie's details page by using the 'More Info' link. The red heart should appear in the page header.\r\n1. Navigate back to the home page. The tagged favourite is no longer selected.\r\n\r\n[Hint: The only file you need to edit to complete this exercise is `components/headerMovie/index.js. The movies tagged as favourites are stored in localstorage, which any component can be access.]\r\n\r\nOn completion, commit the changes:\r\n~~~bash\r\n$ git add -A\r\n$ git commit -m \"Exercise - Show favourite icon on Movie Details page..\"\r\n$ git push origin master\r\n~~~\r\n\r\n[exercise]: ./img/exercise.png","route":"/lab/{{COURSEURL}}/topic06/book-1/Exercise","id":"Exercise","type":"step"}]},{"route":"/lab/{{COURSEURL}}/topic06/book-3","type":"lab","title":"Resources","summary":"## Resources.\r","contentMd":"\r\n## Resources.\r\n\r\n and TSTopUp, routingSamples, and renderPropDemo examples from lecture - React + TypeScript + Vite.\r\n\r\nDownload and unzip [this archive][code]\r\n\r\n\r\n\r\n## Install & Run\r\n\r\nIn the root directory, run:\r\n\r\n```bash\r\nnpm install\r\nnpm run dev\r\n```\r\n\r\n\r\n\r\n\r\n[code]: ./archives/archive.zip\r\n","frontMatter":{},"id":"book-3","img":"https://{{COURSEURL}}/topic06/book-3/img/main.jpg","imgFile":"img/main.jpg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"title":"","shortTitle":"Resources","contentMd":"\r\n## Resources.\r\n\r\n and TSTopUp, routingSamples, and renderPropDemo examples from lecture - React + TypeScript + Vite.\r\n\r\nDownload and unzip [this archive][code]\r\n\r\n\r\n\r\n## Install & Run\r\n\r\nIn the root directory, run:\r\n\r\n```bash\r\nnpm install\r\nnpm run dev\r\n```\r\n\r\n\r\n\r\n\r\n[code]: ./archives/archive.zip\r\n","route":"/lab/{{COURSEURL}}/topic06/book-3/Resources","id":"Resources","type":"step"}]},{"route":"/archive/{{COURSEURL}}/topic06/archive","type":"archive","title":"Resources.\r","summary":"Includes the routing samples, Render Prop demo, and ES6 samples.","contentMd":"Resources.\r\n\r\nIncludes the routing samples, Render Prop demo, and ES6 samples.\r\n","frontMatter":{},"id":"archive","img":"https://{{COURSEURL}}/topic06/archive/archive.jpg","imgFile":"archive.jpg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"archiveFile":"archive.zip"}]},{"route":"/topic/{{COURSEURL}}/topic06-legacy","type":"topic","title":"  React: Design and Routing.\r","summary":"Examine some further aspects of routing and design patterns in React app development.","contentMd":"#  React: Design and Routing.\r\n \r\nExamine some further aspects of routing and design patterns in React app development.","frontMatter":{},"id":"topic06-legacy","img":"https://{{COURSEURL}}/topic06-legacy/topic.png","imgFile":"topic.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":true,"los":[{"route":"/talk/{{COURSEURL}}/topic06-legacy/talk-1","type":"talk","title":" React: Navigation and Design patterns\r","summary":"Some further navigation and design techniques.","contentMd":"# React: Navigation and Design patterns\r\n \r\nSome further navigation and design techniques.","frontMatter":{},"id":"talk-1","img":"https://{{COURSEURL}}/topic06-legacy/talk-1/Design.png","imgFile":"Design.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"pdf":"https://{{COURSEURL}}/topic06-legacy/talk-1/Design.pdf","pdfFile":"Design.pdf"},{"route":"/lab/{{COURSEURL}}/topic06-legacy/book-1","type":"lab","title":"Lab-Movie_App-Part3","summary":"In this lab, we tackle the third development iteration of the Movies Fan app. \r","contentMd":"# Developing a Movies Fan App - Part 3.\r\n\r\nIn this lab, we tackle the third development iteration of the Movies Fan app. \r\n\r\nFrom the feature list mentioned in Part 1 of this series, we will now implement the following:\r\n\r\n+ In the Movie details page, the user can optionally show an excerpt from published critic reviews.\r\n+ Clicking the 'More' link on a review excerpt will display the full review text on a separate page.\r\n+ A more professional-styled site header is added.\r\n\r\nWe will use two new React coding techniques in the implementation:\r\n\r\n+ A Component composition pattern.\r\n+ Custom hooks.\r\n\r\nAlso, we will utilize the Extended Link routing featured.\r\n\r\n","frontMatter":{},"id":"book-1","img":"https://{{COURSEURL}}/topic06-legacy/book-1/img/main.jpg","imgFile":"img/main.jpg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"title":" Developing a Movies Fan App - Part 3.","shortTitle":"Lab-Movie_App-Part3","contentMd":"# Developing a Movies Fan App - Part 3.\r\n\r\nIn this lab, we tackle the third development iteration of the Movies Fan app. \r\n\r\nFrom the feature list mentioned in Part 1 of this series, we will now implement the following:\r\n\r\n+ In the Movie details page, the user can optionally show an excerpt from published critic reviews.\r\n+ Clicking the 'More' link on a review excerpt will display the full review text on a separate page.\r\n+ A more professional-styled site header is added.\r\n\r\nWe will use two new React coding techniques in the implementation:\r\n\r\n+ A Component composition pattern.\r\n+ Custom hooks.\r\n\r\nAlso, we will utilize the Extended Link routing featured.\r\n\r\n","route":"/lab/{{COURSEURL}}/topic06-legacy/book-1/Lab-Movie_App-Part3","id":"Lab-Movie_App-Part3","type":"step"},{"title":" Movie Reviews.","shortTitle":"MovieReviews","contentMd":"## Movie Reviews.\r\n\r\nIn the Movie Details page, we optionally want to list an extract from each related critic review. The list will appear by clicking a 'floating action' button ([read more](https://material-ui.com/components/floating-action-button/)).\r\n\r\n![][fab]\r\n\r\nThe Material design Drawer component ([read more](https://material-ui.com/components/drawers/)) is used as a side sheet to display the extracts.\r\n\r\n![][extracts]\r\n\r\nEach extract has a 'Full Review' link which will display the full review text on a separate page:\r\n\r\n![][review]\r\n\r\n### Refactoring.\r\n\r\nNotice that both of the above pages have the same layout. We should refactor the current code to avail of this similarity, i.e. reusability. This time we realise reusability by using component composition based on the _container_ pattern.\r\n\r\nCreate the file `src/components/templateMoviePage/index.tsx` and add the following code:\r\n\r\n```tsx\r\nimport React, { useState, useEffect } from \"react\";\r\nimport MovieHeader from \"../headerMovie\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport ImageList from \"@mui/material/ImageList\";\r\nimport ImageListItem from \"@mui/material/ImageListItem\";\r\nimport { getMovieImages } from \"../../api/tmdb-api\";\r\nimport { MovieImage, MovieT } from \"../../types/interfaces\";\r\n\r\nconst styles = {\r\n    gridListRoot: {\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\",\r\n        justifyContent: \"space-around\",\r\n    },\r\n    gridListTile: {\r\n        width: 450,\r\n        height: '100vh',\r\n    },\r\n};\r\n\r\ninterface TemplateMoviePageProps {\r\n    movie: MovieT;\r\n    children: React.ReactElement;\r\n}\r\n\r\n\r\nconst TemplateMoviePage: React.FC<TemplateMoviePageProps> = (props) => {\r\n    const [images, setImages] = useState([]);\r\n    const { movie, children } = props;\r\n\r\n    useEffect(() => {\r\n        getMovieImages(movie.id).then((images) => {\r\n            setImages(images);\r\n        });\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <MovieHeader {...movie} />\r\n\r\n            <Grid container spacing={5} style={{ padding: \"15px\" }}>\r\n                <Grid item xs={3}>\r\n                    <div>\r\n                        <ImageList cols={1}>\r\n                            {images.map((image: MovieImage) => (\r\n                                <ImageListItem\r\n                                    key={image.file_path}\r\n                                    sx={styles.gridListTile}\r\n                                    cols={1}\r\n                                >\r\n                                    <img\r\n                                        src={`https://image.tmdb.org/t/p/w500/${image.file_path}`}\r\n                                        alt={'Image alternative'}\r\n                                    />\r\n                                </ImageListItem>\r\n                            ))}\r\n                        </ImageList>\r\n                    </div>\r\n                </Grid>\r\n\r\n                <Grid item xs={9}>\r\n                    {children}\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TemplateMoviePage;\r\n```\r\nThe vast majority of the above code is lifted from the current movie Details page. Notice the reference to _children_ in the template component's set of props. We use it in the body of the TSX:\r\n\r\n```tsx\r\n    <Grid item xs={9}>\r\n      {children}\r\n    </Grid>\r\n```\r\nThe children prop provides the opportunity to perform component composition. At runtime, 'children' will be bound to the element/component provided by the template's consumer, i.e. the Movie Details page component, for example. In `src/pages/movieDetailsPage.tsx`, replace the entire content with the following:\r\n\r\n```tsx\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport MovieDetails from \"../components/movieDetails\";\r\nimport PageTemplate from \"../components/templateMoviePage\";\r\nimport { getMovie } from \"../api/tmdb-api\";\r\n\r\nconst MovieDetailsPage = (props) => {\r\n  const { id } = useParams();\r\n  const [movie, setMovie] = useState(null);\r\n\r\n  useEffect(() => {\r\n    getMovie(id).then((movie) => {\r\n      setMovie(movie);\r\n    });\r\n  }, [id]);\r\n\r\n  return (\r\n    <>\r\n      {movie ? (\r\n        <>\r\n          <PageTemplate movie={movie}>\r\n            <MovieDetails movie={movie} />\r\n          </PageTemplate>\r\n        </>\r\n      ) : (\r\n        <p>Waiting for movie details</p>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MovieDetailsPage;\r\n```\r\n\r\nThe effect of the above code is the _children_ prop of TemplateMoviePage is bound to:\r\n\r\n```tsx\r\n<MovieDetails movie={movie} />\r\n```\r\nA common source of errors with React apps is a component/page renders __before__ the data it needs is retrieved from the backend API - the initial rendering happens before the useEffect hook completes. This scenario applies to MovieDetailsPage. The solution is to have a condition test in the JSX code that checks the availability of the API data. If available, it displays it, otherwise an appropriate message displays. In the above code, the ternary operator performs the condition test.\r\n~~~tsx\r\n   movie ? display data : display message\r\n~~~\r\nNote, we initialise the movie state variable to null (boolean false), but eventually, it is assigned to an object (boolean true)\r\n\r\nIn the browser, check the movie details page renders as before.\r\n\r\n### Showing movie reviews.\r\n\r\nWe will develop the code for this feature from the ground up, starting with the API call. \r\nIn `src/types/interfaces.ts`, add the following interface:\r\n\r\n```tsx\r\n  export interface Review{\r\n    id: string;\r\n    content: string\r\n    author: string\r\n  }\r\n  ```\r\n\r\nIn `src/api/tmdb-api.ts`, add a new function at the bottom:\r\n\r\n```tsx\r\n  export const getMovieReviews = (id: string | number) => {\r\n    return fetch(\r\n      `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${import.meta.env.VITE_TMDB_KEY}`\r\n    )\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        // console.log(json.results);\r\n        return json.results;\r\n      });\r\n  };\r\n```\r\nCreate the file `src/components/movieReviews/index.tsx`. It displays review extracts in a table layout, as follows:\r\n\r\n```tsx\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getMovieReviews } from \"../../api/tmdb-api\";\r\nimport { excerpt } from \"../../util\";\r\n\r\nimport { MovieT, Review } from \"../../types/interfaces\"; // Import the MovieT type from the appropriate location\r\n\r\nconst styles = {\r\n    table: {\r\n        minWidth: 550,\r\n    },\r\n};\r\n\r\nconst MovieReviews: React.FC<MovieT> = (props) => { // Use the MovieT type in the function signature\r\n    const [reviews, setReviews] = useState([]);\r\n\r\n    const movie = props;\r\n    useEffect(() => {\r\n        getMovieReviews(movie.id).then((reviews) => {\r\n            setReviews(reviews);\r\n        });\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table sx={styles.table} aria-label=\"reviews table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell >Author</TableCell>\r\n                        <TableCell align=\"center\">Excerpt</TableCell>\r\n                        <TableCell align=\"right\">More</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {reviews.map((r: Review) => (\r\n                        <TableRow key={r.id}>\r\n                            <TableCell component=\"th\" scope=\"row\">\r\n                                {r.author}\r\n                            </TableCell>\r\n                            <TableCell >{excerpt(r.content)}</TableCell>\r\n                            <TableCell >\r\n                                <Link\r\n                                    to={`/reviews/${r.id}`}\r\n                                    state={{\r\n                                        review: r,\r\n                                        movie: movie,\r\n                                    }}\r\n                                >\r\n                                    Full Review\r\n                                </Link>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n\r\nexport default MovieReviews;\r\n```\r\nThe above component maps over the array of reviews retrieved from the API. Some points to note about the code:\r\n\r\n- Each review in the table has a hyperlink to navigate to a 'full review' page.\r\n- The hyperlinks use the extended option of the React Router Link component. It allows us to pass two props (movie and review) to the movie review page component - yet to be developed.\r\n- We are using a utility function to truncate a review's text. Create the file `src/util.ts` and add this utility function:\r\n\r\n````tsx\r\nimport truncate from \"lodash/truncate\";\r\n\r\nexport function excerpt(string: string) {\r\n  return truncate(string, {    \r\n    length: 400, // maximum 400 characters\r\n    separator: /,?\\.* +/, // separate by spaces, including preceding commas and periods\r\n  });\r\n}\r\n```\r\nWe will use the Material Ui Drawer component to connect the MovieReviews component to the Movie Details page. In `components/movieDetails/index.tsx`, replace the content with the following:\r\n\r\n```\r\nimport React, { useState } from \"react\";\r\nimport Chip from \"@mui/material/Chip\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport AccessTimeIcon from \"@mui/icons-material/AccessTime\";\r\nimport MonetizationIcon from \"@mui/icons-material/MonetizationOn\";\r\nimport StarRate from \"@mui/icons-material/StarRate\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { MovieT } from \"../../types/interfaces\";\r\nimport NavigationIcon from \"@mui/icons-material/Navigation\";\r\nimport Fab from \"@mui/material/Fab\";\r\nimport Drawer from \"@mui/material/Drawer\";\r\nimport MovieReviews from '../movieReviews'\r\n\r\nconst styles = {\r\n    chipSet: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        flexWrap: \"wrap\",\r\n        listStyle: \"none\",\r\n        padding: 1.5,\r\n        margin: 0,\r\n    },\r\n    chipLabel: {\r\n        margin: 0.5,\r\n    },\r\n    fab: { \r\n      position: \"fixed\",\r\n      top: 50,\r\n      right: 2,\r\n    },\r\n};\r\n\r\nconst MovieDetails: React.FC<MovieT> = (props) => {\r\n  const movie=props;\r\n  const [drawerOpen, setDrawerOpen] = useState(false); // New\r\n\r\n    return (\r\n        <>\r\n            <Typography variant=\"h5\" component=\"h3\">\r\n                Overview\r\n            </Typography>\r\n\r\n            <Typography variant=\"h6\" component=\"p\">\r\n                {movie.overview}\r\n            </Typography>\r\n\r\n            <Paper component=\"ul\" sx={styles.chipSet}>\r\n                <li>\r\n                    <Chip label=\"Genres\" sx={styles.chipLabel} color=\"primary\" />\r\n                </li>\r\n                {movie.genres.map((g) => (\r\n                    <li key={g.name}>\r\n                        <Chip label={g.name} />\r\n                    </li>\r\n                ))}\r\n            </Paper>\r\n            <Paper component=\"ul\" sx={styles.chipSet}>\r\n                <Chip icon={<AccessTimeIcon />} label={`${movie.runtime} min.`} />\r\n                <Chip\r\n                    icon={<MonetizationIcon />}\r\n                    label={`${movie.revenue.toLocaleString()}`}\r\n                />\r\n                <Chip\r\n                    icon={<StarRate />}\r\n                    label={`${movie.vote_average} (${movie.vote_count}`}\r\n                />\r\n                <Chip label={`Released: ${movie.release_date}`} />\r\n            </Paper>\r\n            <Fab    \r\n        color=\"secondary\"\r\n        variant=\"extended\"\r\n        onClick={() =>setDrawerOpen(true)}\r\n        sx={styles.fab}\r\n      >\r\n        <NavigationIcon />\r\n        Reviews\r\n      </Fab>\r\n      <Drawer anchor=\"top\" open={drawerOpen} onClose={() => setDrawerOpen(false)}>\r\n        <MovieReviews {...movie} />\r\n      </Drawer>\r\n        </>\r\n    );\r\n};\r\nexport default MovieDetails;\r\n```\r\nA Drawer component is either visible (open) or hidden. We control this with a boolean state variable - drawerOpen.\r\n\r\nIn the browser:\r\n\r\n1. Go to the home page.\r\n1. Click any movie's 'More Info' button.\r\n1. Click the 'Reviews' button on the movie details page. [Some movies have no reviews, so choose another movie.]\r\n1. The review extracts should overlay the top part of the page.\r\n\r\n![][extracts]\r\n\r\nBefore continuing, update the git repository as follows:\r\n\r\n```\r\n$ git add -A\r\n$ git commit -m \"Show movie review excerpts; Refactor Details page.\"\r\n$ git push origin master\r\n```\r\n\r\n[extracts]: ./img/extracts.png\r\n[review]: ./img/review.png\r\n[fab]: ./img/fab.png\r\n[reviews]: ./img/reviews.png\r\n","route":"/lab/{{COURSEURL}}/topic06-legacy/book-1/MovieReviews","id":"MovieReviews","type":"step"},{"title":" Full Review Page.","shortTitle":"FullReviewPage","contentMd":"## Full Review Page.\r\n\r\nWe can now develop a page that displays the full text of a movie review. Create the file `src/components/movieReview/index.tsx` and add this code:\r\n\r\n```tsx\r\nimport React from \"react\";\r\nimport { Review } from \"../../types/interfaces\";\r\n\r\nconst MovieReview: React.FC<Review> =  (props) => {\r\n  return (\r\n    <>\r\n      <p>Review By: {props.author} </p>\r\n      <p>{props.content} </p>\r\n    </>\r\n  );\r\n};\r\nexport default MovieReview\r\n```\r\n\r\nCreate the file `src/pages/movieReviewPage.tsx` and add this code:\r\n\r\n```tsx\r\nimport React from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport PageTemplate from \"../components/templateMoviePage\";\r\nimport MovieReview from \"../components/movieReview\";\r\n\r\nconst MovieReviewPage: React.FC = () => {\r\n  const { state : {movie, review } } = useLocation()\r\n  return (\r\n    <PageTemplate movie={movie}>\r\n      <MovieReview {...review} />\r\n    </PageTemplate>\r\n  );\r\n};\r\n\r\nexport default MovieReviewPage;\r\n```\r\n\r\nThis full review page is rendered when the user clicks a review excerpt's 'Full Review' link. The useLocation hook used above returns the new 'state' of the browser's URL address after a link is clicked. As explained in the previous section, the state includes two object references - movie and review. Our code uses destructuring to access these references. Also, we use component composition above, this time between the template and the MovieReview components.\r\n\r\nThe final step is to add a route for the new page to `src/index.tsx`, as follows:\r\n\r\n+ Add an import at the top:\r\n\r\n```tsx\r\nimport MovieReviewPage from \"./pages/movieReviewPage\";\r\n```\r\n\r\n+ Add a new route:\r\n\r\n```tsx\r\n<Routes>\r\n    <Route path=\"/reviews/:id\" element={<MovieReviewPage/>} />\r\n    . . . other routes . . .\r\n</Routes>\r\n```\r\n\r\nIn the browser:\r\n\r\n1. Go to the home page and click on a movie.\r\n1. On the movie details page, click the Reviews button. \r\n1. Click the 'Full Review' link of one of the review excerpts.\r\n\r\nUpdate the git repository as follows:\r\n\r\n```\r\n$ git add -A\r\n$ git commit -m \"Full review page.\"\r\n$ git push origin master\r\n```\r\n\r\n[freview]: ./img/review.png\r\n","route":"/lab/{{COURSEURL}}/topic06-legacy/book-1/FullReviewPage","id":"FullReviewPage","type":"step"},{"title":" Custom hooks (Basic).","shortTitle":"CustomHooks","contentMd":"## Custom hooks (Basic).\r\n\r\nCustom hooks allow us to extract component state logic into reusable functions. As an example, we will define a custom hook that manages a movie object state variable. Create the file `src/hooks/useMovie.ts` and add this code:\r\n\r\n```ts\r\nimport { useEffect, useState } from \"react\";\r\nimport { getMovie } from '../api/tmdb-api'\r\nimport { MovieT } from '../types/interfaces'\r\n\r\nconst useMovie = (id: string) => {\r\n    const [movie, setMovie] = useState<MovieT>();\r\n    useEffect(() => {\r\n        getMovie(id).then(movie => {\r\n            setMovie(movie);\r\n        });\r\n    }, [id]);\r\n    return [movie, setMovie];\r\n};\r\n\r\nexport default useMovie\r\n```\r\nThe above declaration is not a component, it's just an ordinary Typescipt function.\r\n\r\nTo use our custom hook, in `pages/movieDetailsPage.tsx`, replace the entire content with the following:\r\n\r\n```tsx\r\nimport React from \"react\"; // replace existing react import\r\nimport { useParams } from \"react-router-dom\";\r\nimport MovieDetails from \"../components/movieDetails\";\r\nimport { MovieT} from \"../types/interfaces\";\r\nimport PageTemplate from \"../components/templateMoviePage\";\r\nimport useMovie from \"../hooks/useMovie\";\r\n\r\nconst MovieDetailsPage: React.FC= () => {\r\n  const { id } = useParams();\r\n  const [movie] = useMovie(id ?? \"\");\r\n\r\n  return (\r\n    <>\r\n      {movie ? (\r\n        <>\r\n        <PageTemplate movie={movie as MovieT}> \r\n          <MovieDetails {...movie as MovieT} />\r\n        </PageTemplate>\r\n      </>\r\n    ) : (\r\n      <p>Waiting for movie details</p>\r\n    )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MovieDetailsPage;\r\n```\r\n\r\nThis page component no longer has the useState and useEffect hooks; they have moved to our custom hook. Check the page still works.\r\n\r\nCommit this work:\r\n\r\n```\r\n$ git add -A\r\n$ git commit -m \"Refactor - useMovie custom hook.\"\r\n$ git push origin master\r\n```\r\n","route":"/lab/{{COURSEURL}}/topic06-legacy/book-1/CustomHooks","id":"CustomHooks","type":"step"},{"title":" Site Header.","shortTitle":"SiteHeader","contentMd":"## Site Header.\r\n\r\nWe need a more professional-looking site header for the app,\r\n\r\n![][newheader]\r\n\r\nThere are some extra dummy navigation options on the right for demonstration purposes. We will also use the header to demonstrate responsiveness using the Material UI library. The objective is to replace the list of navigation links on the right with a drop-down menu:\r\n\r\n![][responsive]\r\n\r\nCreate the file `src/components/siteHeader/index.tsx` and add this code:\r\n\r\n```tsx\r\nimport React, { useState, MouseEvent } from \"react\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport MenuIcon from \"@mui/icons-material/Menu\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport Menu from \"@mui/material/Menu\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\r\n\r\nconst styles = {\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  appbar: {\r\n    // background: 'none',\r\n  },\r\n  // offset: theme.mixins.toolbar,\r\n};\r\n\r\nconst Offset = styled(\"div\")(({ theme }) => theme.mixins.toolbar);\r\n\r\nconst SiteHeader: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement|null>(null);\r\n  const open = Boolean(anchorEl);\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down(\"lg\"));\r\n\r\n  const menuOptions = [\r\n    { label: \"Home\", path: \"/\" },\r\n    { label: \"Favorites\", path: \"/movies/favourites\" },\r\n    { label: \"Option 3\", path: \"/\" },\r\n    { label: \"Option 4\", path: \"/\" },\r\n  ];\r\n\r\n  const handleMenuSelect = (pageURL: string) => {\r\n    navigate(pageURL);\r\n  };\r\n\r\n  const handleMenu = (event: MouseEvent<HTMLButtonElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AppBar sx={styles.appbar} position=\"fixed\" elevation={0} color=\"primary\">\r\n        <Toolbar>\r\n          <Typography variant=\"h4\" sx={styles.title}>\r\n            TMDB Client\r\n          </Typography>\r\n          <Typography variant=\"h6\" sx={styles.title}>\r\n            All you ever wanted to know about Movies!\r\n          </Typography>\r\n          {isMobile ? (\r\n            <>\r\n              <IconButton\r\n                aria-label=\"menu\"\r\n                aria-controls=\"menu-appbar\"\r\n                aria-haspopup=\"true\"\r\n                onClick={handleMenu}\r\n                color=\"inherit\"\r\n                size=\"large\"\r\n              >\r\n                <MenuIcon />\r\n              </IconButton>\r\n              <Menu\r\n                id=\"menu-appbar\"\r\n                anchorEl={anchorEl}\r\n                anchorOrigin={{\r\n                  vertical: \"top\",\r\n                  horizontal: \"right\",\r\n                }}\r\n                keepMounted\r\n                transformOrigin={{\r\n                  vertical: \"top\",\r\n                  horizontal: \"right\",\r\n                }}\r\n                open={open}\r\n                onClose={() => setAnchorEl(null)}\r\n              >\r\n                {menuOptions.map((opt) => (\r\n                  <MenuItem\r\n                    key={opt.label}\r\n                    onClick={() => handleMenuSelect(opt.path)}\r\n                  >\r\n                    {opt.label}\r\n                  </MenuItem>\r\n                ))}\r\n              </Menu>\r\n            </>\r\n          ) : (\r\n            <>\r\n              {menuOptions.map((opt) => (\r\n                <Button\r\n                  key={opt.label}\r\n                  color=\"inherit\"\r\n                  onClick={() => handleMenuSelect(opt.path)}\r\n                >\r\n                  {opt.label}\r\n                </Button>\r\n              ))}\r\n            </>\r\n          )}\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Offset />\r\n\r\n      {/* <div className={classes.offset} /> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SiteHeader;\r\n```\r\nThe site header is permanent across all pages. \r\nMake the following changes to `src/index.jsx` to use the headers:\r\n\r\n- Add an import at the top:\r\n\r\n```tsx\r\nimport SiteHeader from './components/siteHeader'\r\n```\r\n- Replace the current site header code with a reference to the new component, as outlined below:\r\n\r\n```\r\nconst App = () => {\r\n  return (\r\n      <BrowserRouter>\r\n          <SiteHeader />      {/* New Header  */}\r\n          <Routes>\r\n             . . . as before . . . .\r\n```\r\n+ Remove the import of the Link component.\r\n\r\nCheck in the browser that the new header renders correctly.\r\n\r\nSome comments on the SiteHeader component:\r\n\r\n- Material Ui allow us to define a style theme for the app which all components inherit - it provides a default if none is declared. The useTheme hook gives components access to the theme.\r\n- Material UI provides the useMediaQuery hook to simplify the implementation of media queries, i.e. to query properties of the browser/device running the app. We are querying the browser's viewport dimensions, checking if they are in the medium (md) or smaller category - a mobile device.\r\n>>>const isMobile = useMediaQuery(theme.breakpoints.down(\"md\"))\r\n- The Theme object includes helper methods that generate the query string necessary to express the media query, \r\n\r\n>>>e.g. theme.breakpoints.down(). \r\n\r\n- When the browser/device is a mobile type, the site header should render the drop-down menu; otherwise, the standard navigation links should render. \r\n- The code for the drop-down menu is based on a solution from the documentation - see [here](https://material-ui.com/components/menus/)\r\n\r\nCommit this work:\r\n\r\n```\r\n$ git add -A\r\n$ git commit -m \"Change site header.\"\r\n$ git push origin master\r\n```\r\n\r\n\r\n[newheader]: ./img/newheader.png\r\n[responsive]: ./img/responsive.png\r\n","route":"/lab/{{COURSEURL}}/topic06-legacy/book-1/SiteHeader","id":"SiteHeader","type":"step"},{"title":" Exercise.","shortTitle":"Exercise","contentMd":"## Exercise.\r\n\r\nTMDB has several **endpoints** for requesting data. We have already used four: Discover, Movies, Genres, and Reviews. The Movies endpoint has several query options; for example, 'upcoming' will returns a list of movies that will soon appear in cinemas - see more [here][endpoint]). According to the TMDB documentation, the upcoming movies endpoint URL is:\r\n\r\n>> https://api.themoviedb.org/3/movie/upcoming?api_key=...your-key...&language=en-US&page=1\r\n\r\n**You are required** to add a new page to the app which displays a list of upcoming movies. \r\nThe new page's URL should be '/movies/upcoming', and the page's layout should closely mirror that of the home page. The site header should include a navigation link to this page:\r\n\r\n![][upcoming]\r\n\r\n[Note, there may be some overlap between the movies in the upcoming list and the discover list (the home page). This overlap is normal for TMDB.]\r\n\r\nOn completing the exercise, update the git repository:\r\n\r\n```\r\n$ git add -A\r\n$ git commit -m \"Added Upcoming movies page.\"\r\n$ git push origin master\r\n```\r\n\r\n[endpoint]: https://developers.themoviedb.org/3/movies/get-upcoming\r\n[upcoming]: ./img/upcoming.png\r\n[discover]: ./img/discover.png\r\n[favorites]: ./img/favorites.png\r\n","route":"/lab/{{COURSEURL}}/topic06-legacy/book-1/Exercise","id":"Exercise","type":"step"},{"title":" Advanced Custom hook.","shortTitle":"AdvancedCustomHook","contentMd":"## Advanced Custom hook.\r\n\r\nFiltering is a feature provided by our app. It has some associated state and could also be required by other types of data lists, e.g. list of actors; list of TV series. We could encapsulate this logic in a custom hook, thereby adhering to the DRY (Don't repeat yourself) software design principle. The hook needs to be generic - it should deal with different data types. The hook's inputs will include:\r\n+ The list to be filtered, e.g. movies.\r\n+ The set of filters to apply to the list. Each filter will declare:\r\n    1. The condition to determine the elements of the list to include in the result, e.g. movie belongs to a particular genre.\r\n    1. The initial value for the filter condition, e.g. All genres. The user can change this and it will cause the hook to re-execute.\r\n\r\nThe hook returns:\r\n+ The current filter values.\r\n+ A setter method to change the filter values.\r\n+ The function that a component calls when it wants to perform filtering. The hook constructs this function dynamically, and recomputes it every time the user changes a filter value, e.g. changes the genre selection to Crime.\r\n\r\nCreate the file `src/hooks/useFiltering.js`, and add the following code:\r\n~~~tsx\r\nimport { useState } from \"react\";\r\n \r\nconst useFiltering = (data, filters) => {\r\n  const [filterValues, setFilterValues] = useState(() => {\r\n    const filterInitialValues = filters.map((f) => ({\r\n      name: f.name,\r\n      value: f.value,\r\n    }));\r\n    return filterInitialValues;\r\n  });\r\n\r\n  const filteringConditions = filters.map((f) => f.condition);\r\n  const filterFunction = (collection) =>\r\n    filteringConditions.reduce((data, conditionFn, index) => {\r\n      return data.filter((item) => {\r\n          return conditionFn(item, filterValues[index].value);\r\n      });\r\n    }, collection);\r\n\r\n  return {\r\n    filterValues,\r\n    setFilterValues,\r\n    filterFunction,\r\n  };\r\n};\r\n\r\nexport default useFiltering;\r\n~~~\r\nWe use the Array.reduce() higher-order function to iterate over a list of filtering conditions (e.g. movie titles with a particular substring). We use a condition to filter over a data array (e.g. array of movies). The reduce returns a function that a component can invoke with the starting data array.\r\n\r\nWe will take this opportunity to refactor the filtering UI code before using the hook. The objective of the refactoring is to allow for other types of filtering in the future. Create the file `components/movieFilterUI/index.tsx` and add this code:\r\n~~~tsx\r\nimport React, { useState } from \"react\";\r\nimport FilterCard from \"../filterMoviesCard\";\r\nimport Fab from \"@mui/material/Fab\";\r\nimport Drawer from \"@mui/material/Drawer\";\r\n\r\nexport const titleFilter = function (movie, value) {\r\n  return movie.title.toLowerCase().search(value.toLowerCase()) !== -1;\r\n};\r\n\r\nexport const genreFilter = function (movie, value) {\r\n  const genreId = Number(value);\r\n  return genreId > 0 ? movie.genre_ids.includes(genreId) : true;\r\n};\r\n\r\nconst styles = {\r\n  root: {\r\n    backgroundColor: \"#bfbfbf\",\r\n  },\r\n  fab: {\r\n    marginTop: 8,\r\n    position: \"fixed\",\r\n    top: 20,\r\n    right: 2,\r\n  },\r\n};\r\n\r\nconst MovieFilterUI = ({ onFilterValuesChange, titleFilter, genreFilter }) => {\r\n  const [drawerOpen, setDrawerOpen] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Fab\r\n        color=\"secondary\"\r\n        variant=\"extended\"\r\n        onClick={() => setDrawerOpen(true)}\r\n        sx={styles.fab}\r\n      >\r\n        Filter\r\n      </Fab>\r\n      <Drawer\r\n        anchor=\"left\"\r\n        open={drawerOpen}\r\n        onClose={() => setDrawerOpen(false)}\r\n      >\r\n        <FilterCard\r\n          onUserInput={onFilterValuesChange}\r\n          titleFilter={titleFilter}\r\n          genreFilter={genreFilter}\r\n        />\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MovieFilterUI;\r\n~~~\r\nIn `components/templateMovieListPage/index.tsx`, replace the entire content with the following - we are removing the filtering UI code from the template:\r\n~~~tsx\r\nimport React from \"react\";\r\nimport Header from \"../headerMovieList\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport MovieList from \"../movieList\";\r\n\r\nconst styles = {\r\n  root: { \r\n    backgroundColor: \"#bfbfbf\",\r\n  }\r\n};\r\n \r\nfunction MovieListPageTemplate({ movies, title, selectFavourite }) {\r\n  return (\r\n    <Grid container sx={styles.root}>\r\n      <Grid item xs={12}>\r\n        <Header title={title} />\r\n      </Grid>\r\n      <Grid item container spacing={5}>\r\n        <MovieList\r\n          selectFavourite={selectFavourite}\r\n          movies={movies}\r\n        ></MovieList>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\nexport default MovieListPageTemplate;\r\n~~~\r\nIn `pages/homePage.tsx`, replace the entire content with the following:\r\n~~~tsx\r\nimport React, { useState, useEffect } from \"react\";\r\nimport PageTemplate from \"../components/templateMovieListPage\";\r\nimport { getMovies } from \"../api/tmdb-api\";\r\nimport useFiltering from \"../hooks/useFiltering\";\r\nimport MovieFilterUI, {\r\n  titleFilter,\r\n  genreFilter,\r\n} from \"../components/movieFilterUI\";\r\n\r\nconst titleFiltering = {\r\n  name: \"title\",\r\n  value: \"\",\r\n  condition: titleFilter,\r\n};\r\nconst genreFiltering = {\r\n  name: \"genre\",\r\n  value: \"0\",\r\n  condition: genreFilter,\r\n};\r\n\r\nconst HomePage = (props) => {\r\n  const [movies, setMovies] = useState([]);\r\n  const favourites = movies.filter((m) => m.favourite);\r\n  const { filterValues, setFilterValues, filterFunction } = useFiltering(\r\n    [],\r\n    [titleFiltering, genreFiltering]\r\n  );\r\n\r\n  localStorage.setItem(\"favourites\", JSON.stringify(favourites));\r\n\r\n  const addToFavourites = (movieId) => {\r\n    const updatedMovies = movies.map((m) =>\r\n      m.id === movieId ? { ...m, favourite: true } : m\r\n    );\r\n    setMovies(updatedMovies);\r\n  };\r\n\r\n  const changeFilterValues = (type, value) => {\r\n    const changedFilter = { name: type, value: value };\r\n    const updatedFilterSet =\r\n      type === \"title\"\r\n        ? [changedFilter, filterValues[1]]\r\n        : [filterValues[0], changedFilter];\r\n    setFilterValues(updatedFilterSet);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getMovies().then((movies) => {\r\n      setMovies(movies);\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const displayedMovies = filterFunction(movies);\r\n\r\n  return (\r\n    <>\r\n      <PageTemplate\r\n        title=\"Discover Movies\"\r\n        movies={displayedMovies}\r\n        selectFavourite={addToFavourites}\r\n      />\r\n      <MovieFilterUI\r\n        onFilterValuesChange={changeFilterValues}\r\n        titleFilter={filterValues[0].value}\r\n        genreFilter={filterValues[1].value}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n~~~\r\nNow check that filtering is working on the home page.\r\n\r\nIn `pages/favooriteMoviesPage.jsx`, replace the entire content with the following: \r\n~~~\r\nimport React from \"react\";\r\nimport PageTemplate from \"../components/templateMovieListPage\";\r\nimport useFiltering from \"../hooks/useFiltering\";\r\nimport MovieFilterUI, {\r\n  titleFilter,\r\n  genreFilter,\r\n} from \"../components/movieFilterUI\";\r\n\r\nconst titleFiltering = {\r\n  name: \"title\",\r\n  value: \"\",\r\n  condition: titleFilter,\r\n};\r\nconst genreFiltering = {\r\n  name: \"genre\",\r\n  value: \"0\",\r\n  condition: genreFilter,\r\n};\r\n\r\nconst FavouriteMoviesPage = (props) => {\r\n  const { filterValues, setFilterValues, filterFunction } = useFiltering(\r\n    [],\r\n    [titleFiltering, genreFiltering]\r\n  );\r\n\r\n  const changeFilterValues = (type, value) => {\r\n    const changedFilter = { name: type, value: value };\r\n    const updatedFilterSet =\r\n      type === \"title\" ? [changedFilter, filterValues[1]] : [filterValues[0], changedFilter];\r\n    setFilterValues(updatedFilterSet);\r\n  };\r\n\r\n  const favouriteMovies = JSON.parse(localStorage.getItem(\"favourites\"));\r\n\r\n  const displayedMovies = filterFunction(favouriteMovies);\r\n\r\n  const toDo = () => true;\r\n\r\n  return (\r\n    <>\r\n      <PageTemplate\r\n        title=\"Favourite Movies\"\r\n        movies={displayedMovies}\r\n        selectFavourite={toDo}\r\n      />\r\n      <MovieFilterUI\r\n        onFilterValuesChange={changeFilterValues}\r\n        titleFilter={filterValues[0].value}\r\n        genreFilter={filterValues[1].value}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FavouriteMoviesPage;\r\n~~~\r\nThe home page and favourite movies page have identical filtering criteria, but this will change later.\r\n\r\nSelect some favourites on the home page and navigate to the favourites page. Try filtering on the Favourites page. Navigating back to the home page will still remove all selected favourites - we will fix this later.\r\n\r\nUpdate the git repository as follows:\r\n\r\n```\r\n$ git add -A\r\n$ git commit -m \"Refactor to allow for new filtering hook, and add the hook.\"\r\n$ git push origin master\r\n```","route":"/lab/{{COURSEURL}}/topic06-legacy/book-1/AdvancedCustomHook","id":"AdvancedCustomHook","type":"step"}]},{"route":"https://www.youtube.com/watch?v=t4ayIdMIu40&list=PLN09doY9z8obW1KDoLO5w6zeXcwCsTi4D&index=9","type":"web","title":"Lecture recording.\r","summary":"React patterns. Navigation. Protected routes..","contentMd":"Lecture recording.\r\n\r\nReact patterns. Navigation. Protected routes..","frontMatter":{},"id":"web-1","img":"https://{{COURSEURL}}/topic06-legacy/web-1/web.png","imgFile":"web.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false}]},{"route":"/topic/{{COURSEURL}}/topic07-legacy","type":"topic","title":"  React Design Routing, and Performance\r","summary":"Continue the explanation of both routing/navigation and design patters.","contentMd":"#  React Design Routing, and Performance\r\n \r\nContinue the explanation of both routing/navigation and design patters. \r\n","frontMatter":{},"id":"topic07-legacy","img":"https://{{COURSEURL}}/topic07-legacy/topic.png","imgFile":"topic.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":true,"los":[{"route":"/talk/{{COURSEURL}}/topic07-legacy/talk-1","type":"talk","title":" Patterns, Routing, and Performance.\r","summary":"Server state caching.","contentMd":"# Patterns, Routing, and Performance.\r\n \r\n Server state caching.","frontMatter":{},"id":"talk-1","img":"https://{{COURSEURL}}/topic07-legacy/talk-1/Design.png","imgFile":"Design.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"pdf":"https://{{COURSEURL}}/topic07-legacy/talk-1/Design.pdf","pdfFile":"Design.pdf"},{"route":"/lab/{{COURSEURL}}/topic07-legacy/book-1","type":"lab","title":"Lab-Movie_App-Part4","summary":"In this lab, we will complete the Movies Fan app.\r","contentMd":"# Developing a Movies Fan App.\r\n\r\nIn this lab, we will complete the Movies Fan app.\r\n\r\nThe only remaining feature is to enable the user to write their review of a favourite movie. Also, there are known bugs identified in the previous lab that we will fix, and we will improve the app's performance by caching the server state.\r\n\r\nThe new React features used in this development iteration include:\r\n\r\n- The Render props pattern.\r\n- The Context API.\r\n- 3rd party hooks, e.g. useForm.\r\n\r\n[Note. in the previous lab, you developed an Upcoming movies page as an exercise. We will temporally break this feature as a result of refactoring done in this lab. However, the exercise at the end will allow you to get it working again.]\r\n ]\r\n","frontMatter":{},"id":"book-1","img":"https://{{COURSEURL}}/topic07-legacy/book-1/img/main.jpeg","imgFile":"img/main.jpeg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"title":" Developing a Movies Fan App.","shortTitle":"Lab-Movie_App-Part4","contentMd":"# Developing a Movies Fan App.\r\n\r\nIn this lab, we will complete the Movies Fan app.\r\n\r\nThe only remaining feature is to enable the user to write their review of a favourite movie. Also, there are known bugs identified in the previous lab that we will fix, and we will improve the app's performance by caching the server state.\r\n\r\nThe new React features used in this development iteration include:\r\n\r\n- The Render props pattern.\r\n- The Context API.\r\n- 3rd party hooks, e.g. useForm.\r\n\r\n[Note. in the previous lab, you developed an Upcoming movies page as an exercise. We will temporally break this feature as a result of refactoring done in this lab. However, the exercise at the end will allow you to get it working again.]\r\n ]\r\n","route":"/lab/{{COURSEURL}}/topic07-legacy/book-1/Lab-Movie_App-Part4","id":"Lab-Movie_App-Part4","type":"step"},{"title":" Server state Caching.","shortTitle":"DataFetching","contentMd":"## Server state Caching.\r\n\r\nShould each component that requires data from the backend/API be responsible for its data fetching?\r\n\r\n+ Ideally, yes, but it should not call the API every time the component is remounted, particularly if the API data changes infrequently. \r\n+ No, if the component must share the data with other sibling components.\r\n\r\nShould we centralizing an app's data management in a high-level component and use props to pass it to subordinates? \r\n\r\n+ Yes, but only when many components use the data - shared data. \r\n\r\nThe problem with re-requesting API data every time a component remounts can be solved by caching. When a component (re)mounts with caching enabled, it first checks the local cache for its API data. If the data is there, it uses it; otherwise, it makes an API call. The react-query library is an excellent implementation of this caching behaviour.\r\n\r\nIn `src/index.jsx`, make the following changes:\r\n\r\n- Add some imports:\r\n~~~\r\nimport { QueryClientProvider, QueryClient } from \"react-query\";\r\nimport { ReactQueryDevtools } from 'react-query/devtools'\r\n~~~\r\n\r\n- Immediately after the import statements, declare the query client (it will manage the cache in the browser):\r\n~~~\r\nconst queryClient = new QueryClient({\r\n  defaultOptions: {\r\n    queries: {\r\n      staleTime: 360000,\r\n      refetchInterval: 360000, \r\n      refetchOnWindowFocus: false\r\n    },\r\n  },\r\n});\r\n~~~\r\n[The above configuration will retain all data in the cache for 1 hour before it becomes invalidated.]\r\n\r\n- Update the App component as follows:\r\n~~~\r\nconst App = () => {\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      <BrowserRouter>\r\n         ..... as before ..... \r\n      </BrowserRouter>\r\n      <ReactQueryDevtools initialIsOpen={false} />\r\n    </QueryClientProvider>\r\n  );\r\n};\r\n~~~\r\nWe will also add a component to display a spinner when the app is waiting for data from TMDB. Create the file `src/components/spinner/index.jsx`:\r\n~~~\r\nimport React from 'react';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\n\r\nconst styles = {\r\n  root: {\r\n    display: 'flex',\r\n    justifyContent: \"center\",\r\n    '& > * + *': {\r\n      marginLeft: 2,\r\n    },\r\n  },\r\n};\r\n\r\nexport default function CircularIndeterminate() {\r\n\r\n  return (\r\n    <div sx={styles.root}>\r\n      <CircularProgress />\r\n      <CircularProgress />\r\n    </div>\r\n  );\r\n}\r\n~~~\r\nWe are now ready to use react-query in components that perform data fetching. We will temporarily break the favourite tagging feature in the process, but in the next section, we rectify the problem.\r\n\r\nIn `src/pages/homePage.jsx`, completely replace the code with the following: \r\n~~~\r\nimport React from \"react\";\r\nimport PageTemplate from \"../components/templateMovieListPage\";\r\nimport { useQuery } from \"react-query\";\r\nimport Spinner from \"../components/spinner\";\r\nimport { getMovies } from \"../api/tmdb-api\";\r\nimport useFiltering from \"../hooks/useFiltering\";\r\nimport MovieFilterUI, {\r\n  titleFilter,\r\n  genreFilter,\r\n} from \"../components/movieFilterUI\";\r\n\r\nconst titleFiltering = {\r\n  name: \"title\",\r\n  value: \"\",\r\n  condition: titleFilter,\r\n};\r\nconst genreFiltering = {\r\n  name: \"genre\",\r\n  value: \"0\",\r\n  condition: genreFilter,\r\n};\r\n\r\nconst HomePage = (props) => {\r\n  const { data, error, isLoading, isError } = useQuery(\"discover\", getMovies);\r\n  const { filterValues, setFilterValues, filterFunction } = useFiltering(\r\n    [],\r\n    [titleFiltering, genreFiltering]\r\n  );\r\n\r\n  if (isLoading) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  if (isError) {\r\n    return <h1>{error.message}</h1>;\r\n  }\r\n\r\n  const changeFilterValues = (type, value) => {\r\n    const changedFilter = { name: type, value: value };\r\n    const updatedFilterSet =\r\n      type === \"title\"\r\n        ? [changedFilter, filterValues[1]]\r\n        : [filterValues[0], changedFilter];\r\n    setFilterValues(updatedFilterSet);\r\n  };\r\n\r\n  const movies = data ? data.results : [];\r\n  const displayedMovies = filterFunction(movies);\r\n\r\n  // Redundant, but necessary to avoid app crashing.\r\n  const favourites = movies.filter((m) => m.favorite);\r\n  localStorage.setItem(\"favourites\", JSON.stringify(favourites));\r\n  const addToFavourites = (movieId) => true;\r\n\r\n  return (\r\n    <>\r\n      <PageTemplate\r\n        title=\"Discover Movies\"\r\n        movies={displayedMovies}\r\n        selectFavourite={addToFavourites}\r\n      />\r\n      <MovieFilterUI\r\n        onFilterValuesChange={changeFilterValues}\r\n        titleFilter={filterValues[0].value}\r\n        genreFilter={filterValues[1].value}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n~~~\r\n[Note: We have temporarily broken the favourites feature; this is fixed in the next section.]\r\n\r\nThe useQuery hook uses the second argument (getMovies) to perform the HTTP request; the first argument is the cache entry key. In `src/api/tmdb-api.js`, change the getMovies function to the following (this was necessitated by the use of react-query) :\r\n~~~\r\nexport const getMovies = () => {\r\n  return fetch(\r\n    `https://api.themoviedb.org/3/discover/movie?api_key=${import.meta.env.VITE_TMDB_KEY}&language=en-US&include_adult=false&include_video=false&page=1`\r\n  ).then((response) => {\r\n    if (!response.ok) {\r\n      throw new Error(response.json().message);\r\n    }\r\n    return response.json();\r\n  })\r\n  .catch((error) => {\r\n     throw error\r\n  });\r\n};\r\n~~~\r\n\r\nStart the development server. Click the react-query icon at the bottom of the screen to\r\n open the DevTools provided by the library:\r\n\r\n![][icon]\r\n\r\nThis allows us to see the state of the cache. Use the Close button to collapse the tool.\r\n\r\n![][cache]\r\n\r\nOpen the browser's own DevTool and select the network tab. Perform the following sequence:\r\n\r\n1. Refresh the Home page in the browser - do not select any favourite.\r\n1. C;ick the Filter floating action button.\r\n1. Navigate to the Favorites page, using the site navigation links (header).\r\n1. Click the Filter floating action button again.\r\n1. Navigate back to the home page using the site header. \r\n1. C;ick the Filter floating action button a third time.\r\n\r\n![][fresh]\r\n\r\nNotice the app did not make a new HTTP call to TMDB for the discover movies. React-query prevented this because it realized it already had the data in its cache, and the data was 'fresh' (up to date). However, it requested the list of genres three times, where once would have been sufficient. Let's fix this. In `src/components/filterMoviesCard/index.jsx`, make the changes shown below:\r\n~~~\r\nimport React from \"react\";  // useState/useEffect redundant \r\n..... other imports ......\r\nimport { useQuery } from \"react-query\";\r\nimport Spinner from '../spinner'\r\n\r\n...... other code .....\r\n\r\nexport default function FilterMoviesCard(props) {\r\n  const { data, error, isLoading, isError } = useQuery(\"genres\", getGenres);\r\n\r\n  if (isLoading) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  if (isError) {\r\n    return <h1>{error.message}</h1>;\r\n  }\r\n  const genres = data.genres;\r\n  if (genres[0].name !== \"All\") {\r\n    genres.unshift({ id: \"0\", name: \"All\" });\r\n  }\r\n\r\n  const handleUserImput = (e, type, value) => {\r\n    e.preventDefault();\r\n    props.onUserInput(type, value); // NEW\r\n  };\r\n\r\n  const handleTextChange = (e, props) => {\r\n    handleUserImput(e, \"title\", e.target.value);\r\n  };\r\n\r\n  const handleGenreChange = (e) => {\r\n    handleUserImput(e, \"genre\", e.target.value);\r\n  };\r\n\r\n  return (\r\n    .... as before .....\r\n  );\r\n}\r\n~~~\r\nIn `src/api/tmdb-api.js`, change the getGenres function to the following:\r\n~~~\r\nexport const getGenres = async () => {\r\n  return fetch(\r\n    \"https://api.themoviedb.org/3/genre/movie/list?api_key=\" +\r\n      import.meta.env.VITE_TMDB_KEY +\r\n      \"&language=en-US\"\r\n  ).then( (response) => {\r\n    if (!response.ok) {\r\n      throw new Error(response.json().message);\r\n    }\r\n    return response.json();\r\n  })\r\n  .catch((error) => {\r\n    throw error\r\n });\r\n};\r\n~~~\r\nRepeat the test sequence detailed above. This time the genre data is fetched only once from TMDB:\r\n\r\n![][once]\r\n\r\nThe cache now has two entries, with the key names 'discover' and 'genres'.\r\n\r\n### Cache keys.\r\nSo far, the cache entry keys have been static strings, e.g. discover. The react-query library also supports 'array keys'. We use these mainly when part of the key is variable, e.g. a movie id. In `src/pages/movieDetailsPage.jsc`, make the following changes:\r\n~~~\r\n.... other imports ....\r\n// import useMovie from \"../hooks/useMovie\";   Redundant\r\nimport { getMovie } from '../api/tmdb-api'\r\nimport { useQuery } from \"react-query\";\r\nimport Spinner from '../components/spinner'\r\n\r\nconst MovieDetailsPage = () => {\r\n  const { id } = useParams();\r\n\r\n  const { data: movie, error, isLoading, isError } = useQuery(\r\n    [\"movie\", { id: id }],\r\n    getMovie\r\n  );\r\n\r\n  if (isLoading) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  if (isError) {\r\n    return <h1>{error.message}</h1>;\r\n  }\r\n\r\n  return (\r\n    .... as before ....\r\n  );\r\n};\r\n\r\nexport default MovieDetailsPage;\r\n~~~\r\nHere the cache entry key is a serializable array - [\"movie\", { id: xxxxx }]. We must pass the variable part of the key (id in this case) to the query function (getMovie) as it uses it in the HTTP call to TMDB. In `src/api/tmdb-api.js`, change the getMovie function to the following:\r\n~~~\r\nexport const getMovie = (args) => {\r\n  // console.log(args)\r\n  const [, idPart] = args.queryKey;\r\n  const { id } = idPart;\r\n  return fetch(\r\n    `https://api.themoviedb.org/3/movie/${id}?api_key=${import.meta.env.VITE_TMDB_KEY}`\r\n  ).then((response) => {\r\n    if (!response.ok) {\r\n      throw new Error(response.json().message);\r\n    }\r\n    return response.json();\r\n  })\r\n  .catch((error) => {\r\n    throw error\r\n });\r\n};\r\n~~~\r\n[Uncomment the console statement to see the structure of the argument object passed to the query function.]\r\n\r\nWe will also use react-query for retrieving a movie's images. In `src/components/templateMoviePage/index.js`, make the following changes: \r\n~~~\r\nimport React from \"react\";  // useState/useEffect redundant \r\n.... other imports ....\r\nimport { useQuery } from \"react-query\";\r\nimport Spinner from '../spinner'\r\n\r\n..... other code .....\r\n \r\nconst TemplateMoviePage = ({ movie, children }) => {\r\n  const { data , error, isLoading, isError } = useQuery(\r\n    [\"images\", { id: movie.id }],\r\n    getMovieImages\r\n  );\r\n\r\n  if (isLoading) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  if (isError) {\r\n    return <h1>{error.message}</h1>;\r\n  }\r\n  const images = data.posters \r\n\r\n  return (\r\n    ... as before ....\r\n  );\r\n};\r\n\r\nexport default TemplateMoviePage;\r\n~~~\r\nIn `src/api/tmdb-api.js`, change the getMovieImages function to the following:\r\n~~~\r\nexport const getMovieImages = ({ queryKey }) => {\r\n  const [, idPart] = queryKey;\r\n  const { id } = idPart;\r\n  return fetch(\r\n    `https://api.themoviedb.org/3/movie/${id}/images?api_key=${import.meta.env.VITE_TMDB_KEY}`\r\n  ).then( (response) => {\r\n    if (!response.ok) {\r\n      throw new Error(response.json().message);\r\n    }\r\n    return response.json();\r\n\r\n  })\r\n  .catch((error) => {\r\n    throw error\r\n });\r\n};\r\n~~~\r\nIn the browser, perform this sequence:\r\n\r\n1. Refresh the home page.\r\n1. Click the first movie's 'More info' button.\r\n1. Navigate back to the home page (using the site header).\r\n1. Click the second movie's 'More Info' button.\r\n\r\nThe cache's state should look similar to the following:\r\n\r\n![][pkey]\r\n\r\nUpdate the project git repository:\r\n~~~\r\n$ git add -A\r\n$ git commit -m \"Using react-query to manage the browser-based cache.\"\r\n$ git push origin main\r\n~~~\r\n[icon]: ./img/icon.png\r\n[cache]: ./img/cache.png\r\n[fresh]: ./img/fresh.png\r\n[once]: ./img/once.png\r\n[pkey]: ./img/pkey.png\r\n","route":"/lab/{{COURSEURL}}/topic07-legacy/book-1/DataFetching","id":"DataFetching","type":"step"},{"title":" Global Data and Contexts.","shortTitle":"Context","contentMd":"## Global Data and Contexts.\r\n\r\nA common feature of React apps is where many components need to access the same piece of data. For example, many components may need to know the identity of the currently authenticated user. However, this situation can lead to 'prop drilling', where components in the middle of the component hierarchy must pass props from a high-level component to low-level components - the middle-tier components may not use the props themselves. React provides __Contexts__ to solve this problem - it is an implementation of the generic Provider design pattern. We will use a Context to store information about movies tagged as favourites. The Home page and Favourites page will use the Context as both use this data.\r\n\r\nCreate the file `src/contexts/moviesContext.jsx` and add this code:\r\n\r\n```\r\nimport React, { useState } from \"react\";\r\n\r\nexport const MoviesContext = React.createContext(null);\r\n\r\nconst MoviesContextProvider = (props) => {\r\n  const [favourites, setFavourites] = useState([]);\r\n\r\n  const addToFavourites = (movie) => {\r\n    let updatedFavourites = [...favourites];\r\n    if (!favourites.includes(movie.id)) {\r\n      updatedFavourites.push(movie.id);\r\n    }\r\n    setFavourites(updatedFavourites);\r\n  };\r\n\r\n  // We will use this function in a later section\r\n  const removeFromFavourites = (movie) => {\r\n    setFavourites(favourites.filter((mId) => mId !== movie.id));\r\n  };\r\n\r\n  return (\r\n    <MoviesContext.Provider\r\n      value={{\r\n        favourites,\r\n        addToFavourites,\r\n        removeFromFavourites,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </MoviesContext.Provider>\r\n  );\r\n};\r\n\r\nexport default MoviesContextProvider;\r\n```\r\nNote, we are storing only the selected movie's id in the favourites array above. \r\n\r\nThe MoviesContextProvider component is not exceptional - it simply manages the list of favourites. However, the intention is to compose it with other components using the Container pattern - _props.children_. A distinguishing feature of MoviesContextProvider is it also plays a __context provider__ due to the _MoviesContext.Provider_ wrapper. This role will allow other components it is composed with to access to the context, i.e. access the favourite movies state (and the two functions that manipulate it). The net result is we avoid prop drilling.\r\n\r\nIn `src/index.jsx`, make these changes:\r\n\r\n- add an import:\r\n\r\n```\r\nimport MoviesContextProvider from \"./contexts/moviesContext\";\r\n```\r\n\r\n- modify the App component:\r\n\r\n```\r\nconst App = () => {\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      <BrowserRouter>\r\n        <SiteHeader />\r\n          <MoviesContextProvider>\r\n            <Routes>\r\n               .....code as before .....\r\n            </Routes>\r\n        </MoviesContextProvider>\r\n      </BrowserRouter>\r\n      <ReactQueryDevtools initialIsOpen={false} />\r\n    </QueryClientProvider>\r\n  );\r\n};\r\n```\r\nThe App component _composes_ the MoviesContextProvider with the rest of our components/pages. All components/pages can access the _values_ in the context, subject to a small code addition. For example, the Home page and Favourites page will be able to access the favourites list - previously stored in the browser's local storage. In `components/movieCard/index.jsx`, make these changes:\r\n~~~\r\nimport React, { useContext  } from \"react\";\r\n..... other imports .....\r\nimport { MoviesContext } from \"../../contexts/moviesContext\";\r\n\r\n..... other (styling) code .....\r\n\r\nexport default function MovieCard({ movie }) {\r\n  const { favourites, addToFavourites } = useContext(MoviesContext);\r\n  \r\n  if (favourites.find((id) => id === movie.id)) {\r\n    movie.favourite = true;\r\n  } else {\r\n    movie.favourite = false\r\n  }\r\n\r\n  const handleAddToFavourite = (e) => {\r\n    e.preventDefault();\r\n    addToFavourites(movie);\r\n  };\r\n\r\n  return (\r\n     .... as before ....\r\n  );\r\n}\r\n~~~\r\nThe useContext hook allows a component to _consume_ the values exposed by a context provider, e.g. the addToFavorites function and favourites array. \r\n\r\nThe Favourite movies page can use the favourite movie ids to fetch the movie details from TMDB - alternatively, we could have excavated the movie details  from the cache, but this is somewhat unorthodox. React-query supports __parallel queries__, which we can utilize here. In `pages/favoriteMoviesPage.jsx`, completely replace the code with the following:\r\n```\r\nimport React, { useContext } from \"react\";\r\nimport PageTemplate from \"../components/templateMovieListPage\";\r\nimport { MoviesContext } from \"../contexts/moviesContext\";\r\nimport { useQueries } from \"react-query\";\r\nimport { getMovie } from \"../api/tmdb-api\";\r\nimport Spinner from \"../components/spinner\";\r\nimport useFiltering from \"../hooks/useFiltering\";\r\nimport MovieFilterUI, { titleFilter } from \"../components/movieFilterUI\";\r\n\r\nconst titleFiltering = {\r\n  name: \"title\",\r\n  value: \"\",\r\n  condition: titleFilter,\r\n};\r\nexport const genreFiltering = {\r\n  name: \"genre\",\r\n  value: \"0\",\r\n  condition: function (movie, value) {\r\n    // Is user selected genre in this movies's genre list? \r\n    // Always true if selected genre ia All (0).\r\n    const genreId = Number(value);\r\n    const genre_ids = movie.genres.map((g) => g.id);\r\n    return genreId > 0 ? genre_ids.includes(genreId) : true;\r\n  },\r\n};\r\n\r\nconst FavouriteMoviesPage = () => {\r\n  const { favourites: movieIds } = useContext(MoviesContext);\r\n  const { filterValues, setFilterValues, filterFunction } = useFiltering(\r\n    [],\r\n    [titleFiltering, genreFiltering]\r\n  );\r\n\r\n  // Create an array of queries and run them in parallel.\r\n  const favouriteMovieQueries = useQueries(\r\n    movieIds.map((movieId) => {\r\n      return {\r\n        queryKey: [\"movie\", { id: movieId }],\r\n        queryFn: getMovie,\r\n      };\r\n    })\r\n  );\r\n  // Check if any of the parallel queries is still loading.\r\n  const isLoading = favouriteMovieQueries.find((m) => m.isLoading === true);\r\n\r\n  if (isLoading) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  const allFavourites = favouriteMovieQueries.map((q) => q.data);\r\n  const displayMovies = allFavourites\r\n    ? filterFunction(allFavourites)\r\n    : [];\r\n\r\n  const toDo = () => true;\r\n\r\n  const changeFilterValues = (type, value) => {\r\n    const changedFilter = { name: type, value: value };\r\n    const updatedFilterSet =\r\n      type === \"title\"\r\n        ? [changedFilter, filterValues[1]]\r\n        : [filterValues[0], changedFilter];\r\n    setFilterValues(updatedFilterSet);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PageTemplate\r\n        title=\"Favourite Movies\"\r\n        movies={displayMovies}\r\n        selectFavourite={toDo}\r\n      />\r\n      <MovieFilterUI\r\n        onFilterValuesChange={changeFilterValues}\r\n        titleFilter={filterValues[0].value}\r\n        genreFilter={filterValues[1].value}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FavouriteMoviesPage;\r\n```\r\nNote, TMDB returns a different object structure for a movie when asked for a list of movies rather than details of a particular movie. For this reason, the genre filtering condition is different for the Favourites page as opposed to the home page.\r\n\r\nIn the browser, try the following sequence:\r\n\r\n1. Go to the home page.\r\n1. Click the 'Favorites' icon of the first three movies - they each have a favourite icon coloured red in the title.\r\n1. Navigate to the Favorites page. It's showing the tagged movies.\r\n1. Navigate back to the Home page. The three movies are still tagged as favourites. \r\n\r\nUpdate the git repository as follows:\r\n\r\n```\r\n$ git add -A\r\n$ git commit -m \"Refactor: Favourite movie list now stored in a context.\"\r\n$ git push origin main\r\n\r\n```\r\n\r\n","route":"/lab/{{COURSEURL}}/topic07-legacy/book-1/Context","id":"Context","type":"step"},{"title":" Bug Fix.","shortTitle":"BugFix","contentMd":"## Bug Fix.\r\n\r\nCurrently, the favourite movies page has a bug: the movies listed on the page have a 'Add to Favorites' icon, which is illogical. We will replace it with two options:\r\n\r\n- Remove from favourites.\r\n- Write a review of the movie.\r\n\r\n![][favcard]\r\n\r\nWe want a movie card's icons (and their roles) to be conditional on the page that uses them. To meet this requirement, we must refactor the existing code. The _Render props_ pattern ([read more][renderprop]) will provide the design for the refactoring.\r\n\r\n> > \"A component with a render prop uses it to produce a React element  instead of implementing the rendering logic itself.\"\r\n\r\nIn our case, the render prop function will return the appropriate type of icon(s).\r\n\r\nRecall, in `contexts/moviesContext.jsx`, we already added a function for removing favourites. Create the folder `src/components/cardIcons` and in it create three files:\r\n\r\n- `addToFavourites.jsx`, with the following code:\r\n\r\n```\r\nimport React, { useContext } from \"react\";\r\nimport { MoviesContext } from \"../../contexts/moviesContext\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\n\r\nconst AddToFavouritesIcon = ({ movie }) => {\r\n  const context = useContext(MoviesContext);\r\n\r\n  const onUserSelect = (e) => {\r\n    e.preventDefault();\r\n    context.addToFavourites(movie);\r\n  };\r\n  return (\r\n    <IconButton aria-label=\"add to favorites\" onClick={onUserSelect}>\r\n      <FavoriteIcon color=\"primary\" fontSize=\"large\" />\r\n    </IconButton>\r\n  );\r\n};\r\n\r\nexport default AddToFavouritesIcon;\r\n```\r\n\r\n- `writeReview.jsx` (it's only a placeholder for now):\r\n\r\n```\r\nimport React from \"react\";\r\nimport RateReviewIcon from \"@mui/icons-material/RateReview\";\r\n\r\nconst WriteReviewIcon = ({ movie }) => {\r\n  return (\r\n    <RateReviewIcon color=\"primary\" fontSize=\"large\" />\r\n  );\r\n};\r\n\r\nexport default  WriteReviewIcon;\r\n```\r\n\r\n- and `removeFromFavourites.jsx`:\r\n\r\n```\r\nimport React, { useContext } from \"react\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport { MoviesContext } from \"../../contexts/moviesContext\";\r\n\r\nconst RemoveFromFavouritesIcon = ({ movie }) => {\r\n  const context = useContext(MoviesContext);\r\n\r\n  const onUserRequest = (e) => {\r\n    e.preventDefault();\r\n    context.removeFromFavourites(movie);\r\n  };\r\n\r\nreturn (\r\n  <IconButton\r\n    aria-label=\"remove from favorites\"\r\n    onClick={onUserRequest}\r\n  >\r\n    <DeleteIcon color=\"primary\" fontSize=\"large\" />\r\n  </IconButton>\r\n);\r\n};\r\n\r\nexport default RemoveFromFavouritesIcon;\r\n```\r\nIn `pages/homePage.jsx`, make the following changes:\r\n\r\n```\r\n..... other imports ......\r\nimport AddToFavouritesIcon from '../components/cardIcons/addToFavourites'\r\n\r\nconst HomePage = (props) => {\r\n   ..... code as before ......\r\n\r\n  // The following three lines can be deleted\r\n  // const favourites = movies.filter((m) => m.favorite);\r\n  // localStorage.setItem(\"favourites\", JSON.stringify(favourites));\r\n  // const addToFavourites = (movieId) => true;\r\n\r\n   return (\r\n     <>\r\n      <PageTemplate\r\n        title=\"Discover Movies\"\r\n        movies={displayedMovies}\r\n        action={(movie) => {\r\n          return <AddToFavouritesIcon movie={movie} />\r\n        }}\r\n      />\r\n      ..... code as before .....\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n```\r\nThe render prop in the above code appears in the lines:\r\n```\r\n    action={(movie) => {\r\n      return <AddToFavouritesButton movie={movie} />\r\n    }}\r\n```\r\nThe render prop's function returns the icon to display in movie cards on the home page. We must pass the render prop down the component hierarchy to the movie card component, which ultimately will invoke it. In `components/templateMovieListPage/index.jsx`:\r\n\r\n- change the props destructuring in the component declaration line, as follows:\r\n\r\n```\r\nfunction MovieListPageTemplate({ movies, title, action }) {\r\n```\r\n\r\n- modify the return statement's MovieList component use to the following:\r\n\r\n```\r\n      <MovieList action={action} movies={movies} />\r\n\r\n```\r\nIn `components/movieList/index.jsx`, completely replace the code with:\r\n\r\n```\r\nimport React from \"react\";\r\nimport Movie from \"../movieCard\";\r\nimport Grid from \"@mui/material/Grid\";\r\n\r\nconst MovieList = ( {movies, action }) => {\r\n  let movieCards = movies.map((m) => (\r\n    <Grid key={m.id} item xs={12} sm={6} md={4} lg={3} xl={2}>\r\n      <Movie key={m.id} movie={m} action={action} />\r\n    </Grid>\r\n  ));\r\n  return movieCards;\r\n};\r\n\r\nexport default MovieList;\r\n```\r\nIn `components/movieCard/index.jsx`, update the component code as follows:\r\n\r\n+ Change the function signature to:\r\n~~~\r\nexport default function MovieCard({ movie, action }) {\r\n~~~\r\n\r\n+ replace the liness:\r\n~~~\r\n    <IconButton aria-label=\"add to favourites\" onClick={handleAddToFavourite}>\r\n        <FavoriteIcon color=\"primary\" fontSize=\"large\" />\r\n    </IconButton>\r\n~~~\r\nwith:\r\n~~~\r\n    {action(movie)}\r\n~~~\r\n+ remove the line:\r\n~~~\r\nimport IconButton from \"@mui/material/IconButton\";\r\n~~~\r\n+ remove the lines:\r\n~~~\r\n  const handleAddToFavourite = (e) => {\r\n    e.preventDefault();\r\n    addToFavourites(movie);\r\n  };\r\n~~~\r\n\r\nThe above changes substitute the hard-coded Favorite icon and its associated click event handler with the render prop function call, i.e.\r\n```\r\n    {action(movie)}\r\n```\r\nThe add to favourites feature is now working on the Home page; however, the Favorites page is broken (again!). To fix it, in `pages/favoriteMoviesPage.jsx`:\r\n\r\n+ add two imports:\r\n~~~\r\nimport RemoveFromFavourites from \"../components/cardIcons/removeFromFavourites\";\r\nimport WriteReview from \"../components/cardIcons/writeReview\";\r\n~~~\r\n+ remove the toDo function declaration.\r\n+ replace the PageTemplate component with:\r\n~~~\r\n      <PageTemplate\r\n        title=\"Favourite Movies\"\r\n        movies={displayMovies}\r\n        action={(movie) => {\r\n          return (\r\n            <>\r\n              <RemoveFromFavourites movie={movie} />\r\n              <WriteReview movie={movie} />\r\n            </>\r\n          );\r\n        }}\r\n      />\r\n~~~\r\nThe above code means that movie cards on the Favorite movies page should have two action icons: 'Remove from the Favourites' and 'Write a Review'. In the browser, try adding and removing favourites.\r\n\r\nUpdate the git repository as follows:\r\n\r\n```\r\n$ git add -A\r\n$ git commit -m \"Bug Fix - make action icons on movie card configurable.\"\r\n$ git push origin main\r\n```\r\n\r\n[renderprop]: https://reactjs.org/docs/render-props.html\r\n[reviewbutton]: ./img/reviewbutton.png\r\n[favcard]: ./img/favcard.png\r\n","route":"/lab/{{COURSEURL}}/topic07-legacy/book-1/BugFix","id":"BugFix","type":"step"},{"title":" Add a Movie Review.","shortTitle":"AddReview","contentMd":"## Add a Movie Review.\r\n\r\nOn the favourite movies page, clicking a movie's RateReview icon should allows the user write a review. We will store reviews in the moviesContext as a temporary solution but in a production app, it would be sent to the API for storage in a database. \r\n\r\nIn `components/cardIcons/writeReview.jsx`, replace the entire content with:\r\n~~~js\r\nimport React from \"react\";\r\nimport RateReviewIcon from \"@mui/icons-material/RateReview\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst WriteReviewIcon = ({ movie }) => {\r\n  return (\r\n    <Link\r\n      to={'/reviews/form'}\r\n      state={{\r\n          movieId: movie.id,\r\n        }}\r\n    >\r\n      <RateReviewIcon color=\"primary\" fontSize=\"large\" />\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default WriteReviewIcon;\r\n~~~\r\nThe icon/Link routes the app to the URL '/reviews/form' and includes the movie's Id as additional data/state. Create the file `components/reviewForm/index.jsx`, and add the following temporary code:\r\n~~~js\r\nimport React from \"react\";\r\n\r\nconst ReviewForm = (props) => {\r\n  return (\r\n      <h3>Placeholder for web form</h3>\r\n  );\r\n};\r\n\r\nexport default ReviewForm;\r\n~~~\r\nCreate the file `src/pages/addMovieReviewPage.jsx`, and add this code:\r\n~~~js\r\nimport React from \"react\";\r\nimport PageTemplate from \"../components/templateMoviePage\";\r\nimport ReviewForm from \"../components/reviewForm\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { useQuery } from \"react-query\";\r\nimport { getMovie } from \"../api/tmdb-api\";\r\nimport Spinner from \"../components/spinner\";\r\n\r\nconst WriteReviewPage = (props) => {\r\n  const location = useLocation()\r\n  const { movieId } = location.state;\r\n  const { data: movie, error, isLoading, isError } = useQuery(\r\n    [\"movie\", { id: movieId }],\r\n    getMovie\r\n  );\r\n\r\n  if (isLoading) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  if (isError) {\r\n    return <h1>{error.message}</h1>;\r\n  }\r\n  return (\r\n    <PageTemplate movie={movie}>\r\n      <ReviewForm movie={movie} />\r\n    </PageTemplate>\r\n  );\r\n};\r\n\r\nexport default WriteReviewPage;\r\n~~~\r\nUpdate the routing configuration in `src/index.jsx`, as follows:\r\n\r\n+ add an import at the top:\r\n~~~js\r\nimport AddMovieReviewPage from './pages/addMovieReviewPage'\r\n~~~\r\n\r\n+ add a new route to the list:\r\n~~~js\r\n    <Routes>\r\n        <Route path=\"/reviews/form\" element={<AddMovieReviewPage/>} />\r\n        . . . . other routes . . . . \r\n    </Routes>\r\n~~~\r\nIn the browser, go to the favourite movies page and click the RateReview icon of a movie. It should display our new page:\r\n\r\n![][reviewform]\r\n\r\n### Web forms in React.\r\n\r\nWeb forms tend to have a standard feature set, e.g. field validation and error messages, submit action, reset fields, etc. We will use a 3rd party module to simplify implementing these requirements - the react-hook-form library ([read more][useform]). [See react-hook-form in `package.json`.] \r\n\r\nIn `components/reviewForm` make the following changes:\r\n- Create the file `ratingCategories.js`:\r\n~~~js\r\nconst ratings = [\r\n  {\r\n    value: 5,\r\n    label: \"Excellent\",\r\n  },\r\n  {\r\n    value: 4,\r\n    label: \"Good\",\r\n  },\r\n  {\r\n    value: 3,\r\n    label: \"Average\",\r\n  },\r\n  {\r\n    value: 2,\r\n    label: \"Poor\",\r\n  },\r\n  {\r\n    value: 0,\r\n    label: \"Terrible\",\r\n  },\r\n];\r\n  export default ratings\r\n~~~\r\n- Create the file `styles.js`:\r\n~~~js\r\nconst styles =  {\r\n  root: {\r\n    marginTop: 2,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"left\",\r\n  },\r\n  form: {\r\n    width: \"100%\",\r\n    \"& > * \": {\r\n      marginTop: 2,\r\n    },\r\n  },\r\n  textField: {\r\n    width: \"40ch\",\r\n  },\r\n  submit: {\r\n    marginRight: 2,\r\n  },\r\n  snack: {\r\n    width: \"50%\",\r\n    \"& > * \": {\r\n      width: \"100%\",\r\n    },\r\n  },\r\n};\r\nexport default styles\r\n~~~\r\n- Replace the content of `index.jsx` with the following:,\r\n~~~js\r\nimport React, { useContext, useState } from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { MoviesContext } from \"../../contexts/moviesContext\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport styles from \"./styles\";\r\nimport ratings from \"./ratingCategories\";\r\n\r\nconst ReviewForm = ({ movie }) => {\r\n  const defaultValues = {\r\n    author: \"\",\r\n    review: \"\",\r\n    agree: false,\r\n    rating: \"3\",\r\n  };\r\n  const {\r\n    control,\r\n    formState: { errors },\r\n    handleSubmit,\r\n    reset,\r\n  } = useForm(defaultValues);\r\n  const navigate = useNavigate();\r\n  const context = useContext(MoviesContext);\r\n  const [rating, setRating] = useState(3);\r\n\r\n\r\n  const handleRatingChange = (event) => {\r\n    setRating(event.target.value);\r\n  };\r\n\r\n  const onSubmit = (review) => {\r\n    review.movieId = movie.id;\r\n    review.rating = rating;\r\n    // console.log(review);\r\n  };\r\n\r\n  return (\r\n    <Box component=\"div\" sx={styles.root}>\r\n      <Typography component=\"h2\" variant=\"h3\">\r\n        Write a review\r\n      </Typography>\r\n      <form sx={styles.form} onSubmit={handleSubmit(onSubmit)} noValidate>\r\n        <Controller\r\n          name=\"author\"\r\n          control={control}\r\n          rules={{ required: \"Name is required\" }}\r\n          defaultValue=\"\"\r\n          render={({ field: { onChange, value } }) => (\r\n            <TextField\r\n              sx={{ width: \"40ch\" }}\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              onChange={onChange}\r\n              value={value}\r\n              id=\"author\"\r\n              label=\"Author's name\"\r\n              autoFocus\r\n            />\r\n          )}\r\n        />\r\n        {errors.author && (\r\n          <Typography variant=\"h6\" component=\"p\">\r\n            {errors.author.message}\r\n          </Typography>\r\n        )}\r\n        <Controller\r\n          name=\"review\"\r\n          control={control}\r\n          rules={{\r\n            required: \"Review cannot be empty.\",\r\n            minLength: { value: 10, message: \"Review is too short\" },\r\n          }}\r\n          defaultValue=\"\"\r\n          render={({ field: { onChange, value } }) => (\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              value={value}\r\n              onChange={onChange}\r\n              label=\"Review text\"\r\n              id=\"review\"\r\n              multiline\r\n              minRows={10}\r\n            />\r\n          )}\r\n        />\r\n        {errors.review && (\r\n          <Typography variant=\"h6\" component=\"p\">\r\n            {errors.review.message}\r\n          </Typography>\r\n        )}\r\n\r\n        <Controller\r\n          control={control}\r\n          name=\"rating\"\r\n          render={({ field: { onChange, value } }) => (\r\n            <TextField\r\n              id=\"select-rating\"\r\n              select\r\n              variant=\"outlined\"\r\n              label=\"Rating Select\"\r\n              value={rating}\r\n              onChange={handleRatingChange}\r\n              helperText=\"Don't forget your rating\"\r\n            >\r\n              {ratings.map((option) => (\r\n                <MenuItem key={option.value} value={option.value}>\r\n                  {option.label}\r\n                </MenuItem>\r\n              ))}\r\n            </TextField>\r\n          )}\r\n        />\r\n\r\n        <Box sx={styles.buttons}>\r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            sx={styles.submit}\r\n          >\r\n            Submit\r\n          </Button>\r\n          <Button\r\n            type=\"reset\"\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            sx={styles.submit}\r\n            onClick={() => {\r\n              reset({\r\n                author: \"\",\r\n                content: \"\",\r\n              });\r\n            }}\r\n          >\r\n            Reset\r\n          </Button>\r\n        </Box>\r\n      </form>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ReviewForm;\r\n~~~\r\nThe useForm hook in the above code is the cornerstone. The properties of the object it returns connect the hook's form processing logic to our web form. The properties include:\r\n\r\n+ handleSubmit - a function to connect our custom form submit event handler to react-hook-form.\r\n+ reset - a function to reset the form fields.\r\n+ errors - an object populated with field validation error messages computed from the validation rules declared in the Controller components.\r\n+ control - a function for controlling a field on the web fork.\r\n\r\nThe react-hook-form library also provides the Controller component for managing a form field. It declares the field's validation criteria (rules), name, and how it should render (render). For example, the code for the review content field is as follows:\r\n~~~js\r\n     <Controller\r\n          name=\"review\"\r\n          control={control}\r\n          rules={{\r\n            required: \"Review cannot be empty.\",\r\n            minLength: { value: 10, message: \"Review is too short\" },\r\n          }}\r\n          defaultValue=\"\"\r\n          render={({ field: { onChange, value } }) => (\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              value={value}\r\n              onChange={onChange}\r\n              label=\"Review text\"\r\n              id=\"review\"\r\n              multiline\r\n              minRows={10}\r\n            />\r\n          )}\r\n        />\r\n~~~\r\nThe render prop above is an example of the Render prop pattern. The callback assigned to it is invoked by the Controller, passing it the current value of the field and a default onChange event handler. The validation rules object above uses prescribed keys (e.g. required, minlength, min, max). The hook enforces these rules, and it records any violations in an errors object, which we use to control the display of error messages, for example:\r\n~~~js\r\n        {errors.review && (\r\n          <Typography variant=\"h6\" component=\"p\">\r\n            {errors.review.message}\r\n          </Typography>\r\n        )}\r\n~~~ \r\nThe error messages appear under the offending field, as shown below:\r\n\r\n![][errorform]\r\n\r\n### Storing the reviews.\r\nAs an interim solution, we will store reviews in the MoviesContext.\r\n\r\nIn `contexts/moviesContext.jsx`, make the changes shown below:\r\n~~~js\r\n..... other code as before .....\r\n\r\nconst MoviesContextProvider = (props) => {\r\n  const [myReviews, setMyReviews] = useState( {} )  // NEW\r\n\r\n  ..... other code as before  .....\r\n\r\n  const addReview = (movie, review) => {   // NEW\r\n    setMyReviews( {...myReviews, [movie.id]: review } )\r\n  };\r\n\r\n return (\r\n    <MoviesContext.Provider\r\n      value={{\r\n        favourites,\r\n        addToFavourites,\r\n        removeFromFavourites,\r\n        addReview,    // NEW\r\n      }}\r\n    >\r\n      {props.children}\r\n    </MoviesContext.Provider>\r\n  );\r\n};\r\n\r\nexport default MoviesContextProvider;\r\n~~~\r\nIn `components/reviewForm/index.jsx`, update the onSubmit function:\r\n~~~js\r\n  const onSubmit = (review) => {\r\n    review.movieId = movie.id;\r\n    review.rating = rating;\r\n    context.addReview(movie, review);\r\n  };\r\n~~~\r\nIn the browser, try adding a review for a favourite movie. \r\n\r\nIt work, but a better user experience would be to acknowledge the review submission. We will use the Material Snackbar component to serve this purpose.\r\n\r\n![][snackbar]\r\n\r\nIn `components/reviewForm/index.jsx`:\r\n- Add two new imports:\r\n~~~js\r\nimport Snackbar from \"@mui/material/Snackbar\";\r\nimport Alert from \"@mui/material/Alert\";\r\n~~~\r\n- Add another state variable declaration (after rating):\r\n~~~js\r\n  const [open, setOpen] = useState(false);  //NEW\r\n~~~\r\n- Add an event handler (before onSubmit):\r\n~~~js\r\n  const handleSnackClose = (event) => {\r\n    setOpen(false);\r\n    navigate(\"/movies/favourites\");\r\n  };\r\n~~~\r\n- change the onSubmit event handler:\r\n~~~js\r\n  const onSubmit = (review) => {\r\n    review.movieId = movie.id;\r\n    review.rating = rating;\r\n    // console.log(review);\r\n    context.addReview(movie, review);\r\n    setOpen(true); // NEW\r\n  };\r\n~~~\r\n- Add the Snackbar component, just before the Form component:\r\n~~~js\r\n      <Snackbar\r\n        sx={styles.snack}\r\n        anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n        open={open}\r\n        onClose={handleSnackClose}\r\n      >\r\n        <Alert\r\n          severity=\"success\"\r\n          variant=\"filled\"\r\n          onClose={handleSnackClose}\r\n        >\r\n          <Typography variant=\"h4\">\r\n            Thank you for submitting a review\r\n          </Typography>\r\n        </Alert>\r\n      </Snackbar>\r\n~~~\r\nNow when the user clicks the submit button, the snackbar acknowledgement displays. Clicking its close icon will redirect the browser back to the favourites page. \r\n\r\nUpdate the git repository as follows:\r\n~~~\r\n$ git add -A\r\n$ git commit -m \"Add new review support.\"\r\n$ git push origin master\r\n~~~\r\n\r\n[reviewform]: ./img/reviewForm.png\r\n[useform]: https://react-hook-form.com/\r\n[errorform]: ./img/errorform.png\r\n[snackbar]: ./img/snackbar.png\r\n","route":"/lab/{{COURSEURL}}/topic07-legacy/book-1/AddReview","id":"AddReview","type":"step"},{"title":" Update Storybook.","shortTitle":"Storybook","contentMd":"## Update Storybook.\r\n\r\nThe storybook stories we wrote in part 1 of this series no longer work due to refactoring and enhancements made to the components in subsequent labs. Delete the `src/stories` foldel, download [this archive][stories], unzip it and copy the new `stories` folder into the `src folder. The critical differences in the updated story implementations are as follows:\r\n\r\n1. Sometimes, a component expects/requires a particular component type to be above it in the component hierarchy. In Storybook, we need to *add a Decorator* to the story to satisfy this requirement. Decorators wrap a story's component inside another component. The most common wrappers are Contexts and Routers.  \r\n1. Any component that uses the Link component needs to be wrapped inside a Router component. The BrowserRouter component serves this purpose in the app. In Storybook, we can use MemoryRouter, which is more lightweight.\r\n1. We also use the decorator for components that require the MoviesContext provider to be in the component hierarchy. Ditto for components that use the QueryClient provider.\r\n\r\nFor example, the stories for the MovieDetails component need the MemoryRouter and MoviesContextProvider as decorators:\r\n\r\n~~~js\r\nexport default {\r\n  title: \"Movie Details Page/MovieDetails\",\r\n  component: MovieDetails,\r\n  decorators: [\r\n    (Story) => <MemoryRouter initialEntries={[\"/\"]}>{Story()}</MemoryRouter>,\r\n    (Story) => <MoviesContextProvider>{Story()}</MoviesContextProvider>,\r\n  ],\r\n};\r\n\r\nexport const Basic = () => <MovieDetails movie={SampleMovie} />;\r\n\r\nBasic.storyName = \"Default\";\r\n~~~\r\n\r\nStart the Storybook server:\r\n~~~\r\n$ npm run storybook\r\n~~~\r\nIn the storybook UI test all the stories. Examine the story implementations to confirm your understanding of the changes made.\r\n\r\nCommit this work:\r\n~~~\r\n$ git add -A\r\n$ git commit -m \"Fix broken stories in Storybook.\"\r\n$ git push origin master\r\n~~~\r\n\r\n[stories]: ./archive/stories.zip","route":"/lab/{{COURSEURL}}/topic07-legacy/book-1/Storybook","id":"Storybook","type":"step"},{"title":" Exercises.","shortTitle":"Exercise","contentMd":"# Exercises.\r\n## Exercise 1.\r\n\r\nThe Upcoming movies page you developed in the previous lab no longer works due to the refactoring we carried out. Make the necessary adjustments to your code to get it working again.\r\n\r\nOn completion, update your repository:\r\n~~~\r\n$ git add -A\r\n$ git commit -m \"Fix upcoming movies page.\"\r\n$ git push origin main\r\n~~~\r\n## Exercise 2.\r\n\r\nSuppose we want the movies on the Upcoming movies page to have a different action icon(s), as shown below:\r\n\r\n![][buttonw]\r\n\r\nThe icon is called PlaylistAdd: \r\n\r\n![][playlistadd]\r\n\r\nUltimately, it should allow users to add the movie to their 'Must watch' list. For now, you only need this icon to render on the page's movie cards - it does not need to trigger any action.\r\n\r\nOn completion, update your repository:\r\n~~~\r\n$ git add -A\r\n$ git commit -m \"New button for Upcoming movies page.\"\r\n$ git push origin main\r\n~~~\r\n\r\n## Exercise 3.\r\n\r\nCurrently, the Upcoming movies page uses the useEffect hook to retrieve the list of movies. Consequently, an HTTP request is made to TMDB every time the page is mounted. A better solution would be to cache the films in the browser using the react-query library. \r\n\r\n__You are required__ to change the implementation to meet this requirement. On completion, update your repository:\r\n~~~\r\n$ git add -A\r\n$ git commit -m \"Change upcoming movies page to use caching.\"\r\n$ git push origin main\r\n~~~\r\n\r\n## Exercise 4.\r\n\r\nReturning to the PlaylistAdd icon in Exercise 2, suppose clicking it adds the movie to a 'Must Watch' list, similar to the Favourites feature. __You are required__ to implement this requirement. For convenience, skip the creation of a seperate 'Must Watch' page in your solution.\r\n\r\n[Hint: Add a new state variable (of type array) to the MoviesContext for storing the ids of the movies tagged as 'must watch', and add a function for updating this state variable. Have a click event handler associated with the icon that calls the update function. To confirm the feature is working, use console.log to output the content of the new state variable array.]\r\n\r\nOn completion, update your repository:\r\n~~~\r\n$ git add -A\r\n$ git commit -m \"Tagging upcoming movies as must-watch.\"\r\n$ git push origin main\r\n~~~\r\n\r\n-----------------------------\r\nIdeally, the tagged movie should be reflected on the Upcoming movies page, as shown below:\r\n\r\n![][mustwatch]\r\n\r\nThis feature would require significant refactoring, but you are not required to tackle this.\r\n\r\n\r\n[buttonw]: ./img/buttonw.png\r\n[mustwatch]: ./img/mustwatch.png\r\n[playlistadd]: ./img/playlistadd.png","route":"/lab/{{COURSEURL}}/topic07-legacy/book-1/Exercise","id":"Exercise","type":"step"}]},{"route":"https://www.youtube.com/watch?v=kRa-l4-I3rk&list=PLN09doY9z8obW1KDoLO5w6zeXcwCsTi4D&index=9","type":"web","title":"Lecture recording.\r","summary":"","contentMd":"Lecture recording.\r\n","frontMatter":{},"id":"web-1","img":"https://{{COURSEURL}}/topic07-legacy/web-1/web.png","imgFile":"web.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false},{"route":"/archive/{{COURSEURL}}/topic07-legacy/archive","type":"archive","title":"Resources.\r","summary":"Caching sample app.","contentMd":"Resources.\r\n\r\nCaching sample app.","frontMatter":{},"id":"archive","img":"https://{{COURSEURL}}/topic07-legacy/archive/archive.jpg","imgFile":"archive.jpg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"archiveFile":"archive.zip"}]},{"route":"/topic/{{COURSEURL}}/topic08","type":"topic","title":" Web APIs\r","summary":"This topic explores We APIs and introduces API Dev using Node.","contentMd":"# Web APIs\r\n\r\nThis topic explores We APIs and introduces API Dev using Node.\r\n","frontMatter":{},"id":"topic08","img":"https://{{COURSEURL}}/topic08/topic.jpg","imgFile":"topic.jpg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":true,"los":[{"route":"/talk/{{COURSEURL}}/topic08/talk01","type":"talk","title":" Web API Design\r","summary":"This topic explores Restful API design.","contentMd":"# Web API Design\r\n\r\nThis topic explores Restful API design.\r\n","frontMatter":{},"id":"talk01","img":"https://{{COURSEURL}}/topic08/talk01/APIs.jpg","imgFile":"APIs.jpg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"pdf":"https://{{COURSEURL}}/topic08/talk01/APIs.pdf","pdfFile":"APIs.pdf"},{"route":"/talk/{{COURSEURL}}/topic08/talk03","type":"talk","title":" Dev Containers","summary":"Create your Dev Environment using Containers","contentMd":"# Dev Containers\n\nCreate your Dev Environment using Containers\n","frontMatter":{},"id":"talk03","img":"https://{{COURSEURL}}/topic08/talk03/contain.png","imgFile":"contain.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"pdf":"https://{{COURSEURL}}/topic08/talk03/contain.pdf","pdfFile":"contain.pdf"},{"route":"/talk/{{COURSEURL}}/topic08/talk04","type":"talk","title":"Node.js\r","summary":"A brief introduction to Node and Event Driven programming","contentMd":"Node.js\r\n\r\nA brief introduction to Node and Event Driven programming","frontMatter":{},"id":"talk04","img":"https://{{COURSEURL}}/topic08/talk04/topic.png","imgFile":"topic.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"pdf":"https://{{COURSEURL}}/topic08/talk04/topic.pdf","pdfFile":"topic.pdf"},{"route":"/lab/{{COURSEURL}}/topic08/book-1","type":"lab","title":"Lab-API1","summary":"This lab introduces Dev Containters, Node.js and Express.js. \r","contentMd":"# Node and Express 1\r\n\r\nThis lab introduces Dev Containters, Node.js and Express.js. \r\n\r\nYou will use node.js to run javascript programs on the \"server-side\" which are capable of servicing HTTP requests. \r\n\r\nYou will learn how to:\r\n\r\n- Set up a Node.js Development Environment using Dev Containers.\r\n- How to do a simple route for a HTTP request.\r\n- Use Express to develop a Web API\r\n\r\nIt is assumed you will be using VS Code to develop the Web API labs with Dev Containers. \r\n\r\n![Getting Started with Dev Containers - Code With Engineering Playbook](https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fuser-images.githubusercontent.com%2F10041279%2F93239062-e1b9a480-f747-11ea-94fb-3d50b14fd9b1.png&f=1&nofb=1&ipt=2413a5e884029d55c23a4a4a25e3dc020ab92923092c9559a8449d89b74b60d7&ipo=images)\r\n","frontMatter":{},"id":"book-1","img":"https://{{COURSEURL}}/topic08/book-1/img/main.png","imgFile":"img/main.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"title":" Node and Express 1","shortTitle":"Lab-API1","contentMd":"# Node and Express 1\r\n\r\nThis lab introduces Dev Containters, Node.js and Express.js. \r\n\r\nYou will use node.js to run javascript programs on the \"server-side\" which are capable of servicing HTTP requests. \r\n\r\nYou will learn how to:\r\n\r\n- Set up a Node.js Development Environment using Dev Containers.\r\n- How to do a simple route for a HTTP request.\r\n- Use Express to develop a Web API\r\n\r\nIt is assumed you will be using VS Code to develop the Web API labs with Dev Containers. \r\n\r\n![Getting Started with Dev Containers - Code With Engineering Playbook](https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fuser-images.githubusercontent.com%2F10041279%2F93239062-e1b9a480-f747-11ea-94fb-3d50b14fd9b1.png&f=1&nofb=1&ipt=2413a5e884029d55c23a4a4a25e3dc020ab92923092c9559a8449d89b74b60d7&ipo=images)\r\n","route":"/lab/{{COURSEURL}}/topic08/book-1/Lab-API1","id":"Lab-API1","type":"step"},{"title":" Labs Repository","shortTitle":"Labs Repo","contentMd":"# Labs Repository\r\n\r\nYou already are using Git/Github for your work with React. You will now create a new repo for your Web API work and use it with a Dev Container to develop the API labs.  \r\n\r\n### Create a Remote Repository\r\n\r\n- Go to github.com, log in, and click the '+' in the top right to create a new repository.\r\n  Give it a name ***ewd-api-labs-2023**, and a short description.\r\n  Select the following options:\r\n  - make it public or private as you see fit.\r\n\r\n  - Create a ***readme.md*.**\r\n  - create a ***.gitignore*** and select the ***Node*** option in the dropdown.\r\n\r\nClick create repository and you should be taken to your new repo page. \r\n\r\n- Copy the repo URL from the \"Code\" option on the repo page.  You will need the URL of the repo to clone this repo to your local machine.\r\n\r\n### Clone your Remote to your Local Machine\r\n\r\n- On your local machine, find a suitable folder and clone your remote repo\r\n\r\n~~~bash\r\n$ git clone <YOUR_URL_FROM_GITHUB>\r\n~~~\r\n\r\n**Make sure you have a ``.gitignore`` file that ignores node-based things that you don't want to track, such as ``.env``, ``node-modules``.**\r\n\r\n","route":"/lab/{{COURSEURL}}/topic08/book-1/Labs Repo","id":"Labs Repo","type":"step"},{"title":" Dev Containers ","shortTitle":"Dev Environment","contentMd":"# Dev Containers \r\n\r\nDev containers are preconfigured development environments that can be used to standardize and simplify the setup of development environments. They are typically containerized using Docker or similar technologies, making it easier to manage dependencies and ensure consistency across different development machines.\r\nYou will now configure a dev container in your git repo and use it to develop the API labs.\r\n\r\n### Configure your Dev Container\r\n\r\nYour container configuration is stored in a *devcontainer.json* file. This file tells VS Code how to access (or create) a **development container** with a well-defined tool and runtime stack. We will use the container to develop our application and provide the necessary tools, libraries, and runtimes. \r\n\r\nFor now, we will use an existing image as a starting point for your `devcontainer.json`. Think of an image as a drive with various tools and an operating system pre-installed. You can pull images from a container registry, which is a collection of repositories that store images. \r\n\r\nThe dev container configuration located under `.devcontainer/devcontainer.json` in the root of your project.\r\n\r\n+ In the *ewd-2023-labs* folder you cloned in the last step, create `.devcontainer/devcontainer.json`.\r\n  ![image-20230316120103122](./img/image-20230316120103122.png)\r\n\r\n+ Add  the following content to the ``devcontainer.json`` file. We will use a pre-existing image for node development.\r\n\r\n  ~~~json\r\n  {\r\n  \t\"name\": \"ewd-labs-2023\",\r\n  \t\"image\":\"mcr.microsoft.com/devcontainers/javascript-node:0-18\"\r\n  }\r\n  ~~~\r\n\r\n  ### \r\n\r\n+ **PUSH YOUR CHANGES TO GITHUB NOW** . \r\n  Commit the changes you have just made using git and push to your remote repo on Github, either in VS Code using Source Control or on command line as follows:\r\n\r\n  ```\r\n  git add -A\r\n  git commit -m \"Added Dev Containter configuration\"\r\n  git push\r\n  ```\r\n\r\n\r\n\r\n## Starting your Dev Container\r\n\r\n VS Code can now use the *devcontainer.json* for launching your development container.\r\n\r\nYou have 2 options to develop your API:\r\n\r\n1. Create a Dev Container in GitHub CodeSpaces (No need to install Docker on your Local Host)\r\n\r\n2. Create a Dev Container on your local host\r\n\r\n   Choose 1 for your labs. Option 1 is quicker to get up and running with. However, you can try both if you wish!\r\n\r\n### OPTION 1: Dev Container in CodeSpaces \r\n\r\nGitHub Codespaces allows up to 60 hours free per month for a 2 core instance type. See [here](https://docs.github.com/en/codespaces) for more details. **NOTE:** Even if you run out of free time, you can switch to option 2 (local host). \r\n\r\n+ Install the CodeSpaces Extension in VS Code\r\n  <img src=\"./img/image-20230316003535138.png\" alt=\"image-20230316003535138\" style=\"zoom: 50%;\" />\r\n\r\n+ Vs Code, select *View->Command Pallette...* and find/run the **CodeSpaces: Create CodeSpace** command\r\n\r\n+ When prompted, select the following options:\r\n  + *ewd-labs2023 repository*\r\n  + *main branch*\r\n  + *the 2-core instance type*\r\n\r\nDone! It may take a little while to start up. After running this command, VS Code restarts, and you're now within a Node.js/Javascript dev container in the \"cloud\" that you can access from anywhere. \r\n\r\nSee the bottom right corner of VS code, it will indicate that you have a remote connection to your Dev Container on Codespaces:\r\n<img src=\"./img/image-20230316004105351.png\" alt=\"image-20230316004105351\" style=\"zoom:50%;\" />\r\n\r\n# OR\r\n\r\n### OPTION 2: Dev Container on Local Host(i.e. your laptop)\r\n\r\n+ In VS Code, search for and install the latest Dev Container Extension\r\n   <img src=\"./img/image-20230315162912290.png\" alt=\"image-20230315162912290\" style=\"zoom:50%;\" />\r\n\r\n+ Install Docker and make sure you have Docker running. You can do this by installing the **Docker Desktop** from here: https://www.docker.com/products/docker-desktop/\r\n\r\n+ In Vs Code, select *View->Command Pallette...* and find/run the **Dev Containers: Reopen in Container** command:<img src=\"./img/dev-containers-reopen.png\" alt=\"Quick pick with list of Dev Containers commands\" style=\"zoom:38%;\" />\r\n\r\nAfter running this command, VS Code restarts, and you're now within a Node.js/Javascript dev container. See the bottom right corner of VS code, it will indicate that you have a remote connection to your Dev Container on Codespaces:\r\n<img src=\"./img/image-20230316005213921.png\" alt=\"image-20230316005213921\" style=\"zoom:50%;\" />\r\n\r\n\r\n\r\n## Node Application\r\n\r\nThe following screenshots are using a CodeSpaces container\r\n\r\n- In VS Code, open a terminal and, in the root folder, enter ``npm init``the foll:\r\n  <img src=\"C:\\Users\\Frank\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230316011154487.png\" alt=\"image-20230316011154487\" style=\"zoom:50%;\" />\r\n\r\n- You will be prompted for details. Enter the following:\r\n\r\n~~~\r\nname:  ewd-labs-2023\r\nversion: (1.0.0) \r\ndescription: ewd labs 2022\r\nentry point: (index.js)\r\ntest command:\r\ngit repository: \r\nkeywords:\r\nauthor: YOUR_GIT_USERNAME\r\nlicense: (ISC)\r\n~~~\r\n\r\nYou should now see a ``package.json`` file in the lab directory with these details.\r\nIf you're developing a Node program or library for deployment, it's standard practice to include a **package.json** file. This file is the **manifest of the Node project** and is located at your project root. It contains various information specific to your project such as module dependencies and scripts. \r\n\r\n## Babel\r\n\r\nSimilar to your work with the React labs, **we will be writing our Javascript using ES6+** so we require ***transcoding*** to a backward compatible version before our Node app runs. We need to bring in some babel packages to handle this.\r\n\r\n- Enter the following command to get the relevant babel package and relevant  presets.\r\n\r\n~~~bash\r\nnpm install --save-dev babel-cli\r\nnpm install --save-dev babel-preset-env\r\n~~~\r\n\r\nThe ``--save-dev`` will write this dependency to the development section of the package.json. Have a look at the *package.json* file and you will now see the dev dependency on babel as highlighted below:\r\n\r\n![Development Dependencies](./img/package.PNG)\r\n\r\n\r\n\r\n- To configure babel to transcode from ES6+, create a file called **.babelrc** in the **root** folder and enter in the following:\r\n\r\n~~~json\r\n{\r\n  \"presets\": [\"env\"]\r\n}\r\n~~~\r\n\r\n\r\n\r\n## Nodemon\r\n\r\nWhen we change things in a Node.js project, a restart is required for the changes to be reflected in the running process. This can be very time consuming. Instead of manually restarting Node, we will install the ``nodemon`` package as a **development dependency**, which can monitor our files and auto-restart Node for us when we save changes to disk.\r\n\r\n- Install Nodemon:\r\n\r\n~~~bash\r\nnpm install --save-dev nodemon\r\n~~~\r\n\r\n## Commit it\r\n\r\nNow that we have a our basic setup and configuration complete,this is a good time to commit your changes to git.\r\n\r\n- In the directory *ewd-node_labs_2023 run the following:\r\n\r\n~~~bash\r\ngit add --all\r\ngit commit -m \"set up and initial configuration\"\r\n~~~\r\n\r\n**NOTE:** You should **NOT** see any output indicating changes ignored file and folders, for example the *node_modules* folder. We do not need to track changes here as it's contents are specified in the *package.json*.\r\n\r\n","route":"/lab/{{COURSEURL}}/topic08/book-1/Dev Environment","id":"Dev Environment","type":"step"},{"title":" \"Hello World\" HTTP Server","shortTitle":"Hello World","contentMd":"# \"Hello World\" HTTP Server\r\n\r\nWe will be using node as a web API platform. In this step we'll set up a simple HTTP server that responds to every request with the plain text message \"Hello World\".\r\n\r\n\r\n\r\n## App Config using dotenv\r\n\r\nAs discussed in class, one of the advantages of NPM is the wide availability of handy utility packages that follow accepted best practice. App configuration management and environment variables are common to many apps. When using public, cloud based repos you should use best practice approaches to keep sensitive parameters such as private keys and passwords safe.  \r\n\r\nDotenv is a zero-dependency module that loads environment variables from a .env file into *process.env*. In doing this Dotenv stores configuration in the environment separate from code is based on \"The Twelve-Factor App\" methodology.\r\nThis simple application just needs some typical configuration details, for example the port and host info.\r\n\r\n- Install Dotenv as a normal, runtime dependency\r\n\r\n~~~bash\r\nnpm install dotenv --save\r\n~~~\r\n\r\n- Create a new file in your application root folder called **.env** and add the following content:\r\n\r\n~~~javascript\r\nNODE_ENV=development\r\nPORT=8080\r\nHOST=localhost\r\n~~~\r\n\r\nAs you could be putting sensitive stuff in the .env file, **you should NOT commit your .env file to version control.** It should only include environment-specific values such as database passwords or API keys used by your server-side API. Also, your production database should have a different password than your development database.\r\n\r\nTo ensure this is the case, do the following:\r\n\r\n- Open *.gitignore* file. Check that it contains the following entry:\r\n\r\n~~~json\r\n# dotenv environment variables file\r\n.env\r\n~~~\r\n\r\n## HTTP service\r\n\r\n- In the root folder, create a new file called  *index.js*  with the following contents. This is the \"entry point\" for your node app:\r\n\r\n~~~javascript\r\n// Load the http module to create an http server.\r\nimport http from 'http';\r\nimport dotenv from 'dotenv'\r\n\r\ndotenv.config()\r\n\r\nconst port = process.env.PORT\r\n// Configure our HTTP server to respond with Hello World to all requests.\r\nconst server = http.createServer((req, res) => {\r\n  res.writeHead(200, {'Content-Type': 'text/plain'});\r\n  res.end('Hello  World!');\r\n});\r\n\r\nserver.listen(port);\r\n\r\n// Put a friendly message on the terminal\r\nconsole.log(`Server running at ${port}`);\r\n~~~\r\n\r\nIn the first line, we import the http core module and assign it to ``http``. Next we assign the variable  ``server`` from the ``http.createServer(...)`` function. The argument passed into this call is the function that is called whenever an http request comes in.\r\nFinally we call ``server.listen(config.port)`` to tell node.js the port on which we want our server to run.\r\n\r\n## Startup Script\r\n\r\nWe want to specify a script to start up the Node server, which will be the **index.js** file. So our start script would be ``node index.js``. However, since we want the code to be transcoded using  babel and started with nodemon, we will add a **nodemon** execution wrapper and use **babel-node** instead of the node command.\r\n\r\n- Find the ``scripts`` property in the *package.json* file and replace it with the following: \r\n\r\n~~~json\r\n....\r\n\"scripts\": {\r\n    \"start\": \"nodemon --exec babel-node index.js\"\r\n  },\r\n....\r\n~~~\r\n\r\nTo run the server open a terminal/command window in the node-lab1 folder and enter:\r\n\r\n~~~bash\r\nnpm start\r\n~~~\r\n\r\nYou should see output smilar to the following:\r\n\r\n![Node Start](./img/node-start.png)\r\n\r\nNow open your browser to 'http://localhost:8080'. You should see the following:\r\n\r\n![Node Hello World](./img/hello_world.png)\r\n\r\nThe connection function is invoked with a **req** and **res** object. The **req** object represents the HTTP request and is a readable stream that emits 'data' events for each incoming piece of data (like a form submission or file upload). The ***res*** object represents the HTTP response and is used to send data back to the client. In our case we are simply sending a 200 OK header, as well as the body 'Hello World'.\r\n\r\nLeave the app running for the next sections.\r\n\r\n## Nodemon in Action\r\n\r\nNow that your node app is running using Nodemon, any saved changes to your source code(index.js) will cause the app to restart automatically.\r\n\r\n- Change ``index.js`` to return **\"Hello EWD!\"** in the response and take a look at the terminal. You should see the console output indicating a restart. However, you will require a refresh in the browser to see the new \"Hello EWD!\" message.\r\n\r\n## Commit it\r\n\r\n- Commit the changes as usual \r\n\r\n~~~bash\r\ngit add --all\r\ngit commit -m \"Simple HTTP Server\"\r\n~~~","route":"/lab/{{COURSEURL}}/topic08/book-1/Hello World","id":"Hello World","type":"step"},{"title":" Linting","shortTitle":"Linting","contentMd":"# Linting\r\nIt'd be nice to get feedback on the quality of your Javascript code as you write it. ESLint is a tool for identifying and reporting on patterns found in ECMAScript/JavaScript code. It can be used to detect syntax errors in the editor and also to enforce code styles, for example the use of semicolons at the end of each statement.\r\n\r\n- Install ESLint as follows:\r\n\r\n~~~bash\r\nnpm install --save-dev eslint babel-eslint\r\n~~~\r\n\r\n- To configure ESLint, enter the following at the command line:\r\n\r\n~~~bash\r\nnpx eslint --init\r\n~~~\r\n\r\n+ Answer the questions as indicated below:\r\n\r\n<img src=\"./img/image-20230307193810105.png\" alt=\"image-20230307193810105\" style=\"zoom:67%;\" />\r\n\r\nYou should now see a file called *.eslintrc.json* in the *root* folder.\r\n\r\n- Open *.eslintrc.json* and replace the ``rules`` property with the following: \r\n\r\n~~~json\r\n\"rules\": {\r\n        \"semi\": 1,\r\n        \"no-console\": \"off\"\r\n    }\r\n~~~\r\n\r\nThe *.eslint.json* file specifies that we wish to lint the latest version of ES6 Javascript in module format (uses imports and exports, promises etc. ). It also specifies the environment is Node.js with associated global variables and Node.js scoping. Finally, we add some rules that warn if you leave out a semicolon and permit the use of ``console.log()`` (we should really use a proper logging module!!!).\r\n\r\nYou've now set your project folder up for linting your Javascript files.\r\n\r\n**NOTE:** These linting rules are to keep your code style consistent. If you already use JS and you wish to follow other rules (with justification) then feel free to implement them here. For example, a lot of JS developers do not use the semicolon at the end of each statement (as you've seen in index.js, you don't need it!)\r\n\r\n### How bad is your code!?\r\nNow lets check your code using ESLint on the command line.\r\n\r\n- Run the following command to lint your code:\r\n\r\n~~~bash\r\nnpx eslint index.js\r\n~~~\r\n\r\nThe rules will warn you if any statement does not end with a semicolon. The linter should highlight this and you should see the following output:\r\n\r\n![Node Hello World](./img/linter.png)\r\n\r\nYou can fix manually or use the command ``npx eslint index.js --fix`` to resolve the problems(if the linter suggests it).\r\nWhen the code is in good order, the linter should return nothing. Nice code!\r\n\r\n\r\n\r\n## Commit your changes\r\n\r\n- Commit the changes you have just made using git.\r\n\r\n~~~bash\r\ngit add -A\r\ngit commit -m \"Configured Linting\"\r\n~~~\r\n","route":"/lab/{{COURSEURL}}/topic08/book-1/Linting","id":"Linting","type":"step"},{"title":" Express Apps","shortTitle":"Express","contentMd":"# Express Apps\r\n\r\n We'll now move to Express, a richer web app package and provides a nice high level approach to serving up static content. It's based around the idea of creating an Express \"app\" that you can easily configure. One of the configuration options allows you to specify the location of your publicly available content such as static HTML, CSS, client-side Javascript files etc.\r\n\r\n## Installation and initial setup\r\n\r\nTo create an Express app, we need to install it as a **normal dependency**.\r\n\r\n- Install the express package  in the root folder.\r\n\r\n~~~bash\r\nnpm install --save express\r\n~~~\r\n\r\nThe ``--save`` flag will write this dependency to package.json.\r\n\r\n\r\n\r\n- Create a new folder called **src** in the  **root** folder. Create another folder in the **src** folder called **movies**. Your folder structure should look as follows:  \r\n\r\n~~~\r\nsrc\r\n\t|-movies\r\n~~~\r\n\r\n## Temporary Data\r\n\r\nOur API will eventually use a database such as Mongo that can cope with large volumes of data you would expect in a production environment. For now, we will use a temporary Javascript module that will provide some data for preliminary development and manual testing. We will use similar data from the TMDB database you used in previous labs\r\n\r\n- Create a new file called **moviesData.js** in the /src/movies folder and add the following code:  \r\n\r\n~~~javascript\r\nexport const movies = {\r\n    \"page\": 1,\r\n    \"results\": [\r\n        {\r\n            \"adult\": false,\r\n            \"backdrop_path\": \"/pcDc2WJAYGJTTvRSEIpRZwM3Ola.jpg\",\r\n            \"genre_ids\": [\r\n                28,\r\n                12,\r\n                14,\r\n                878\r\n            ],\r\n            \"id\": 791373,\r\n            \"original_language\": \"en\",\r\n            \"original_title\": \"Zack Snyder's Justice League\",\r\n            \"overview\": \"Determined to ensure Superman's ultimate sacrifice was not in vain, Bruce Wayne aligns forces with Diana Prince with plans to recruit a team of metahumans to protect the world from an approaching threat of catastrophic proportions.\",\r\n            \"popularity\": 11783.352,\r\n            \"poster_path\": \"/tnAuB8q5vv7Ax9UAEje5Xi4BXik.jpg\",\r\n            \"release_date\": \"2021-03-18\",\r\n            \"title\": \"Zack Snyder's Justice League\",\r\n            \"video\": false,\r\n            \"vote_average\": 8.7,\r\n            \"vote_count\": 3389\r\n        },\r\n        {\r\n            \"adult\": false,\r\n            \"backdrop_path\": \"/hJuDvwzS0SPlsE6MNFOpznQltDZ.jpg\",\r\n            \"genre_ids\": [\r\n                16,\r\n                12,\r\n                14,\r\n                10751,\r\n                28\r\n            ],\r\n            \"id\": 527774,\r\n            \"original_language\": \"en\",\r\n            \"original_title\": \"Raya and the Last Dragon\",\r\n            \"overview\": \"Long ago, in the fantasy world of Kumandra, humans and dragons lived together in harmony. But when an evil force threatened the land, the dragons sacrificed themselves to save humanity. Now, 500 years later, that same evil has returned and it’s up to a lone warrior, Raya, to track down the legendary last dragon to restore the fractured land and its divided people.\",\r\n            \"popularity\": 3067.315,\r\n            \"poster_path\": \"/lPsD10PP4rgUGiGR4CCXA6iY0QQ.jpg\",\r\n            \"release_date\": \"2021-03-03\",\r\n            \"title\": \"Raya and the Last Dragon\",\r\n            \"video\": false,\r\n            \"vote_average\": 8.4,\r\n            \"vote_count\": 1613\r\n        },\r\n        {\r\n            \"adult\": false,\r\n            \"backdrop_path\": \"/drulhSX7P5TQlEMQZ3JoXKSDEfz.jpg\",\r\n            \"genre_ids\": [\r\n                18,\r\n                14,\r\n                878\r\n            ],\r\n            \"id\": 581389,\r\n            \"original_language\": \"ko\",\r\n            \"original_title\": \"승리호\",\r\n            \"overview\": \"When the crew of a space junk collector ship called The Victory discovers a humanoid robot named Dorothy that's known to be a weapon of mass destruction, they get involved in a risky business deal which puts their lives at stake.\",\r\n            \"popularity\": 3507.528,\r\n            \"poster_path\": \"/lykPQ7lgrLJPwLlSyetVXsl2wDf.jpg\",\r\n            \"release_date\": \"2021-02-05\",\r\n            \"title\": \"Space Sweepers\",\r\n            \"video\": false,\r\n            \"vote_average\": 7.2,\r\n            \"vote_count\": 416\r\n        },\r\n        {\r\n            \"adult\": false,\r\n            \"backdrop_path\": \"/gzJnMEMkHowkUndn9gCr8ghQPzN.jpg\",\r\n            \"genre_ids\": [\r\n                53,\r\n                28,\r\n                18\r\n            ],\r\n            \"id\": 793723,\r\n            \"original_language\": \"fr\",\r\n            \"original_title\": \"Sentinelle\",\r\n            \"overview\": \"Transferred home after a traumatizing combat mission, a highly trained French soldier uses her lethal skills to hunt down the man who hurt her sister.\",\r\n            \"popularity\": 2266.597,\r\n            \"poster_path\": \"/fFRq98cW9lTo6di2o4lK1qUAWaN.jpg\",\r\n            \"release_date\": \"2021-03-05\",\r\n            \"title\": \"Sentinelle\",\r\n            \"video\": false,\r\n            \"vote_average\": 6,\r\n            \"vote_count\": 264\r\n        }\r\n    ],\r\n    \"total_pages\": 500,\r\n    \"total_results\": 10000\r\n};\r\n\r\nexport const movieReviews = {\r\n    \"id\": 527774,\r\n    \"page\": 1,\r\n    \"results\": [\r\n        {\r\n            \"author\": \"ted\",\r\n            \"content\": \"In a magical land known as Kumandra....\",\r\n            \"created_at\": \"2021-03-01T17:10:51.977Z\",\r\n            \"id\": \"603d201b33a533004bd1906e\",\r\n            \"updated_at\": \"2021-03-07T15:46:34.342Z\"\r\n        },\r\n        {\r\n            \"author\": \"bob\",\r\n            \"content\": \"If you enjoy reading my Spoiler-Free reviews, please follow my blog \",\r\n            \"created_at\": \"2021-03-01T17:13:07.315Z\",\r\n            \"id\": \"603d20a3e267de005151480c\",\r\n            \"updated_at\": \"2021-03-07T15:47:13.254Z\"\r\n        }\r\n    ],\r\n    \"total_pages\": 1,\r\n    \"total_results\": 2\r\n};\r\n\r\nexport const movieDetails = {\r\n    \"adult\": false,\r\n    \"backdrop_path\": \"/hJuDvwzS0SPlsE6MNFOpznQltDZ.jpg\",\r\n    \"belongs_to_collection\": null,\r\n    \"budget\": 0,\r\n    \"genres\": [\r\n        {\r\n            \"id\": 16,\r\n            \"name\": \"Animation\"\r\n        },\r\n        {\r\n            \"id\": 12,\r\n            \"name\": \"Adventure\"\r\n        },\r\n        {\r\n            \"id\": 14,\r\n            \"name\": \"Fantasy\"\r\n        },\r\n        {\r\n            \"id\": 10751,\r\n            \"name\": \"Family\"\r\n        },\r\n        {\r\n            \"id\": 28,\r\n            \"name\": \"Action\"\r\n        }\r\n    ],\r\n    \"homepage\": \"https://movies.disney.com/raya-and-the-last-dragon\",\r\n    \"id\": 527774,\r\n    \"imdb_id\": \"tt5109280\",\r\n    \"original_language\": \"en\",\r\n    \"original_title\": \"Raya and the Last Dragon\",\r\n    \"overview\": \"Long ago, in the fantasy world of Kumandra, humans and dragons lived together in harmony. But when an evil force threatened the land, the dragons sacrificed themselves to save humanity. Now, 500 years later, that same evil has returned and it’s up to a lone warrior, Raya, to track down the legendary last dragon to restore the fractured land and its divided people.\",\r\n    \"popularity\": 1806.885,\r\n    \"poster_path\": \"/lPsD10PP4rgUGiGR4CCXA6iY0QQ.jpg\",\r\n    \"production_companies\": [\r\n        {\r\n            \"id\": 2,\r\n            \"logo_path\": \"/wdrCwmRnLFJhEoH8GSfymY85KHT.png\",\r\n            \"name\": \"Walt Disney Pictures\",\r\n            \"origin_country\": \"US\"\r\n        },\r\n        {\r\n            \"id\": 6125,\r\n            \"logo_path\": \"/tVPmo07IHhBs4HuilrcV0yujsZ9.png\",\r\n            \"name\": \"Walt Disney Animation Studios\",\r\n            \"origin_country\": \"US\"\r\n        }\r\n    ],\r\n    \"production_countries\": [\r\n        {\r\n            \"iso_3166_1\": \"US\",\r\n            \"name\": \"United States of America\"\r\n        }\r\n    ],\r\n    \"release_date\": \"2021-03-03\",\r\n    \"revenue\": 56482606,\r\n    \"runtime\": 107,\r\n    \"spoken_languages\": [\r\n        {\r\n            \"english_name\": \"English\",\r\n            \"iso_639_1\": \"en\",\r\n            \"name\": \"English\"\r\n        }\r\n    ],\r\n    \"status\": \"Released\",\r\n    \"tagline\": \"A quest to save her world.\",\r\n    \"title\": \"Raya and the Last Dragon\",\r\n    \"video\": false,\r\n    \"vote_average\": 8.3,\r\n    \"vote_count\": 2257\r\n};\r\n~~~\r\n\r\nIn the next step, we'll use this data to do Express Routing.\r\n","route":"/lab/{{COURSEURL}}/topic08/book-1/Express","id":"Express","type":"step"},{"title":" Express Routing","shortTitle":"Express Routing","contentMd":"# Express Routing\r\n\r\nExpress gives us an easy way of mapping specific URL paths to Javascript functions. We will also need a tool to  test the API endpoints (e.g. GET or POST request to  http://localhost:8080/api/movies) . Postman can be used for this. \r\n\r\n## Postman\r\n\r\nIn the absence of Unit/Integration tests, you will need a HTTP client to manually test your APIs. Postman is currently one of the most popular tools used in API testing. \r\n\r\nYou can install it on your local host from  [here](https://www.postman.com/).\r\n\r\n![Postman](./img/postman.png)\r\n\r\nThere is good documentation on how to use it to test APIs. It will be used in the following exercises to rest the APIs...\r\n\r\n**Note**: there are other tools you can use also - feel free to opt for them if you wish.\r\n\r\n\r\n### Implementing the Movies API\r\n\r\nYou will now create a Movies router that will take care of all requests on the \"/api/movies/*\" path. \r\n\r\n- In the **/src/movies** folder, create a new file called **index.js** and enter the following javascript:\r\n\r\n~~~javascript\r\nimport express from 'express';\r\nimport {movies, movieReviews, movieDetails} from './moviesData';\r\n\r\nconst router = express.Router(); \r\nrouter.get('/', (req, res) => {\r\n    res.json(movies);\r\n});\r\n\r\nexport default router;\r\n~~~\r\n\r\n\r\n- Now update **index.js** in the **root** folder to use the new movies routing script by replacing the entire contents with the following code:\r\n\r\n~~~javascript\r\nimport dotenv from 'dotenv';\r\nimport express from 'express';\r\nimport moviesRouter from './src/movies';\r\n\r\ndotenv.config();\r\n\r\nconst app = express();\r\n\r\nconst port = process.env.PORT;\r\n\r\napp.use('/api/movies', moviesRouter);\r\n\r\napp.listen(port, () => {\r\n  console.info(`Server running at ${port}`);\r\n});\r\n~~~\r\n\r\n- Now test the application again by doing a HTTP GET on ``localhost:8080/api/movies``. You should see something similar to the following:  \r\n  <img src=\"./img/image-20230316161347393.png\" alt=\"image-20230316161347393\" style=\"zoom:50%;\" />\r\n\r\n## Commit your changes\r\n\r\n- Commit the changes you have just made using git.\r\n\r\n~~~bash\r\ngit add -A\r\ngit commit -m \"Initial Express App\"\r\n~~~\r\n\r\n","route":"/lab/{{COURSEURL}}/topic08/book-1/Express Routing","id":"Express Routing","type":"step"},{"title":" Paramaterised URLs","shortTitle":"Parameterized URLs","contentMd":"# Paramaterised URLs\r\n\r\nYou will now update the movies Router to implement the **GET /api/movies/:id** and **GET /api/movies/:id/reviews** endpoints\r\n\r\n\r\n## GET a Movie\r\n\r\n+ In **/api/movies/index.js**, add the following code just under the ``router.get(..);`` function to process **GET /api/movies/:id** endpoint:\r\n\r\n```javascript\r\n// Get movie details\r\nrouter.get('/:id', (req, res) => {\r\n    const id = parseInt(req.params.id);\r\n    if (movieDetails.id == id) {\r\n        res.status(200).json(movieDetails);\r\n    } else {\r\n        res.status(404).json({\r\n            message: 'The resource you requested could not be found.',\r\n            status_code: 404\r\n        });\r\n    }\r\n});\r\n```\r\n\r\nThe above code gets the movie id from the URL path and uses it to find and return the movie in the response. We only have one movie in our test data for this endpoint at the moment so, if the ID does not match 527774, it returns a standard 404 response. \r\n\r\n- Test with your HTTP Client using the ID 527774. Also, check that a 404 is returned if another ID if used.\r\n\r\n![Add movie (HTTP post)](./img/jaws.png)\r\n\r\n## Get a Movie Review\r\n\r\nTo implement movie reviews endpoint, we will return the list example review data we used in the last lab(exercises section). As before, it will suffice for now to use a reviews list for just one movie. \r\n\r\n+ In **/api/movies/index.js**, add the following code to process **GET /api/movies/:id/reviews** endpoint:\r\n\r\n\r\n```javascript\r\n// Get movie reviews\r\nrouter.get('/:id/reviews', (req, res) => {\r\n    const id = parseInt(req.params.id);\r\n    // find reviews in list\r\n    if (movieReviews.id == id) {\r\n        res.status(200).json(movieReviews);\r\n    } else {\r\n        res.status(404).json({\r\n            message: 'The resource you requested could not be found.',\r\n            status_code: 404\r\n        });\r\n    }\r\n}); \r\n```\r\n\r\nTest again using a Rest client by doing a **HTTP GET** using the  URL.\r\n\r\n > http://localhost:8080/api/movies/527774/reviews\r\n\r\nUsing Postman, you should see something similar to the following: \r\n\r\n![Update Movie (HTTP Put)](./img/put.png)\r\n\r\n## Add a Movie Review\r\n\r\nYou will now update the API to create movie reviews. For simplicity, the HTTP post request will contain the following in the body for the request: \r\n\r\n~~~json\r\n{\r\n  \"author\": \"string\",\r\n  \"content\": \"string\"\r\n}\r\n~~~\r\n\r\nYou will now add the endpoint to the router that will access the request body and add additional properties required for the review: ``created_at``, ``updated_at``, and ``id``.\r\n\r\n+ Add the necessary middleware to parse JSON data in the request body. Open the entry point script, **index.js** in the root folder, and add the express.json() function to the middleware stack **before the moviesRouter is added** (remember middleware is used in the order it appears) :\r\n\r\n  ~~~javascript\r\n  app.use(express.json());\r\n  ~~~\r\n\r\n+ Open a command line **in the root** folder and install the following package:\r\n\r\n  ~~~bash\r\n  npm install --save uniqid\r\n  ~~~\r\n\r\nThis module will be used to compute a random ID for a new review. Ultimately, the Mongo DB will do this.\r\n\r\n+ Open the movies router, **/api/movies/index.js** and add the following import statement  and new endpoint  to the existing code\r\n\r\n```javascript\r\nimport uniqid from 'uniqid'\r\n\r\n...\r\n\r\n//Post a movie review\r\nrouter.post('/:id/reviews', (req, res) => {\r\n    const id = parseInt(req.params.id);\r\n    \r\n    if (movieReviews.id == id) {\r\n        req.body.created_at = new Date();\r\n        req.body.updated_at = new Date();\r\n        req.body.id = uniqid();\r\n        movieReviews.results.push(req.body); //push the new review onto the list\r\n        res.status(201).json(req.body);\r\n    } else {\r\n        res.status(404).json({\r\n            message: 'The resource you requested could not be found.',\r\n            status_code: 404\r\n        });\r\n    }\r\n});\r\n\r\n```\r\n\r\n+ Now check it using **Postman**,  or other means, using the following URL and JSON body shown in the image below (localhost:8080/api/movies/527774/reviews). It should return the updated review object as shown.\r\n\r\n![Posting Movie Review](./img/review.png)  \r\n\r\n+ Also, if you use a different id in the URL, it will return a 404 status message.\r\n\r\n## Commit it\r\n\r\nCommit the changes you just made to your repo.\r\n\r\n```bash\r\ngit add --all\r\ngit commit -m \"added routing for movie and reviews\"\r\n```\r\n","route":"/lab/{{COURSEURL}}/topic08/book-1/Parameterized URLs","id":"Parameterized URLs","type":"step"},{"title":" Exercises","shortTitle":"Exercises","contentMd":"# Exercises\r\n\r\n### 1. Genres\r\n\r\nSimilar to the GET /api/movies endpoint, implement the **GET /api/genres** endpoint using the following temporary data:\r\n\r\n\r\n```json\r\n{\r\n    \"genres\": [\r\n        {\r\n            \"id\": 28,\r\n            \"name\": \"Action\"\r\n        },\r\n        {\r\n            \"id\": 12,\r\n            \"name\": \"Adventure\"\r\n        },\r\n        {\r\n            \"id\": 16,\r\n            \"name\": \"Animation\"\r\n        },\r\n        {\r\n            \"id\": 35,\r\n            \"name\": \"Comedy\"\r\n        },\r\n        {\r\n            \"id\": 80,\r\n            \"name\": \"Crime\"\r\n        },\r\n        {\r\n            \"id\": 99,\r\n            \"name\": \"Documentary\"\r\n        },\r\n        {\r\n            \"id\": 18,\r\n            \"name\": \"Drama\"\r\n        },\r\n        {\r\n            \"id\": 10751,\r\n            \"name\": \"Family\"\r\n        },\r\n        {\r\n            \"id\": 14,\r\n            \"name\": \"Fantasy\"\r\n        },\r\n        {\r\n            \"id\": 36,\r\n            \"name\": \"History\"\r\n        },\r\n        {\r\n            \"id\": 27,\r\n            \"name\": \"Horror\"\r\n        },\r\n        {\r\n            \"id\": 10402,\r\n            \"name\": \"Music\"\r\n        },\r\n        {\r\n            \"id\": 9648,\r\n            \"name\": \"Mystery\"\r\n        },\r\n        {\r\n            \"id\": 10749,\r\n            \"name\": \"Romance\"\r\n        },\r\n        {\r\n            \"id\": 878,\r\n            \"name\": \"Science Fiction\"\r\n        },\r\n        {\r\n            \"id\": 10770,\r\n            \"name\": \"TV Movie\"\r\n        },\r\n        {\r\n            \"id\": 53,\r\n            \"name\": \"Thriller\"\r\n        },\r\n        {\r\n            \"id\": 10752,\r\n            \"name\": \"War\"\r\n        },\r\n        {\r\n            \"id\": 37,\r\n            \"name\": \"Western\"\r\n        }\r\n    ]\r\n}\r\n```","route":"/lab/{{COURSEURL}}/topic08/book-1/Exercises","id":"Exercises","type":"step"},{"title":" Stopping/Starting your CodeSpace","shortTitle":"CodeSpace Management","contentMd":"# Stopping/Starting your CodeSpace\r\n\r\nYou can stop and start your codespace to save resources and to pause work. This is important as you only have a finite amount of useage for free each month (60 hours free /month for 2 cores ). \r\n\r\nYou can manage your CodeSpaces using VS code or [In the Browser]( you can view and manage them in your browser at https://github.com/codespaces.).\r\n\r\n\r\n\r\n### VS Code:\r\n\r\n#### Stopping a codespace\r\n\r\n1. Open the VS Code Command Palette (Shift+Command+P (Mac) / Ctrl+Shift+P (Windows/Linux)).\r\n2. Type `stop` and select **Codespaces: Stop Codespace** from the list of options.\r\n3. In the list of codespaces, select the codespace you want to stop.\r\n\r\n#### Restarting a codespace\r\n\r\n1. Open the VS Code Command Palette (Shift+Command+P (Mac) / Ctrl+Shift+P (Windows/Linux)).\r\n2. Type `connect` and select **Codespaces: Connect to Codespace** from the list of options.\r\n3. In the list of codespaces, select the codespace you want to restart.\r\n\r\n\r\n\r\n### In the Browser:\r\n\r\n#### Stopping a codespace\r\n\r\n1. Navigate to the \"Your Codespaces\" page at https://github.com/codespaces.\r\n2. To the right of the codespace you want to stop, click the ellipsis (**...**).\r\n3. Click **Stop codespace**.\r\n\r\n#### Restarting a codespace\r\n\r\n1. Navigate to the \"Your Codespaces\" page at https://github.com/codespaces.\r\n\r\n2. Click the name of the codespace you want to restart.\r\n\r\n   ","route":"/lab/{{COURSEURL}}/topic08/book-1/CodeSpace Management","id":"CodeSpace Management","type":"step"}]},{"route":"https://wit-ie.zoom.us/rec/share/uLp74wJdR4X6q56yPOK3nasbwn4u6WB7GuVggHKC7cRbwxF7OQ3KZTejSjOJb0I1.FjR4v4KgoyjQ25Ek","type":"web","title":"Lecture recording.\r","summary":"Web APis, DEv Containers, Node.js","contentMd":"Lecture recording.\r\n\r\nWeb APis, DEv Containers, Node.js","frontMatter":{},"id":"web-1","img":"https://{{COURSEURL}}/topic08/web-1/web.png","imgFile":"web.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false},{"route":"/archive/{{COURSEURL}}/topic08/archive","type":"archive","title":"Resources.\r","summary":"Example code from slides/lecture","contentMd":"Resources.\r\n\r\nExample code from slides/lecture","frontMatter":{},"id":"archive","img":"https://{{COURSEURL}}/topic08/archive/archive.jpg","imgFile":"archive.jpg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"archiveFile":"archive.zip"}]},{"route":"/topic/{{COURSEURL}}/topic09","type":"topic","title":" Express\r","summary":"Introduction to Express, a Node.js web application framework.","contentMd":"# Express\r\n\r\nIntroduction to Express, a Node.js web application framework.\r\n","frontMatter":{},"id":"topic09","img":"https://{{COURSEURL}}/topic09/topic.png","imgFile":"topic.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":true,"los":[{"route":"/talk/{{COURSEURL}}/topic09/talk-1","type":"talk","title":" Express Middleware & Routing\r","summary":"Middleware stack and Routing.","contentMd":"# Express Middleware & Routing\r\n\r\nMiddleware stack and Routing.","frontMatter":{},"id":"talk-1","img":"https://{{COURSEURL}}/topic09/talk-1/topic.png","imgFile":"topic.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"pdf":"https://{{COURSEURL}}/topic09/talk-1/topic.pdf","pdfFile":"topic.pdf"},{"route":"/talk/{{COURSEURL}}/topic09/talk-2","type":"talk","title":" Asynchronous Programming with Javascipt\r","summary":"Callbacks, Promises and Async-Await.","contentMd":"# Asynchronous Programming with Javascipt\r\n\r\nCallbacks, Promises and Async-Await.\r\n","frontMatter":{},"id":"talk-2","img":"https://{{COURSEURL}}/topic09/talk-2/promises.png","imgFile":"promises.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"pdf":"https://{{COURSEURL}}/topic09/talk-2/promises.pdf","pdfFile":"promises.pdf"},{"route":"/talk/{{COURSEURL}}/topic09/talk-3","type":"talk","title":" Clean Architecture\r","summary":"A Clean Architecture Approach for Express API. https://github.com/fxwalsh/ewd-week9-example.git","contentMd":"# Clean Architecture\r\nA Clean Architecture Approach for Express API. https://github.com/fxwalsh/ewd-week9-example.git","frontMatter":{},"id":"talk-3","img":"https://{{COURSEURL}}/topic09/talk-3/cleanarch.png","imgFile":"cleanarch.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"pdf":"https://{{COURSEURL}}/topic09/talk-3/cleanarch.pdf","pdfFile":"cleanarch.pdf"},{"route":"/lab/{{COURSEURL}}/topic09/book-1","type":"lab","title":"Lab-api2","summary":"This lab enhances the simple API from last week.\r","contentMd":"# Express\r\n\r\nThis lab enhances the simple API from last week.\r\n\r\nIn this lab you will:\r\n- Create an API for managing users and movies.\r\n- Use In-Memory Repository to persist data.\r\n- Integrate the external TMDB API. \r\n\r\n\r\n\r\n## Architecture\r\n\r\nThis lab follows a layered approach that's inspired by [clean architecure](https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html). The goal is to produce resilient software that is divided into layers,  and is (reasonably) independent of technologies. We have already decided the technologies for this module. However,  choice of database, platform, or framework should be one of the last decisions. Furthermore, you should be able to swap out an infrastructure dependency without having to change any core logic or modules. \r\n\r\nThe following lab applies the following design to the API development. This will be reflected in the project folder structure:\r\n![image-20220324154157402](./img/main1.png)\r\n\r\nA key feature of this approach is the \"Dependency Rule\", which is that source code dependencies can only point inwards. Services can use entities, Controllers can use services. Nothing in an inner layer can \"know\" about something in an outer layer. For example, our API framework(``express`` ) will not appear in the controllers, services or entities.  That also includes, functions, classes. variables, or any other named software entity.\r\n\r\nEach layer can be described as follows(going from inner layers to outer: \r\n\r\n**Entities:** Core entities that are used in business use-cases and logic(e.g. Account, User, Movie)\r\n\r\n**Repositories:** Defines database/ data store interactions.\r\n\r\n**Services:** Contains the business scenarios that our api supports(e.g. register account, get movie details ).\r\n\r\n**Controllers:** Extract the parameters (query or body) from the HTTP request, call the relevant service, and return the HTTP response. In this case, they are actually routing middleware functions that we discussed in class.\r\n\r\n**Routes:** Routes map received HTTP request to the correct controller. They can be used to chain together several controllers. \r\n","frontMatter":{},"id":"book-1","img":"https://{{COURSEURL}}/topic09/book-1/img/main1.png","imgFile":"img/main1.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"title":" Express","shortTitle":"Lab-api2","contentMd":"# Express\r\n\r\nThis lab enhances the simple API from last week.\r\n\r\nIn this lab you will:\r\n- Create an API for managing users and movies.\r\n- Use In-Memory Repository to persist data.\r\n- Integrate the external TMDB API. \r\n\r\n\r\n\r\n## Architecture\r\n\r\nThis lab follows a layered approach that's inspired by [clean architecure](https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html). The goal is to produce resilient software that is divided into layers,  and is (reasonably) independent of technologies. We have already decided the technologies for this module. However,  choice of database, platform, or framework should be one of the last decisions. Furthermore, you should be able to swap out an infrastructure dependency without having to change any core logic or modules. \r\n\r\nThe following lab applies the following design to the API development. This will be reflected in the project folder structure:\r\n![image-20220324154157402](./img/main1.png)\r\n\r\nA key feature of this approach is the \"Dependency Rule\", which is that source code dependencies can only point inwards. Services can use entities, Controllers can use services. Nothing in an inner layer can \"know\" about something in an outer layer. For example, our API framework(``express`` ) will not appear in the controllers, services or entities.  That also includes, functions, classes. variables, or any other named software entity.\r\n\r\nEach layer can be described as follows(going from inner layers to outer: \r\n\r\n**Entities:** Core entities that are used in business use-cases and logic(e.g. Account, User, Movie)\r\n\r\n**Repositories:** Defines database/ data store interactions.\r\n\r\n**Services:** Contains the business scenarios that our api supports(e.g. register account, get movie details ).\r\n\r\n**Controllers:** Extract the parameters (query or body) from the HTTP request, call the relevant service, and return the HTTP response. In this case, they are actually routing middleware functions that we discussed in class.\r\n\r\n**Routes:** Routes map received HTTP request to the correct controller. They can be used to chain together several controllers. \r\n","route":"/lab/{{COURSEURL}}/topic09/book-1/Lab-api2","id":"Lab-api2","type":"step"},{"title":" User Accounts API","shortTitle":"01","contentMd":"# User Accounts API\r\n\r\nWe will continue to develop an API for the MovieDB you completed in the last lab.\r\n\r\nIn our API, we will manage user accounts and use  account details to control access to the movie endpoints. \r\nThe first part of the lab will create the following endpoints to achieve this:\r\n\r\n![image-20230322162342804](./img/image-20230322162342804.png)\r\n\r\nThe ``{id}`` in the paths indicate parameterised part that will be used in the API implementation. \r\n\r\n### Folder Structure \r\n\r\n+ In the *src* folder from the previous lab, create a folder called ***accounts*** that contains the following sub folders:\r\n\r\n![image-20220324114524469](./img/image-20220324114524469.png)\r\n\r\n\r\n\r\n## Account Entity\r\n\r\n+ In */src/accounts/entities* create a new script called ***Account.js*** with the following content:\r\n  ~~~javascript\r\n  export default class {\r\n      constructor(id = undefined, firstName, lastName, email, password, favourites = []) {\r\n        this.id = id;\r\n        this.firstName = firstName;\r\n        this.lastName = lastName;\r\n        this.email = email;\r\n        this.password = password;\r\n        this.favourites = favourites;\r\n      }\r\n    }\r\n  \r\n  ~~~\r\n\r\nThe Entities folder contains the business entities used in the App. In this case it is the  Account class.  Notice there is no dependencies on other modules or frameworks.\r\n\r\n## Accounts Repository\r\n\r\n+ In *src/accounts/repositories*, create a new file called ***Repository.js*** with the following content\r\n\r\n  ~~~javascript\r\n  export default  class {\r\n  \r\n    persist(account) {\r\n      throw new Error('ERR_METHOD_NOT_IMPLEMENTED');\r\n    }\r\n  \r\n    merge(account) {\r\n      throw new Error('ERR_METHOD_NOT_IMPLEMENTED');\r\n    }\r\n  \r\n    remove(accountId) {\r\n      throw new Error('ERR_METHOD_NOT_IMPLEMENTED');\r\n    }\r\n  \r\n    get(accountId) {\r\n      throw new Error('ERR_METHOD_NOT_IMPLEMENTED');\r\n    }\r\n  \r\n    getByEmail(email) {\r\n      throw new Error('ERR_METHOD_NOT_IMPLEMENTED');\r\n    }\r\n  \r\n    find(query) {\r\n      throw new Error('ERR_METHOD_NOT_IMPLEMENTED');\r\n    }\r\n  \r\n  }\r\n  ~~~\r\n\r\n  The Repository class provides a \"contract\" or interface description of how our Accounts repository will work. Essentially it discibes how we will access data for out API. It is independent of any DB implementation details. We can now provide a \"concrete\" implementation by extending this class \r\n\r\n### Repository implementation\r\n\r\nIn the absence of a \"real\" database, we will provide a an in-memory  implementation of the Accounts repositor (we will replace this with MongoDB implementation next week).\r\n\r\n+ In *src/accounts/repositories*,  create a new file called InMemoryRepository.js with the following content:\r\n\r\n  ~~~javascript\r\n  import AccountRepository from './Repository';\r\n  \r\n  export default class extends AccountRepository {\r\n  \r\n      constructor() {\r\n          super();\r\n          this.index = 1;\r\n          this.data = {};\r\n      }\r\n      persist(accountEntity) {\r\n          const row = Object.assign({}, accountEntity);\r\n          const rowId = this.index++;\r\n          row.id = rowId;\r\n          this.data[rowId] = row;\r\n          return row;\r\n      }\r\n      merge(accountEntity) {\r\n          let row = this.data[accountEntity.id];\r\n          Object.assign(row, accountEntity);\r\n          return Promise.resolve(row);\r\n      }\r\n      remove(userId) {\r\n          delete this.data[userId];\r\n          return Promise.resolve();\r\n      }\r\n      get(userId) {\r\n          return Promise.resolve(this.data[userId]);\r\n      }\r\n      getByEmail(userEmail) {\r\n          const users = this._dataAsArray();\r\n          return Promise.resolve(users.find(user => user.email === userEmail));\r\n      }\r\n      find() {\r\n          return Promise.resolve(this.dataAsArray());\r\n      }\r\n      dataAsArray() {\r\n          return Object.keys(this.data).map(key => this.data[key]);\r\n      }\r\n  }\r\n  ~~~\r\n  \r\n  This class provides implementations of the methods in Repository.js. It uses an in-memory JavaScript object to store account details. \r\n\r\n## Accounts Service\r\n\r\n+ In */src/accounts/services*, create a new file called ***index.js*** with the following content:\r\n\r\n  ~~~javascript\r\n  import Account from '../entities/Account';\r\n  \r\n  export default {\r\n    registerAccount: async  (firstName, lastName, email, password, {accountsRepository}) => {\r\n      const account = new Account(undefined, firstName, lastName, email, password);\r\n      return accountsRepository.persist(account);\r\n    },\r\n    getAccount: (accountId, {accountsRepository}) => {\r\n      return accountsRepository.get(accountId);\r\n    },\r\n    find: ({accountsRepository})=>{\r\n      return accountsRepository.find();\r\n    },\r\n    findByEmail: (email, {accountsRepository})=>{\r\n      return accountsRepository.getByEmail(email);\r\n    }\r\n  };\r\n  ~~~\r\n\r\nThe accounts service contains the use case scenarios that we need to manage user accounts, like \"Register and Account\" or \"Find an account using email\".\r\nIt also interacts with the accounts Repository. Notice that the *accountsRepository* is passed in to each \"use case\" as part of the function arguments. It is **not** an imported module. This is **dependency injection**, whereby the service itself has no direct dependencies to a particular Repository implementation.\r\n\r\n## Accounts Controller\r\n\r\n+ In */src/accounts/controller*s, create a new file called ***index.js*** with the following content:\r\n\r\n~~~javascript\r\nimport accountService from \"../services\";\r\n\r\nexport default (dependencies) => {\r\n\r\n    const createAccount = async (request, response, next) => {\r\n        // Input\r\n        const { firstName, lastName, email, password } = request.body;\r\n        // Treatment\r\n        const account = await accountService.registerAccount(firstName, lastName, email, password, dependencies);\r\n        //output\r\n        response.status(201).json(account)\r\n    };\r\n    const getAccount = async (request, response, next) => {\r\n        //input\r\n        const accountId = request.params.id;\r\n        // Treatment\r\n        const account = await accountService.getAccount(accountId, dependencies);\r\n        //output\r\n        response.status(200).json(account);\r\n    };\r\n    const listAccounts = async (request, response, next) => {\r\n        // Treatment\r\n        const accounts = await accountService.find(dependencies);\r\n        //output\r\n        response.status(200).json(accounts);\r\n    };\r\n\r\n\r\n    return {\r\n        createAccount,\r\n        getAccount,\r\n        listAccounts\r\n    };\r\n};\r\n~~~\r\n\r\nThe controller orchestrates input and output to and from  the API. Notice that is calls the accounts service which contain more \"pure\" business logic. Controllers handle the HTTP request and calling services . Controllers  orchestrate the service calls and decide what to do with the data returned.\r\n\r\nYou might wonder why we don't access the Accounts Repository  directly from the controller, since all it seems to do is pass the request to the service and return the response. While our app is simple at the moment,  in that all it does is access the database through our Repository, as we develop further it may get more complex.\r\n\r\n## Express Router\r\n\r\n+ In */src/accounts/routes*, create a new file called ***index.js*** with the following content:\r\n\r\n  ~~~javascript\r\n  import express from 'express';\r\n  import AccountsController from '../controllers';\r\n  \r\n  const createRouter = (dependencies) => {\r\n      const router = express.Router();\r\n      // load controller with dependencies\r\n      const accountsController = AccountsController(dependencies);\r\n      router.route('/')\r\n          .post(accountsController.createAccount);\r\n  \r\n          router.route('/')\r\n          .get(accountsController.listAccounts);\r\n  \r\n      router.route('/:id')\r\n          .get(accountsController.getAccount);\r\n      \r\n      return router;\r\n  };\r\n  export default createRouter;\r\n  ~~~\r\n\r\nVery little logic should go in your routers. They should only connect our controller functions in the express middleware (for now,  we only have one per end point). As we go futher, we can add more controllers, for example, that handles authentication, and have routes that need authentication.\r\n\r\nAlso, notice this is the first time we've imported Express. Everything up to now is independent of the Express framework and could be used in another framwork is we wish.\r\n\r\n## Config and Dependencies\r\n\r\n+ Add the following entry to ***.env*** file(in the root folder):\r\n  ~~~javascript\r\n  DATABASE_DIALECT=in-memory\r\n  ~~~\r\n\r\n  We use this entry to indicate which database \"dialect\" we wish to use. Currently we don't have a real DB so we'll use in-memory db implementation \r\n  \r\n+ In the ***src*** folder of the project (the folder that contains the accounts and movies folder), create a new folder called ***config***. Create a file called ***dependencies.js*** and add the following content:\r\n  \r\n  ~~~javascript\r\n  import AccountsRepositoryInMemory from '../accounts/repositories/in-memory/AccountRepository';\r\n  \r\n  const buildDependencies = () => {\r\n    const dependencies = {\r\n    };\r\n  \r\n    if (process.env.DATABASE_DIALECT === \"in-memory\") {\r\n      dependencies.accountsRepository = new AccountsRepositoryInMemory();\r\n    } else if (process.env.DATABASE_DIALECT === \"mongo\") {\r\n      throw new Error('Add Mongo Support');\r\n    } else if (process.env.DATABASE_DIALECT === \"mysql\") {\r\n      throw new Error('Add MySQL support');\r\n    } else {\r\n      throw new Error('Add DB Support to project');\r\n    }\r\n    return dependencies;\r\n  };\r\n  \r\n  export default buildDependencies;\r\n  ~~~\r\n  \r\n\r\nThis module exports the `buildDependencies()` function. We will import this when the API starts and use it to  \"inject\" infrastucure dependencies(such as Repositories) into the routes/services.\r\n\r\n## Update /index.js\r\n\r\nWe now need to update the API entry point, *index.js*, to apply the Accounts router to the '/api/accounts' path. We also need to include the dependencies\r\n\r\n+ Open ***index.js*** on the root folder of the project and add the following :\r\n\r\n  ~~~javascript\r\n  import createAccountsRouter from './src/accounts/routes';\r\n  import buildDependencies from \"./src/config/dependencies\";\r\n  //... Existing code \r\n  \r\n  //.. Add this after db.init();\r\n  const dependencies = buildDependencies();\r\n  ~~~\r\n\r\n+ In the same script(index.js), add the following route to the Express app. \r\n\r\n  ~~~javascript\r\n  \r\n  \r\n  //... Existing code\r\n  \r\n  app.use('/api/accounts', createAccountsRouter(dependencies));\r\n  ~~~\r\n  \r\n  \r\n\r\n## Test It!\r\n\r\nUsing Postman, test the routes you've just implemented\r\n\r\n+ Post some account data to the API as shown below. \r\n\r\n![image-20220324125046616](./img/image-20220324125046616.png)\r\n\r\n+ Once you've added some Account data, do a **GET /api/accounts** and **GET /api/accounts/:id** to see if it worked!\r\n\r\n## Commit your changes\r\n\r\n- Commit the changes you have just made using git.\r\n\r\n~~~bash\r\ngit add -A\r\ngit commit -m \"Added Accounts Endpoints\"\r\n~~~\r\n","route":"/lab/{{COURSEURL}}/topic09/book-1/01","id":"01","type":"step"},{"title":" Movies ","shortTitle":"02","contentMd":"# Movies \r\n\r\nLets now refactor the movies endpoints so that they conform to the  structure we've applied to accounts. We also want to integrate to the TMDB api to provide main source of movie data. For this we will use [axios](https://axios-http.com/), a HTTP client module.  \r\n\r\n## Update .env \r\n\r\nYou will need to include the TMDB api key you used in previous labs. \r\n\r\n+ Add your TMDBkey to  your ***.env*** file as follows: \r\n  ```TMDB_KEY=YOUR_TBDM_KEY```\r\n\r\n+ Import **axios** as a dependency. Enter the following on the command line:\r\n  ~~~\r\n  npm install -save axios\r\n  ~~~\r\n\r\nAxios is a HTTP client module that we will use to make requests to the TMDB API.\r\n\r\n## Folder structure\r\n\r\n+ Inside the folder ***src/movies***, create the same folder structure as you did in the accounts folder.\r\n   ![image-20220324125352929](./img/image-20220324125352929.png)\r\n  \r\n  We won't use all of these folders yet. \r\n  \r\n+ In the ***src/movies/services*** folder, create a file called ***index.js*** add the following code:\r\n\r\n~~~javascript\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n    getMovie: async (movieId) => {\r\n        const response = await axios.get(\r\n            `https://api.themoviedb.org/3/movie/${movieId}?api_key=${process.env.TMDB_KEY}`\r\n          );\r\n          return response.data;\r\n    },\r\n    find: async (query) => {\r\n        const response = await axios.get(\r\n            `https://api.themoviedb.org/3/discover/movie?api_key=${process.env.TMDB_KEY}&language=en-US&include_adult=false&include_video=false&${query}`\r\n          );\r\n          return response.data;\r\n    },\r\n\r\n  };\r\n~~~\r\n\r\n\r\n\r\n+ In the ***src/movies/controllers*** folder, create a file called ***index.js*** add the following code:\r\n\r\n  ~~~javascript\r\n  import moviesService from \"./../services\";\r\n  \r\n  export default (dependencies) => {\r\n  \r\n      const getMovie = async (request, response, next) => {\r\n          //input\r\n          const movieId = request.params.id;\r\n          // Treatment\r\n          const movie = await moviesService.getMovie(movieId, dependencies);\r\n          //output\r\n          response.status(200).json(movie);\r\n      };\r\n      const find = async (request, response, next) => {\r\n          //input\r\n          const query = request.query;\r\n          // Treatment\r\n          const movies = await moviesService.find(query, dependencies);\r\n          //output\r\n          response.status(200).json(movies);\r\n      };\r\n  \r\n      return {\r\n          getMovie,\r\n          find\r\n      };\r\n  };\r\n  ~~~\r\n\r\n+ In the ***src/movies/routes*** folder, create a file called ***index.js*** add the following code:\r\n\r\n  ~~~javascript\r\n  import express from 'express';\r\n  import MoviesController from '../controllers';\r\n  \r\n  const createMoviesRouter = (dependencies) => {\r\n      const router = express.Router();\r\n      // load controllers with dependencies\r\n      const moviesController = MoviesController(dependencies);\r\n  \r\n      router.route('/:id')\r\n          .get(moviesController.getMovie);\r\n  \r\n      router.route('/')\r\n          .get(moviesController.find);\r\n  \r\n      return router;\r\n  };\r\n  export default createMoviesRouter;\r\n  ~~~\r\n\r\n## Update index.js\r\n\r\nNow we need to change the routing for the ***'api/movies'*** path in the app entry script.\r\n\r\n+ Open the api entry point,  ***index.js*** , in the root folder and add the following to import the new movies router:\r\n\r\n  ~~~java\r\n  import createMoviesRouter from './src/movies/routes';\r\n  //.....existing code\r\n  ~~~\r\n\r\n+ You can remove the previous import statement for the movies router from last week.\r\n\r\n+ **Replace the existing line of code** that adds the movies router to the following:\r\n\r\n  ~~~javascript\r\n  app.use('/api/movies', createMoviesRouter(dependencies));\r\n  ~~~\r\n\r\n\r\n\r\n## Test It!\r\n\r\n+ As with the Accounts endpoints, test that your implementation has worked. It should return Movie data from the TMBD api.\r\n\r\n![image-20220324132057174](./img/image-20220324132057174.png)\r\n\r\n## Commit your changes\r\n\r\n- Commit the changes you have just made using git.\r\n\r\n~~~bash\r\ngit add -A\r\ngit commit -m \"Updated Movies Endpoints\"\r\n~~~\r\n","route":"/lab/{{COURSEURL}}/topic09/book-1/02","id":"02","type":"step"},{"title":" Exercises","shortTitle":"03","contentMd":"# Exercises\r\n\r\n## Update Accounts\r\n\r\n+ Using the same process in the lab, implement the API endpoint to update an account. The endpoint will be **POST /api/accounts/:id**. You will need to do the following:\r\n\r\n  + Add a new updateAccount funtion to the Account service that creates a new Account instance from the input parameters and passes it to the accountsRepository.merge() method (**hint:** this will be very similar to the *registerAccount* function in the same service):\r\n\r\n    ~~~javascipt\r\n     updateAccount: (id, firstName, lastName, email, password, {accountsRepository})=>{\r\n       //TODO - you implement the rest\r\n      }\r\n    \r\n    ~~~\r\n\r\n+ In the Accounts controller, add this function and add the missing implementation (remember to add the function to the return statement at the end of the script also):\r\n\r\n  ~~~javascript\r\n      const updateAccount = async (request, response, next) => {\r\n          // Input\r\n          const id = request.params.id;\r\n  \t//TODO - You implement the rest\r\n      };\r\n  ~~~\r\n\r\n  + Add the following to the Accounts router. Again, implement the missing code:\r\n    ~~~javascript\r\n        router.route('/:id')\r\n            .put(//TODO - You Do The Rest );\r\n    ~~~\r\n\r\n    \r\n\r\n## Upcoming Movies\r\n\r\nThe endpoint for accessing upcoming movies is the following:\r\n~~~\r\nhttps://api.themoviedb.org/3/movie/upcoming?api_key=${process.env.TMDB_KEY}&language=en-US&include_adult=false&include_video=false\r\n~~~\r\n\r\n+ Use the above URL to add an endpoint for Upcoming Movies to the Movies API (GET /api/movies/upcoming) as follows:\r\n\r\n  + In the Movies Service, add a new function:\r\n    ~~~java\r\n    findUpcoming: async ()=>{\r\n        //TODO: You implement the rest\r\n    }\r\n    ~~~\r\n\r\n  + In the Movies controller, add the corresponding function to handle the requests and responses:\r\n    ~~~javascript\r\n    const getUpcomingMovies = async (request, response, next) => {\r\n    //TODO: You implement the rest\r\n    };\r\n    ~~~\r\n\r\n  + Add the controller from the Movies router for the correct route:\r\n    ~~~javascript\r\n    router.route('/upcoming')\r\n            .get(//Todo\r\n    \t\t\t);\r\n    ~~~\r\n  \r\n  \r\n  ## Commit your changes\r\n  \r\n  - Commit the changes you have just made using git.\r\n  \r\n  ~~~bash\r\n  git add -A\r\n  git commit -m \"Finishes Exercises for Node Lab2\"\r\n  ~~~","route":"/lab/{{COURSEURL}}/topic09/book-1/03","id":"03","type":"step"}]},{"route":"https://wit-ie.zoom.us/rec/share/ts3XLas1y2shnTeDIe7nDayvW5ItApiVIgiCnrMMEQ77Do2iTgOOKXhuXGnRdH4H.3-VFviKXts8U2lC7","type":"web","title":"Lecture recording.\r","summary":"Express.js, Async/Await, Clean Architecture","contentMd":"Lecture recording.\r\n\r\nExpress.js, Async/Await, Clean Architecture","frontMatter":{},"id":"web-1","img":"https://{{COURSEURL}}/topic09/web-1/web.png","imgFile":"web.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false},{"route":"/archive/{{COURSEURL}}/topic09/archive","type":"archive","title":"Resources.\r","summary":"Some example code from slides/lecture","contentMd":"Resources.\r\n\r\nSome example code from slides/lecture ","frontMatter":{},"id":"archive","img":"https://{{COURSEURL}}/topic09/archive/archive.jpg","imgFile":"archive.jpg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"archiveFile":"archive.zip"}]},{"route":"/topic/{{COURSEURL}}/topic10","type":"topic","title":" Validation and Mongoose\r","summary":"Mongo is a NoSQL Database. Mongoose provides elegant Mongodb object modelling in Node.js. This topic explores how to use both in Express apps.","contentMd":"# Validation and Mongoose\r\n\r\nMongo is a NoSQL Database. Mongoose provides elegant Mongodb object modelling in Node.js. This topic explores how to use both in Express apps.","frontMatter":{},"id":"topic10","img":"https://{{COURSEURL}}/topic10/topic.jpg","imgFile":"topic.jpg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":true,"los":[{"route":"/talk/{{COURSEURL}}/topic10/talk-0","type":"talk","title":" Validation using Joi\r","summary":"Request data validation","contentMd":"# Validation using Joi\r\n\r\nRequest data validation\r\n","frontMatter":{},"id":"talk-0","img":"https://{{COURSEURL}}/topic10/talk-0/validation.png","imgFile":"validation.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"pdf":"https://{{COURSEURL}}/topic10/talk-0/validation.pdf","pdfFile":"validation.pdf"},{"route":"/talk/{{COURSEURL}}/topic10/talk-1","type":"talk","title":" MongoDB and Mongoose\r","summary":"This topic introduces MongoDB and Mongoose, an object modelling tool","contentMd":"# MongoDB and Mongoose\r\nThis topic introduces MongoDB and Mongoose, an object modelling tool","frontMatter":{},"id":"talk-1","img":"https://{{COURSEURL}}/topic10/talk-1/mongoDB.png","imgFile":"mongoDB.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"pdf":"https://{{COURSEURL}}/topic10/talk-1/mongoDB.pdf","pdfFile":"mongoDB.pdf"},{"route":"/lab/{{COURSEURL}}/topic10/book-1","type":"lab","title":"Lab-api3","summary":"This lab introduces Mongoose, a simple way of interacting with your Mongo database.\r","contentMd":"# Mongoose\r\n\r\nThis lab introduces Mongoose, a simple way of interacting with your Mongo database.\r\n\r\nIn this lab you will develop:\r\n- Use MongoDB to persist User and Movie Rating Data\r\n- Integrate the API to use Mongoose\r\n- Provide Validation\r\n","frontMatter":{},"id":"book-1","img":"https://{{COURSEURL}}/topic10/book-1/img/main.png","imgFile":"img/main.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"title":" Mongoose","shortTitle":"Lab-api3","contentMd":"# Mongoose\r\n\r\nThis lab introduces Mongoose, a simple way of interacting with your Mongo database.\r\n\r\nIn this lab you will develop:\r\n- Use MongoDB to persist User and Movie Rating Data\r\n- Integrate the API to use Mongoose\r\n- Provide Validation\r\n","route":"/lab/{{COURSEURL}}/topic10/book-1/Lab-api3","id":"Lab-api3","type":"step"},{"title":" Set up","shortTitle":"01","contentMd":"# Set up\r\n\r\nWe will continue to develop an API for the MovieDB that will be able to drive the React App you completed in the labs. We will use last weeks lab as a starting point. \r\n\r\n\r\n- Start last weeks lab. Use Postman to check a few of the endpoints from last weeks lab:\r\n\r\n![Get Movies](./img/movies1.png)\r\n\r\n![Get a Movies](./img/movies2.png)\r\n\r\nOnce it's up and running, we can now add a User to the API and persist using MongoDB and Mongoose\r\n\r\n## Getting Mongo\r\n\r\n![Mongoose](./img/download.png)\r\n\r\nYou need to create a MongoDB service for your API. We will do this using another Docker Container and Docker Compose to combine it with our work so far to create a multi-container environment. \r\nTo do this, we will take a pre-existing template for a Node-Mongo environment: https://github.com/devcontainers/templates/tree/main/src/javascript-node-mongo\r\n\r\nPlace the following files in your .devcontainer folder in your lab\r\n\r\n### DockerFile\r\n\r\n+ In the folder ``.devcontainer``, create a new file called \"DockerFile\" with the following content.\r\n\r\n\r\n\r\n~~~dockerfile\r\nFROM mcr.microsoft.com/devcontainers/javascript-node:0-18\r\n\r\n# Install MongoDB command line tools - though mongo-database-tools not available on arm64\r\nARG MONGO_TOOLS_VERSION=6.0\r\nRUN . /etc/os-release \\\r\n    && curl -sSL \"https://www.mongodb.org/static/pgp/server-${MONGO_TOOLS_VERSION}.asc\" | gpg --dearmor > /usr/share/keyrings/mongodb-archive-keyring.gpg \\\r\n    && echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/mongodb-archive-keyring.gpg] http://repo.mongodb.org/apt/debian ${VERSION_CODENAME}/mongodb-org/${MONGO_TOOLS_VERSION} main\" | tee /etc/apt/sources.list.d/mongodb-org-${MONGO_TOOLS_VERSION}.list \\\r\n    && apt-get update && export DEBIAN_FRONTEND=noninteractive \\\r\n    && apt-get install -y mongodb-mongosh \\\r\n    && if [ \"$(dpkg --print-architecture)\" = \"amd64\" ]; then apt-get install -y mongodb-database-tools; fi \\\r\n    && apt-get clean -y && rm -rf /var/lib/apt/lists/*\r\n\r\nENV DEVCONTAINER=true\r\n~~~\r\n\r\nThis uses the same base container as the previous lab. We also need to add some Mongo command Line tools in the App container. This will allow us to check the DB from VS Code.\r\n\r\n### DockerCompose\r\n\r\nDocker Compose allows us to \"compose\" two different containers; one for the express app and another for the MongoDB. \r\n\r\n+ In the folder ``.devcontainer``, create a new file called \"docker-compose.yml\" with the following content.\r\n\r\n~~~dockerfile\r\nversion: '3.8'\r\n\r\nservices:\r\n  app:\r\n    build: \r\n      context: .\r\n      dockerfile: DockerFile\r\n    volumes:\r\n      - ../..:/workspaces:cached\r\n\r\n    # Overrides default command so things don't shut down after the process ends.\r\n    command: sleep infinity\r\n\r\n    # Runs app on the same network as the database container, allows \"forwardPorts\" in devcontainer.json function.\r\n    network_mode: service:db\r\n\r\n\r\n  db:\r\n    image: mongo:latest\r\n    restart: unless-stopped\r\n    volumes:\r\n      - mongodb-data:/data/db\r\n\r\nvolumes:\r\n  mongodb-data:\r\n~~~\r\n\r\n\r\n\r\n### devcontainer.json\r\n\r\n+ In the folder ``.devcontainer``, replace the contents of  \"devcontainer.json\" with the following content.\r\n\r\n~~~dockerfile\r\n{\r\n\t\"name\": \"ewd-labs\",\r\n\t\"dockerComposeFile\": \"docker-compose.yml\",\r\n\t\"service\": \"app\",\r\n\t\"workspaceFolder\": \"/workspaces/${localWorkspaceFolderBasename}\",\r\n\r\n\t// Configure tool-specific properties.\r\n\t\"customizations\": {\r\n\t\t// Configure properties specific to VS Code.\r\n\t\t\"vscode\": {\r\n\t\t\t// Add the IDs of extensions you want installed when the container is created.\r\n\t\t\t\"extensions\": [\r\n\t\t\t\t\"mongodb.mongodb-vscode\"\r\n\t\t\t]\r\n\t\t}\r\n\t}\r\n}\r\n~~~\r\n\r\nRebuild your Codespace now. You should see it build with both containers available\r\n","route":"/lab/{{COURSEURL}}/topic10/book-1/01","id":"01","type":"step"},{"title":" Connect DB: Mongoose ","shortTitle":"02","contentMd":"# Connect DB: Mongoose \r\n\r\nInstall Mongoose in your lab project folder for the Express app.\r\n\r\n~~~bash\r\nnpm install -save mongoose\r\n~~~\r\n\r\n## Connect the Database\r\n\r\nYou should only need to connect to the Mongo database once, when your Express application starts.\r\n\r\n- Add the **mongoDb URL** to the end of your ``.env`` file in the root folder of the express app. If you set it up on your local machine with default settings,  it will be the following:  \r\n\r\n```bash\r\nDATABASE_URL=mongodb://localhost:27017/movies_db\r\n```\r\n\r\n+ In the same file, update the database dialect to `mongo`\r\n\r\n  ~~~\r\n  DATABASE_DIALECT=mongo\r\n  ~~~\r\n\r\n\r\n+ Remove the Raise Error lins of code in the dependencies.js script\r\n\r\n<img src=\"./img/drop.png\" alt=\"image-20230327165148950\" style=\"zoom:50%;\" />\r\n\r\n\r\n+ In the ***/src/config*** folder of the app,  create a file called  ***db.js*** with the following contents:\r\n\r\n```javascript\r\nimport dotenv from 'dotenv';\r\nimport mongoose from 'mongoose';\r\n\r\ndotenv.config();\r\n\r\nexport default {\r\n\r\n    async init() {\r\n        if (process.env.DATABASE_DIALECT === \"mongo\") {\r\n            // Connect to database\r\n            mongoose.connect(process.env.DATABASE_URL);\r\n            const connection = await mongoose.connection;\r\n\r\n            connection.on('error', (err) => {\r\n                console.log(`database connection error: ${err}`);\r\n            });\r\n            connection.on('disconnected', () => {\r\n                console.log('database disconnected');\r\n            });\r\n            connection.once('open', async () => {\r\n                console.log(`database connected to ${connection.name} on ${connection.host}`);\r\n                //delete the existing  collections if in development mode\r\n                if (process.env.NODE_ENV == \"development\") {\r\n\r\n                    // Get all collections\r\n                    const collections = await connection.db.listCollections().toArray();\r\n\r\n                    //delete all collections\r\n                    collections\r\n                        .map((collection) => collection.name)\r\n                        .forEach(async (collectionName) => {\r\n                            connection.dropCollection(collectionName);\r\n                        });\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n};\r\n```\r\n\r\nHave a look at the event callbacks in the above code. In the database \"open\" event, we check if the node environment is in development mode (``if (process.env.NODE_ENV==\"development\")``)  and drop the accounts collection. This is to allow us to test the app and not build up a lot of test data.\r\n\r\n+ Now add the following lines to the import statements at the top of the entry point, index.js,  script in  the root folder.\r\n\r\n~~~javascript\r\nimport db from './src/config/db';\r\n....other code\r\n\r\ndb.init(); //add BELOW dotenv.config();\r\n~~~\r\n\r\nThis will automatically trigger the connection to the database when the app starts up. If you start the app, you should see the connection details on the console output:\r\n\r\n<img src=\"./img/image-20220330164722839.png\" alt=\"image-20220330164722839\" style=\"zoom:50%;\" />\r\n\r\n\r\n\r\n## Account Repository using Mongo as the DB\r\n\r\nWe will need a collection to store account details for our Movie app. Having account details will allow us to create authentication functionality and support things like movie reviews and favourites which are associated with a user/account. \r\n\r\nWe need to create a Repository class that declares the mongoose object structure (or schema) for the Accounts collection in the database. \r\n\r\n\r\n\r\n+ In ***src/accounts/repositories***, add a new script called ***MongoAccountRepository.js*** in *src/accounts/repositories* with the following content:\r\n  ~~~javascript\r\n  import Account from '../../entities/Account';\r\n  import mongoose from 'mongoose';\r\n  import AccountRepository from './Repository';\r\n  \r\n  export default class extends AccountRepository {\r\n  \r\n      constructor() {\r\n          super();\r\n          const accountsSchema = new mongoose.Schema({\r\n              firstName: String,\r\n              lastName: String,\r\n              email: {type: String, unique: true, index: true},\r\n              password: String,\r\n              favourites: [Number]\r\n          });\r\n          this.model = mongoose.model('Account', accountsSchema);\r\n      }\r\n  \r\n      async persist(accountEntity) {\r\n          const {firstName, lastName, email, password} = accountEntity;\r\n          const result = new this.model({firstName, lastName, email, password});\r\n          await result.save();\r\n          accountEntity.id=result.id;\r\n          return accountEntity;\r\n      }\r\n  \r\n      async merge(accountEntity) {\r\n          const {id, firstName, lastName, email, password, favourites } = accountEntity;\r\n          await this.model.findByIdAndUpdate(id, { firstName, lastName, email, password, favourites });\r\n          console.log({id, firstName, lastName, email, password, favourites });\r\n          return accountEntity;\r\n      }\r\n  \r\n      async remove(userId) {\r\n          return this.model.findOneAndDelete(userId);\r\n      }\r\n  \r\n      async get(userId) {\r\n          const result = await this.model.findById(userId);\r\n          const {id, firstName, lastName, email, password, favourites } = result;\r\n          return new Account(id, firstName, lastName, email, password, favourites );\r\n      }\r\n  \r\n      async getByEmail(userEmail) {\r\n          const result = await this.model.findOne({email: userEmail});\r\n          return new Account(result.id, result.firstName, result.lastName, result.email, result.password,result.favourites);\r\n      }\r\n  \r\n      async find() {\r\n          const accounts = await this.model.find();\r\n          return accounts.map((result) => {\r\n              return new Account(result.id, result.firstName, result.lastName, result.email, result.password, result.favourites);\r\n          });\r\n      }\r\n  }\r\n  ~~~\r\n  \r\n  Just like the ***in-memory***  repository you created in the previous lab, the above class extends the Repository class and provides implementations of each method. The class constructor created a Mongoose model that is then used to  create, update, and query the Accounts collection in the DB. For example, in the  ``get(accountId)`` method, the statement ``const mongooseAccount = await this.model.findById(userId);`` uses the model to find an account using the account id.\r\n  \r\n+ We need to include the Mongo Repository in the dependencies. Open ***src/config/depenencies.js*** . Find the ***if*** statement where it checks if the Database Dialect is \"mongo\" and update as follows: \r\n  ~~~javascript\r\n  import AccountsRepositoryMongo from '../accounts/repositories/mongo/AccountRepository';\r\n  \r\n  \t....\r\n  \r\n  } else if (process.env.DATABASE_DIALECT === \"mongo\") {\r\n      dependencies.accountsRepository = new AccountsRepositoryMongo();\r\n  } else if {\r\n      ....\r\n  \r\n  ~~~\r\n  \r\n  This constructs the Mongo Accounts repository and assigns it to the accounts repository.\r\n\r\n## Test It!\r\n\r\nNow test that the DB is connected by posting a few account details using the API. \r\n<img src=\"./img/image-20220330170550353.png\" alt=\"image-20220330170550353\" style=\"zoom:67%;\" />\r\n\r\n## Commit it\r\n\r\nCommit your work to your git repository.\r\n\r\n\r\n\r\n","route":"/lab/{{COURSEURL}}/topic10/book-1/02","id":"02","type":"step"},{"title":" Validation using Joi","shortTitle":"03","contentMd":"# Validation using Joi\r\n\r\nAt the moment, we are not validating any data coming into the API. We can have malformed emails, empty fields. Mongoose does provide a way to validate but it is a good idea to separate validation from the DB and associate it with the API. This way, if the DB is changed, the validation will still apply.\r\n\r\nOne approach is to build a validation controller and add it to the middleware chain/stack. \r\n\r\nDIAGRAM\r\n\r\nWe can use Joi to do this. In keeping with the clean architecture approach, we can define a class that specifies the validation we want, implement it with Joi, and use dependency injection to insert it into our API (pretty much the same approach as the DB). This means we can change the validation framework  at a later date if we wish.\r\n\r\n+ Import Joi as a dependency:\r\n\r\n~~~javascript\r\nnpm install -save joi\r\n~~~\r\n\r\n\r\n\r\n## Error Handling Middleware\r\n\r\nIn order to gracefully deal with validation(or any other) errors. Lets add some Error Handling Middleware.\r\n\r\n+ in teh ***/src*** folder, add a new folder called ***utils***. In this folder, create a script called ***ErrorHandler.js*** with the following content:\r\n\r\n  ~~~javascript\r\n  export default\r\n      (error, req, res, next) => {\r\n          if (!error.statusCode) error.statusCode = 500;\r\n  \r\n          if (error.statusCode === 301) {\r\n              return res.status(301).redirect('/not-found');\r\n          }\r\n  \r\n          return res\r\n              .status(error.statusCode)\r\n              .json({ error: error.toString() });\r\n      };\r\n  \r\n  ~~~\r\n\r\n+ In the entry point script, ***index.js,*** in the project root folder, import the Error Handler and add it after the last ``app.use(...)``. statement. This is because we want it to catch all errors that may occur in the middleware stack(see last weeks lecture...):\r\n  ~~~javascript\r\n  import errorHandler from './src/utils/ErrorHandler';\r\n  \r\n  ...\r\n  \r\n  app.use(errorHandler);\r\n  \r\n  ...\r\n  \r\n  ~~~\r\n\r\n## Joi Validation Schema\r\n\r\n+ In ***/src/accounts***, create a new folder called ***validators***. Add a script called ***index.js*** with the following content:\r\n\r\n~~~javascript\r\n//* validators/register.validator.js\r\nimport Joi from 'joi';\r\n\r\nconst accountSchema = Joi.object({\r\n    email: Joi.string().email().lowercase().required(),\r\n    password: Joi.string().min(4).required(),\r\n    firstName: Joi.string().min(1).required(),\r\n    lastName: Joi.string().min(1).required()\r\n});\r\n\r\nexport default {account: accountSchema};\r\n~~~\r\n\r\nThis validator imports the Joi framework to create a new schema for an account. It is an infrastructure component so we will add it to the dependencies and use dependency injection to introduce it into our app.\r\n\r\n+ We will pass this validator into the app as a dependency. Open ***/src/config/dependencies.js*** and update with the following:\r\n\r\n  ~~~javascript\r\n  import AccountSchema from '../accounts/validators';\r\n  ....\r\n  dependencies.accountSchema = AccountSchema;\r\n  \r\n  ~~~\r\n\r\n\r\n\r\n### The Validation Controller\r\n\r\n+ In ***/src/accounts/controllers***, create a new script called ***ValidationController.js***. For now we'll just put in an empty function and add it to the routing middleware. Add the following code:\r\n\r\n  ~~~javascript\r\n  export default (dependencies) => {\r\n  \r\n      const { accountSchema } = dependencies;\r\n  \r\n      const validateAccount = async (request, response, next) => {\r\n          // Input\r\n          try {\r\n              const validated = await accountSchema['account'].validateAsync(request.body);\r\n              request.body = validated;\r\n              next();\r\n          } catch (err) {\r\n   \r\n              next(new Error(`Invalid Data ${err.message}`));\r\n          }\r\n      };\r\n  \r\n      return {\r\n          validateAccount\r\n      };\r\n  };\r\n  ~~~\r\n\r\n  \r\n\r\n+ in the accounts router, import the Validation controller and add it to the POST /:id route (register a new account)\r\n\r\n~~~javascript\r\nimport ValidationController from '../controllers/ValidationController'; //add to import statements at top of file\r\n\r\n\r\n\r\n//.....code as before\r\nconst validationController = ValidationController(dependencies);//Add this lineLoad validation controller with dependencies\r\n\r\nrouter.route('/')\r\n        .post(validationController.validateAccount,accountsController.createAccount); //add validateAccount to route\r\n\r\n\r\n~~~\r\n\r\n\r\n\r\n## Test It!\r\n\r\nWith Postman, test the validator by adding an invalid account(i.e. bad email).\r\n<img src=\"./img/image-20220330171132447.png\" alt=\"Bad Email\" style=\"zoom:67%;\" />\r\n","route":"/lab/{{COURSEURL}}/topic10/book-1/03","id":"03","type":"step"},{"title":" Basic Security/Authentication","shortTitle":"04","contentMd":"# Basic Security/Authentication\r\n\r\n One of the main goals for the Accounts API is to support authentication. We need to create an endpoint whereby user accounts can be authenticated using an email and password. To do this, we will create a new endpoint on our service, ***POST /api/accounts/security/token***. This will accept a user email and password from the request and return a token if a match is found. If not, it will return an authentication failed response (with a HTTP status code 401).\r\n\r\n+ In the ***/src/accounts*** folder, create a new folder called ***security***. In this folder, create a new file called Authenticator.js\r\n\r\n  ~~~javascript\r\n  export default class {\r\n    // Encrypt clear case password\r\n    encrypt(password) {\r\n      throw new Error('ERR_METHOD_NOT_IMPLEMENTED');\r\n    }\r\n    //compare an encrypted password to a clear case password \r\n    compare(password, encryptedPassword) {\r\n      throw new Error('ERR_METHOD_NOT_IMPLEMENTED');\r\n    }\r\n  }\r\n  ~~~\r\n\r\n  This class describes the methods used to both encrypt and compare passwords for our app. It acts as a ***\"contract\"*** that we must implement to provide API security(i.e. encryption and authentication).\r\n\r\n+ In /***src/accounts/security***, create a new folder called ***simple***. In this folder, create a new file called ***index.js*** with the following content\r\n\r\n  ~~~javascript\r\n  import Authenticator from '../Authenticator';\r\n  // A simple/nieve Authentication service. WILL BE UPDATED TO USE ENCRYPTION LATER\r\n  export default class extends Authenticator {\r\n    async compare(password, encryptedPassword) {\r\n      try {\r\n        // Compare password\r\n        const result = password == encryptedPassword;\r\n        return Promise.resolve(result);\r\n      } catch (error) {\r\n        return Promise.resolve(false);\r\n      }\r\n    }\r\n  }\r\n  ~~~\r\n\r\nThe accounts folder should now look as follows:\r\n<img src=\"./img/image-20230329160752156.png\" alt=\"image-20230329160752156\" style=\"zoom:50%;\" />\r\n\r\n+ Include the above Authentication Service as an API dependency. Open ***/src/config/dependencies.js*** and add the Authentication Service\r\n\r\n  ~~~javascript\r\n  ...\r\n  import Authenticator from './accounts/security/simple';\r\n  ...\r\n  const buildDependencies = () => {\r\n    const dependencies = {\r\n      validators: AccountValidators,\r\n      authenticator: new Authenticator()\r\n    };\r\n  ~~~\r\n\r\n  \r\n\r\n## Authentication Service\r\n\r\n+ Open ***/src/accounts/services/index.js*** and add the following function to provide authentication service:\r\n  ~~~javascript\r\n    authenticate: async (email, password, {accountsRepository, authenticator}) => {\r\n      const account = await accountsRepository.getByEmail(email);\r\n      const result = await authenticator.compare(password, account.password);\r\n      if (!result) {\r\n          throw new Error('Bad credentials');\r\n      }\r\n      const token = JSON.stringify({ email: account.email });//JUST Temporary!!! TODO: make it better\r\n      return token;\r\n  }\r\n  ~~~\r\n\r\n  Notice that we are using 2 injected dependencies here, the accounts repository and authenticator. The function uses the accounts repository to retrieve the account , `await accountsRepository.getByEmail(email))` , and then compares the stored password to the one provided, `await authenticator.compare(password, account.password);`.\r\n\r\n  For now, we just return a stringified version of the email. In the future, we will generate a unique token for the account. \r\n\r\n## Authentication Controller\r\n\r\n\r\n\r\n+ Open ***src/accounts/controller/index.js*** and add the following:\r\n\r\n  ~~~javascript\r\n     const authenticateAccount = async (request, response, next) => {\r\n          try {\r\n              const { email, password } = request.body;\r\n              const token = await accountService.authenticate(email, password, dependencies);\r\n              response.status(200).json({ token: `BEARER ${token}` });\r\n          } catch (error) {\r\n              response.status(401).json({ message: 'Unauthorised' });\r\n          }\r\n      };\r\n  ~~~\r\n\r\n+ Now add the function to the return statement at the end of the script\r\n\r\n  \r\n\r\n  <img src=\"./img/image-20230329161447128.png\" alt=\"image-20230329161447128\" style=\"zoom:50%;\" />\r\n\r\n  This controller extracts the email and password form the request and uses them to call the authenticate method in the account Service. It then constructs the correct response based on the result. \r\n\r\n  ## Accounts Router\r\n\r\n+ Open ***/src/accounts/routes*** and update index.js as follows:\r\n\r\n~~~javascript\r\n...\r\nrouter.route('/security/token')\r\n        .post(accountsController.authenticateAccount);\r\n...\r\n~~~\r\n\r\nThis sets up the routing for the *POST /api/accounts/security/token* endpoint. \r\n\r\n## Test It!\r\n\r\nNow test that it works by first adding an account:\r\n<img src=\"./img/image-20220331102716508.png\" alt=\"image-20220331102716508\" style=\"zoom: 67%;\" />\r\n\r\n\r\n\r\nThen Authenticating using **valid credentials**:\r\n<img src=\"./img/image-20220331102843472.png\" alt=\"image-20220331102843472\" style=\"zoom:67%;\" />\r\n\r\n\r\n\r\nAnd finally with **invalid credentials**:\r\n<img src=\"./img/image-20220331103118370.png\" alt=\"image-20220331103118370\" style=\"zoom:67%;\" />\r\n\r\n~~~javascript\r\n~~~\r\n\r\n\r\n\r\n\r\n\r\n","route":"/lab/{{COURSEURL}}/topic10/book-1/04","id":"04","type":"step"},{"title":" Movie Favourites","shortTitle":"05","contentMd":"## Movie Favourites\r\n\r\nWe already have the Movie routes defined for */api/movies/*. This can be imported into the User API code to create the route for  */api/accounts/{accountid}/favourites path*. We can then populate a favourites list in the Account that contains references to Movies. \r\n\r\n<img src=\"./img/image-20220331140353095.png\" alt=\"image-20220331140353095\" style=\"zoom:67%;\" />\r\n\r\n### Update Account Schema\r\n\r\n- Update/check that the schema description in  *\\src\\accounts\\repositories\\mongo\\AccountRepository.js* includes an array of favourites.\r\n\r\n  ![image-20220331110336416](./img/image-20220331110336416.png)\r\n\r\n\r\n## Update Services\r\n\r\n- Update ***/src/accounts/services/index.js*** to include the following:\r\n\r\n  ~~~javascript\r\n  /// ... Code as Before\r\n  \r\n    getFavourites: async (accountId, { accountsRepository }) => {\r\n      const account = await accountsRepository.get(accountId);\r\n      return account.favourites;\r\n    },\r\n    addFavourite: async (accountId, movieId, { accountsRepository }) => {\r\n      const account = await accountsRepository.get(accountId);\r\n      account.favourites.push(movieId);\r\n      return await accountsRepository.merge(account);\r\n      \r\n    }\r\n    \r\n   /// ... Code as Before\r\n  ~~~\r\n\r\nHere we implement 2 \"scenarios\" for managing favourites - Adding and updating a favourite. This is quite simple- you will have the opportunity to improve this in the exercises\r\n\r\n## Accounts Controller\r\n\r\n+ Update ***/src/accounts/controllers/index.js*** to include the following additional controllers:\r\n\r\n  \r\n\r\n~~~javascript\r\n//... Code as before\r\n\r\n\tconst addFavourite = async (request, response, next) => {\r\n        try {\r\n            const { movieId } = request.body;\r\n            const id = request.params.id;\r\n            const account = await accountService.addFavourite(id, movieId, dependencies);\r\n            response.status(200).json(account);\r\n        } catch (err) {\r\n            next(new Error(`Invalid Data ${err.message}`));\r\n        }\r\n    };\r\n    const getFavourites = async (request, response, next) => {\r\n        try {\r\n            const id = request.params.id;\r\n            const favourites = await accountService.getFavourites(id, dependencies);\r\n            response.status(200).json(favourites);\r\n        } catch (err) {\r\n            next(new Error(`Invalid Data ${err.message}`));\r\n        }\r\n    };\r\n\r\n\r\n// ..code as before\r\n\r\n~~~\r\n\r\n+ In the same script, Add the new controllers to the return statement:\r\n\r\n<img src=\"./img/image-20220331125622115.png\" alt=\"image-20220331125622115\" style=\"zoom:67%;\" />\r\n\r\n\r\n\r\n## Accounts Router\r\n\r\n- Open ***/src/accounts/routes/index.js*** and add the following POST /:id/favourites and GET /:id/favourites Route code.\r\n\r\n~~~javascript\r\n/// ... Code as Before\r\n\r\n    router.route('/:id/favourites')\r\n        .post(accountsController.addFavourite);\r\n    router.route('/:id/favourites')\r\n        .get(accountsController.getFavourites);\r\n\r\n/// ... Code as Before\r\n~~~\r\n\r\n\r\n\r\n## Test Movie Favourites\r\n\r\n- Now test the  favourites routes by adding a favourite movie to an account. You'll need to get a valid movie ID and account ID. For the account ID, first create an account and then copy the id returned.\r\n   For a valid Movie ID,  do a GET on */api/movies/, copy the _id of a  movie returned, and paste into the body of the POST */api/accounts/accountid/favourites* as follows:  \r\n\r\n<img src=\"./img/image-20220331131704778.png\" alt=\"image-20220331131704778\" style=\"zoom: 50%;\" />\r\n\r\nNotice that the only the Favourite Movie ID is stored in the favourites array \r\n\r\n+ Now Do a GET /api/movies/accountid/favourites. You'll notice that the Movie ref is present.\r\n\r\n![image-20220331132543650](./img/image-20220331132543650.png)\r\n\r\n\r\n\r\n## Commit it\r\n\r\nCommit your work to your git repository.","route":"/lab/{{COURSEURL}}/topic10/book-1/05","id":"05","type":"step"},{"title":" Exercises","shortTitle":"07","contentMd":"# Exercises\r\n\r\n\r\n\r\n1. Improve the validation provided in the lab as follows:\r\n\r\n   + The firstname and lastname have a minimum length of 1 and a maximum length of 30.\r\n\r\n   + The password length should be at least 7, maximum 20,  and contain at least one alpha character, number and special character. You can use the following regex to do this: \r\n     `**^(?=.\\*[0-9])(?=.\\*[a-z])(?=.\\*[A-Z])(?=.\\*[@#$%^&-+=()])(?=\\\\S+$).{7, 20}$**`\r\n\r\n2. The add favourites endpoint allows duplicate entries. You should not be able to add the same movie more than once. Implement code that checks for duplicates in the favourites array before adding it.\r\n\r\n   **OPTIONAL:** \r\n\r\n3. Implement the GET Genres endpoint using Mongo/Mongoose. You can create a genres collection in MongoDB and load  Genres data from lab 1.\r\n   This will take time as you should try to implement the same architecture and directory structure for accounts - i.e. create a Genre Repository,  Genre Entity class, Genre  Service, etc. \r\n\r\n![image-20220331140938401](./img/image-20220331140938401.png)\r\n","route":"/lab/{{COURSEURL}}/topic10/book-1/07","id":"07","type":"step"}]},{"route":"https://wit-ie.zoom.us/rec/share/h2ahMWNUrGHWNx4zKa_mLr4WU-WjIx83qsZ1aweFXFtoe9w4WpTN0dNvj-gyDu_e.YTvevZ4AanxEFxMD","type":"web","title":"Lecture Recording\r","summary":"(Passcode: 0K*Ic0Hi)","contentMd":"Lecture Recording\r\n\r\n (Passcode: 0K*Ic0Hi)","frontMatter":{},"id":"web-1","img":"https://{{COURSEURL}}/topic10/web-1/web.png","imgFile":"web.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false},{"route":"/archive/{{COURSEURL}}/topic10/archive","type":"archive","title":"Example\r","summary":"Example Express App developed in Lecture","contentMd":"Example\r\n\r\nExample Express App developed in Lecture","frontMatter":{},"id":"archive","img":"https://{{COURSEURL}}/topic10/archive/archive.jpg","imgFile":"archive.jpg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"archiveFile":"archive.zip"}]},{"route":"/topic/{{COURSEURL}}/topic11","type":"topic","title":" Authentication using BCrypt and JWT\r","summary":"This topic describes how JSON Web Tokens can be used for authentication in Express web APIs.","contentMd":"# Authentication using BCrypt and JWT\r\n\r\nThis topic describes how JSON Web Tokens can be used for authentication in Express web APIs.\r\n","frontMatter":{},"id":"topic11","img":"","imgFile":"","video":"","videoids":{"videoid":"","videoIds":[]},"hide":true,"los":[{"route":"/talk/{{COURSEURL}}/topic11/talk-01","type":"talk","title":" Authentication using Express, JWT, and Passport\r","summary":"This talk descibes how Java Web Tokens and Passport.js can be used for authentication in Express web APIs.","contentMd":"# Authentication using Express, JWT, and Passport\r\n\r\nThis talk descibes how Java Web Tokens and Passport.js can be used for authentication in Express web APIs.\r\n","frontMatter":{},"id":"talk-01","img":"https://{{COURSEURL}}/topic11/talk-01/authentication.jpeg","imgFile":"authentication.jpeg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"pdf":"https://{{COURSEURL}}/topic11/talk-01/authentication.pdf","pdfFile":"authentication.pdf"},{"route":"/lab/{{COURSEURL}}/topic11/book-01","type":"lab","title":"Lab-api4","summary":"This lab implements a JWT-based Authentication strategy on the MovieDB API solution from the previous lab.\r","contentMd":"# Authentication using JWT\r\n\r\nThis lab implements a JWT-based Authentication strategy on the MovieDB API solution from the previous lab.\r\n\r\nThis lab will create authentication with JSON Web Tokens for the MovieDB API solution in previous labs. You will include the jwt token with every request, meaning that we don’t need sessions. Clients of the service will need to save the JWT in localStorage or other places on the frontend.\r\n\r\nIn this lab you will:\r\n\r\n+ Update the MovieDB React app to use the API.\r\n+ Update the */api/users* route to register and acquire a token\r\n+ Add authorisation middleware the *api/movies* route, making it only is available to users with a valid JSON web token\r\n+ Add basic login/signin functionality to MovieDB React app.\r\n\r\n","frontMatter":{},"id":"book-01","img":"https://{{COURSEURL}}/topic11/book-01/img/main.png","imgFile":"img/main.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"title":" Authentication using JWT","shortTitle":"Lab-api4","contentMd":"# Authentication using JWT\r\n\r\nThis lab implements a JWT-based Authentication strategy on the MovieDB API solution from the previous lab.\r\n\r\nThis lab will create authentication with JSON Web Tokens for the MovieDB API solution in previous labs. You will include the jwt token with every request, meaning that we don’t need sessions. Clients of the service will need to save the JWT in localStorage or other places on the frontend.\r\n\r\nIn this lab you will:\r\n\r\n+ Update the MovieDB React app to use the API.\r\n+ Update the */api/users* route to register and acquire a token\r\n+ Add authorisation middleware the *api/movies* route, making it only is available to users with a valid JSON web token\r\n+ Add basic login/signin functionality to MovieDB React app.\r\n\r\n","route":"/lab/{{COURSEURL}}/topic11/book-01/Lab-api4","id":"Lab-api4","type":"step"},{"title":" Hashing and Salting","shortTitle":"Hash and Salt","contentMd":"# Hashing and Salting\r\n\r\n\r\n# Set up\r\nYou will need the solution form last weeks lab(lab-node3) as a starting point.\r\n\r\n**THE FOLLOWING STEPS ARE FOR THE EXPRESS MOVIEDB API**\r\n\r\n## Install dependencies\r\nYou'll need the following dependencies to implement the authentication functionality:\r\n\r\n~~~bash\r\n    npm install --save jsonwebtoken bcryptjs\r\n~~~\r\n\r\n\r\n## Create Encryption Middleware\r\nYou will need to create a new user model for authentication.\r\n\r\n- In, ***/src/accounts/security/***. Create a script BCryptAuthenticator.js with the following content:\r\n\r\n~~~javascript\r\nimport Authenticator from './Authenticator';\r\nimport bcrypt from 'bcryptjs';\r\n\r\nexport default class extends Authenticator {\r\n\r\n    async encrypt(password) {\r\n        const salt = await bcrypt.genSalt(10);\r\n        return bcrypt.hash(password, salt);\r\n    }\r\n\r\n    async compare(password, encryptedPassword) {\r\n        try {\r\n            // Compare password\r\n            const result = await bcrypt.compare(password, encryptedPassword);\r\n            return result;\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n~~~\r\n\r\n+ Update **dependencies.js** script in the  ***/src/config*** folder. Replace the existing SimpleAuthenticator and import the new  BCryptAuthenticator.\r\n\r\n~~~javascript\r\n//... other code\r\nimport Authenticator from '../security/BCryptAuthenticator';\r\n//... other code\r\n~~~\r\n\r\nWe want to use the BCrypt to salt and hash the password before saving it to the Repository. We can do this in the Accounts service.\r\n\r\n+ Open /src/accounts/services/index.js. Update the registerAccount and updateAccount service functions to include the Authenticator dependency and apply encryption to the password.\r\n\r\n<img src=\"./img/image-20220401103918378.png\" alt=\"image-20220401103918378\" style=\"zoom:67%;\" />\r\n\r\nDon't forget to apply a similar change to update\r\n\r\n## Test it...\r\n\r\n+ Test that the encryption is working by registering an account:\r\n  <img src=\"./img/image-20220401104528943.png\" alt=\"image-20220401104528943\" style=\"zoom: 50%;\" />\r\n\r\n+ Also, you can check in the MongoDB using the MongoDB Add on in VSCode or Compass.\r\n\r\n+ Check that the Authentication endpoint (POST /api/accounts/security/token) still works:\r\n  <img src=\"./img/image-20220401104751431.png\" alt=\"image-20220401104751431\" style=\"zoom:50%;\" />\r\n\r\n\r\n\r\nNote how the passwords are being hashed before being saved in the database.","route":"/lab/{{COURSEURL}}/topic11/book-01/Hash and Salt","id":"Hash and Salt","type":"step"},{"title":" Register/Authenicate Users with JWT","shortTitle":"JWT","contentMd":"# Register/Authenicate Users with JWT\r\n\r\nYou will update the **POST** */api/accounts/security/token* endpoint to both authenticate . We will also need to specify a secret environment variable that will be used to create the Javascript Web Token. The  **secret** key is private to your app. When you receive a **JWT** from the client, you can verify that **JWT** with the **secret** key stored with your app.\r\n\r\n+ Add the following entry for the secret variable into the *.env* file\r\n\r\n~~~bash\r\nJWT_SECRET_KEY=ilikecake\r\n~~~\r\n\r\n+ in the /src/accounts/security folder create a new Javascript class called TokenManager.js \r\n\r\n~~~javascript\r\nexport default class {\r\n    generate() {\r\n        throw new Error('ERR_METHOD_NOT_IMPLEMENTED');\r\n    }\r\n    decode() {\r\n        throw new Error('ERR_METHOD_NOT_IMPLEMENTED');\r\n    }\r\n}\r\n~~~\r\n\r\n+ In the same folder, create a script called JWTToken.js with the following content:\r\n\r\n~~~javascript\r\nimport jwt from 'jsonwebtoken';\r\n\r\nimport TokenManager  from './TokenManager';\r\n\r\nexport default  class extends TokenManager {\r\n\r\n  generate(payload) {\r\n    return jwt.sign(payload, process.env.JWT_SECRET_KEY );\r\n  }\r\n\r\n  decode(accessToken) {\r\n    return jwt.verify(accessToken,  process.env.JWT_SECRET_KEY);\r\n  }\r\n}\r\n~~~\r\n\r\n+ Now create an instance of the above class and add it to the app dependencies. Open /src/config/dependencies.js and update as indicated below:\r\n\r\n~~~javascript\r\n//.... code as before\r\nimport TokenManager from './../accounts/security/JWTToken';\r\n\r\n//.... code as before\r\n\r\ndependencies.tokenManager = new TokenManager();\r\n// ... Code as before\r\n~~~\r\n\r\n\r\n\r\n+ We already have an authenticate function in services. Open /src/account/services/index.js. Find and update the authenticate function as follows:\r\n  ~~~javascript\r\n    authenticate: async (email, password, { accountsRepository, authenticator, tokenManager }) => {\r\n      const account = await accountsRepository.getByEmail(email);\r\n      const result = await authenticator.compare(password, account.password);\r\n      if (!result) {\r\n        throw new Error('Bad credentials');\r\n      }\r\n      const token = tokenManager.generate({ email: account.email });\r\n      return token;\r\n    }\r\n  ~~~\r\n\r\n  The updated authenticate function uses the tokenManager to generate a JWT using the account email. This can be used to verify after. \r\n\r\n\r\n\r\n## Test It!\r\n\r\nTest that you can create and authenticate a user by trying the following tests in Postman:\r\n\r\n\r\n\r\n+ **Register a User**:Test that a HTTP POST for ***/api/accounts*** adds a new Account document with an encrypted password. Remember to include a User JSON document in the HTTP request body.\r\n\r\n![Register a New User](./img/user2.png)\r\n\r\n+ **Authenticate a User**:Test that a HTTP POST for */api/users/* authenticates a User. Again, remember to include a User JSON document in the HTTP request body.\r\n\r\n  \r\n\r\n![Authenticate a New User](./img/user3.png)\r\n\r\nIn this case, the API will return the JWT token in the response body.\r\n\r\n+ **Unknown User/Password**: Try to authenticate with an unknown user. You should see the following response:\r\n\r\n  \r\n\r\n![Unknown User](./img/user4.png)","route":"/lab/{{COURSEURL}}/topic11/book-01/JWT","id":"JWT","type":"step"},{"title":" Authentication on Routes","shortTitle":"Token Verification","contentMd":"# Authentication on Routes\r\n\r\nWe can use middleware functions that a requests runs through before getting to the actual route.​ You will now create an authentication controller and add it to the /api/movies route.\r\n\r\n+ In ***/src/accounts/services/index.js***, add the following function:\r\n\r\n~~~javascript\r\n///... Code as before \r\n  verifyToken:   async (token,{accountsRepository, tokenManager}) => {\r\n    const decoded = await tokenManager.decode(token);\r\n    const user = await accountsRepository.getByEmail(decoded.email);\r\n    if (!user) {\r\n        throw new Error('Bad token');\r\n    }\r\n    return user.email;\r\n}\r\n///... Code as before \r\n~~~\r\n\r\nThe above script extracts the user email from the token and verifies it is a valid account email. The *user id* is then passed on to the next middleware, accessible through the request object.\r\n\r\n\r\n\r\n+ Open src/accounts/controllers/index.js and add the following:\r\n\r\n~~~javascript\r\n//... code as before\r\n    const verify = async (request, response, next) => {\r\n        try { \r\n        // Input\r\n        const authHeader = request.headers.authorization;\r\n\r\n        // Treatment\r\n   \r\n        const accessToken = authHeader.split(\" \")[1];\r\n        const user = await accountService.verifyToken(accessToken, dependencies);\r\n\r\n        //output\r\n        next();\r\n    }catch(err){\r\n        //Token Verification Failed\r\n        next(new Error(`Verification Failed ${err.message}`));\r\n        }\r\n    };\r\n\r\n//... code as before\r\n\r\n    return {\r\n        createAccount,\r\n        getAccount,\r\n        listAccounts,\r\n        updateAccount,\r\n        authenticateAccount,\r\n        addFavourite,\r\n        getFavourites,\r\n        removeFavourite,\r\n        verify  //ADD THIS\r\n    };\r\n~~~\r\n\r\n\r\n\r\n+ Put the Verification controller on the route. Open ***/src/movies/routes/index.js*** and add the code indicated by the comments below:\r\n\r\n~~~javascript\r\nimport express from 'express';\r\nimport MoviesController from '../controllers';\r\nimport AccountsController from '../../accounts/controllers'; //ADD THIS: imports accounts controller\r\n\r\nconst createMoviesRouter = (dependencies) => {\r\n    const router = express.Router();\r\n    // load controllers with dependencies\r\n    const moviesController = MoviesController(dependencies);\r\n    const accountsController = AccountsController(dependencies);//ADD THIS: Create accountsController with dependencies\r\n\r\n     router.route('/*')\r\n        .all(accountsController.verify); //ADD THIS: require token for all routes\r\n    \r\n    router.route('/:id')\r\n        .get(moviesController.getMovie);\r\n\r\n    router.route('/')\r\n        .get(moviesController.find); \r\n\r\n    router.route('/:id/reviews')\r\n        .get(moviesController.getMovieReviews);\r\n\r\n    return router;\r\n};\r\nexport default createMoviesRouter;\r\n~~~\r\n\r\nIn the above code, we add a \"catch all\" route BEFORE all the other routes. This means that any type of  request coming in to /api/movies/... will pass through the **verify** controller and checked for a valid JWT token.\r\n\r\n\r\n\r\n## Test the MovieDB API\r\n\r\nNow test that access to the */api/movies* requires JWT token.\r\n\r\n+ As before, authenticate a known user in the database. This time, copy the JWT Token returned from the API:\r\n\r\n![Get JWT Token](./img/user3.png)\r\n\r\n+ Try to access */api/movies* without including the token - it will return a status 401 - unauthorised. \r\n\r\n![No/invalid JWT Token](./img/user5.png)\r\n\r\n+ Now, in Postman, add a ``authorization`` header to the request and paste in the JWT token copied in the previous step. You should now see all existing posts returned.\r\n\r\n![No/invalid JWT Token](./img/user7.png)\r\n\r\nLEAVE THIS API RUNNING FOR THE NEXT STEP IN THE ","route":"/lab/{{COURSEURL}}/topic11/book-01/Token Verification","id":"Token Verification","type":"step"},{"title":" React - API Integration","shortTitle":"React App","contentMd":"# React - API Integration\r\n\r\nYou will use a simple React App and integrate it with the API. You can get this application from the Resources archive in this topic on the website.\r\n\r\nThis React App is taken from the code samples from the  **React Design, Routing, and Performance** React topic(week7). \r\n\r\n## Initial set up\r\n\r\n+ Download the React App archive from the Resources link on the website.\r\n+ Extract the archive to a location on your local machine.  DO NOT EXTRACT THIS INTO THE SRC FOLDER FOR YOUR OTHER API LABS. It's not part of t\r\n+ Open the .env file in the base folder and add your TMDB key:\r\n~~~\r\nVITE_TMDB_KEY=c18YOUR_KEY bcb\r\n~~~\r\n+ Open a terminal Window in the *reactApp* folder and run ``npm install`` followed by ``npm run dev``. This should start the React app and you should see the App appear in the browser  \r\n  <img src=\"./img/image-20230419152405509.png\" alt=\"image-20230419152405509\" style=\"zoom:50%;\" />\r\n\r\nIn this application, no routes are protected. \r\n\r\n+ Click on the *movies* link you'll see movie detials. \r\n\r\nLook at the code and notice that there is a *pages* folder  that exports most of the  pages for the app.\r\n\r\nWe will now connect theReact App to the movie API. \r\n\r\n## System Architecture\r\n\r\nThe **Vite** provides a mechanism for working with an API server in development. We can make the development server proxy requests intended for our API server as follows:\r\n\r\n<img src=\"./img/2.png\" alt=\"image-20230420093312500\" style=\"zoom:50%;\" />\r\n\r\nThe React app makes an API request to localhost:3000, the **Vite** development server. The development server then proxies that request to the API server. This will remove any Cross-Origin-Resource-Sharing (CORS) issues with the browser.\r\nYou will now configure react dev server to proxy requests to the Express API.\r\n\r\n#### Proxy Server\r\nTo have the React development server proxy our API requests to our Express API server, we need to add the following to the **vite.config.js file in the React Application**\r\n\r\n+ **IN THE REACT APP**, look in the *base* folder,  and add the following to the ***server*** property to ***vite.config.js***  just before the closing brace (``}``): \r\n\r\n```json\r\n    proxy: {\r\n      '/api': {\r\n        target: 'http://127.0.0.1:8080',\r\n        changeOrigin: true,\r\n        secure: false\r\n      }\r\n    }\r\n```\r\n\r\nThe contents of the file should look like this:\r\n\r\n<img src=\"./img/image-20230419160725498.png\" alt=\"image-20230419160725498\" style=\"zoom:50%;\" />\r\n\r\nMake sure the format of the *file* is correct/valid before you try to start the app. This should now forward any request with \"\"/api/*\" in the URL path to the Express API listening on port 8080.\r\n\r\nThe React App should restart as usual. \r\n\r\n## Integrating the Express Movie API\r\n\r\nCurrently the simple React app uses TMDB API retrieve movies. You will now add the functionality that integrates the express API.  Initially we'll do it without authentication\r\n\r\n+ **IN YOUR EXPRESS APP** comment out the code in the Movies router that does JWT authentication. Open /src/movies/routes/index.js and comment out the lines indicated below. \r\n\r\n <img src=\"./img/image-20230419155745998.png\" alt=\"image-20230419155745998\" style=\"zoom:50%;\" />\r\n\r\n**NOTE:** This is just temporary to allow the react app to retrieve movies.\r\n\r\n+ **IN YOUR REACT APP**, open /src/api.jsx and change the ***getMovie*** function to request the movies using the path ***/api/movies***. \r\n\r\n  ~~~javascript\r\n  //...\r\n  export const getMovies = () => {\r\n    return fetch(\r\n      `/api/movies`\r\n    ).then((res) => res.json());\r\n  };\r\n  //...\r\n  ~~~\r\n\r\n\r\n\r\n+ Have a look at the the React App in the browser (localhost:3000). It should reload and show the movies as before. The difference now is that the request is being proxied though the Express API. MAKE SURE YOUR API IS ALSO RUNNING.\r\n\r\n+ **IN YOUR REACT APP**, repeat the same process for getMovie function and replace the tmdb URL with the path to the movie details :\r\n\r\n  ~~~javascript\r\n  export const getMovie = (args) => {\r\n    const [, idPart] = args.queryKey;\r\n    const { id } = idPart;\r\n    return fetch(\r\n      `/api/movie/${id}`\r\n    ).then((res) => res.json());\r\n  };\r\n  ~~~\r\n\r\n\r\n\r\nTest the App again in the browser. Now all API requests are going through your Express API using the proxy configuration in Vite ","route":"/lab/{{COURSEURL}}/topic11/book-01/React App","id":"React App","type":"step"},{"title":" React - SignUp Page","shortTitle":"Sign Up","contentMd":"# React - SignUp Page\r\n\r\nIn this step you will update the sign up page to use the auth context and the movies API.\r\n\r\n+ **IN YOUR REACT APP**, in  */src/api.jsx*, add the following code:\r\n\r\n```javascript\r\nexport const signup = (email, password, firstName, lastName) => {\r\n    return fetch('/api/accounts', {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        method: 'post',\r\n        body: JSON.stringify({ email: email, password: password, firstName: firstName, lastName: lastName })\r\n    }).then(res => res.json())\r\n};\r\n\r\nexport const login = (email, password) => {\r\n    return fetch('/api/accounts/security/token', {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        method: 'post',\r\n        body: JSON.stringify({ email: email, password: password })\r\n    }).then(res => res.json())\r\n};\r\n\r\n```\r\n\r\nThese functions make the correct API requests to create an account (signup) and authenticate (login)\r\n\r\nNotice how the routes match what is implemented in the Express API **and** what you tested using postman. The proxy configuration in Vite provides the host information required to complete the request(i.e. 127.0.0.1:8080). \r\n\r\n### Authentication Context\r\n\r\n+ **IN THE REACT APP**,  create a new folder called /***src/contexts*** and create a file called **authContext.jsx**  with the following content:   \r\n\r\n```javascript\r\nimport React, { useState, createContext } from \"react\";\r\nimport { login, signup } from \"../api\";\r\n\r\nexport const AuthContext = createContext(null);\r\n\r\nconst AuthContextProvider = (props) => {\r\n  const existingToken = localStorage.getItem(\"token\");\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [authToken, setAuthToken] = useState(existingToken);\r\n  const [email, setEmail] = useState(\"\");\r\n\r\n  //Function to put JWT token in local storage.\r\n  const setToken = (data) => {\r\n    localStorage.setItem(\"token\", data);\r\n    setAuthToken(data);\r\n  }\r\n\r\n  const authenticate = async (email, password) => {\r\n    const result = await login(email, password);\r\n    if (result.token) {\r\n      setToken(result.token)\r\n      setIsAuthenticated(true);\r\n      setEmail(email);\r\n    }\r\n  };\r\n\r\n  const register = async (email, password, firstName, lastName) => {\r\n    const result = await signup(email, password, firstName,lastName);\r\n    console.log(result.code);\r\n    return (result.code == 201) ? true : false;\r\n  };\r\n\r\n  const signout = () => {\r\n    setTimeout(() => setIsAuthenticated(false), 100);\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        isAuthenticated,\r\n        authenticate,\r\n        register,\r\n        signout,\r\n        email\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContextProvider;\r\n```\r\n\r\nYou will use this context to manage and keep track of the user authentication. Notice that it contains *isAuthenticated, userName*, and *authToken* state variables. It also provides an *authenticate()* and *register()* functions that use the API to authenticate and register users.\r\nThe ``localStorage.setItem(\"token\", data);`` statement is used to store the JWT token in the browsers local storage. \r\n\r\n+ **IN YOUR REACT APP**, create the file ***/src/pages/signUpPage.jsx***  with the following code:\r\n\r\n~~~javascript\r\nimport React, { useContext, useState } from \"react\";\r\nimport {Navigate  } from \"react-router-dom\";\r\nimport { AuthContext } from '../contexts/authContext';\r\n\r\nconst SignUpPage = props => {\r\n  const context = useContext(AuthContext)\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [passwordAgain, setPasswordAgain] = useState(\"\");\r\n  const [registered, setRegistered] = useState(false);\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n\r\n\r\n\r\n  const register = () => {\r\n    if (password.length > 0 && password === passwordAgain) {\r\n      console.log(\"reg\")\r\n      context.register(email, password, firstName, lastName);\r\n      setRegistered(true);\r\n    }\r\n  }\r\n\r\n // const { from } = props.location.state || { from: { pathname: \"/\" } };\r\n\r\n  if (registered === true) {\r\n   return <Navigate to=\"./home\" />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h2>SignUp page</h2>\r\n      <p>You must register an  username and password to log in </p>\r\n      <input value={email} placeholder=\"email\" onChange={e => {\r\n        setEmail(e.target.value);\r\n      }}></input><br />\r\n      <input value={firstName} placeholder=\"first name\" onChange={e => {\r\n        setFirstName(e.target.value);\r\n      }}></input><br />\r\n      <input value={lastName} placeholder=\"last name\" onChange={e => {\r\n        setLastName(e.target.value);\r\n      }}></input><br />\r\n      <input value={password} type=\"password\" placeholder=\"password\" onChange={e => {\r\n        setPassword(e.target.value);\r\n      }}></input><br />\r\n      <input value={passwordAgain} type=\"password\" placeholder=\"password again\" onChange={e => {\r\n        setPasswordAgain(e.target.value);\r\n      }}></input><br />\r\n      {/* Login web form  */}\r\n      <button onClick={register}>Register</button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignUpPage;\r\n~~~\r\n\r\nIn the signup page we have included account fields that populate the state variables. When the *Register* button is pressed, the ``register`` function uses the context to register the username and password using the API.\r\n\r\n### Add ContextProvider to React App\r\n\r\n\r\n\r\n+ Open /src/index.jsx and apply the Authentication context to all the routes:\r\n\r\n~~~javascript\r\nimport AuthContextProvider from \"./contexts/authContext\";\r\n\r\n...\r\n\r\n  <BrowserRouter>\r\n      <AuthContextProvider>  \r\n       ...\r\n      </AuthContextProvider>\r\n   </BrowserRouter>\r\n~~~\r\n\r\n\r\n\r\n\r\n\r\n## Add signUpPage Route in React App\r\n\r\n- **IN YOUR REACT APP**, open */src/index.jsx* and add the following to the existing import statements:\r\n\r\n```javascript\r\n  import SignUpPage from \"./pages/signUpPage\";\r\n```\r\n\r\n- Still in */src/index.js*x, add the following Route component for the signUpPage to the existing Routes inside the `<Route>`:\r\n\r\n```javascript\r\n <Route path=\"/signup\" element={<SignUpPage />} />\r\n```\r\n\r\n+ Underneath the ``<Link to\"/\">Home</Link>`` statement, enter another link to the SignUp page: \r\n\r\n  ~~~javascript\r\n   <br />\r\n            <Link to=\"/signup\">Sign Up</Link>\r\n  ~~~\r\n\r\n  \r\n\r\n+ Now test the SignUp feature by clicking on the *SignUp* link on the Home Page. **Remember you need to supply a valid email and password  that will pass API validation**\r\n  If successful, the Signup Page will redirect to the Home page. \r\n\r\n<img src=\"./img/image-20230420000619377.png\" alt=\"image-20230420000619377\" style=\"zoom:50%;\" />\r\n\r\n+ Test it. You should now be able to add a new account using the SignUp page. You can check the MongoDB to be sure. Remember the validation is being applied at the API level on passwords/email etc. \r\n","route":"/lab/{{COURSEURL}}/topic11/book-01/Sign Up","id":"Sign Up","type":"step"},{"title":" React - Authentication Context","shortTitle":"Authentication","contentMd":"# React - Authentication Context\r\n\r\nYour API uses JSON Web Tokens(JWT) to authenticate. We now need to create an *authContext.js* to store and use JWT tokens.\r\n\r\n### Add Token to API Request\r\n\r\nWe are now storing JWT token in local storage in the browser. It needs to be included at least on all routes that are protected(or youi could add it to all requests to the API if you wish). We will just add the authorisation header to the getMovie Details request\r\n\r\n+ IN THE REACT APP, open /src/api.jsx and replace the getMovie function with the following: \r\n\r\n~~~javascript\r\nexport const getMovie = (args) => {\r\n  const [, idPart] = args.queryKey;\r\n  const { id } = idPart;\r\n  return fetch(\r\n    `/api/movie/${id}`,{headers: {\r\n      'Authorization': window.localStorage.getItem('token')\r\n   }}\r\n  ).then((res) => res.json());\r\n};\r\n~~~\r\n\r\nNotice that it is the same as before, except this time we're adding an authorisation header to the HTTP request that contains the JWT token. We get the JWT token from local storage. \r\nAlso notice that this essentially the same as what we did with Postman, except we're now doing it programmatically in our app.\r\n\r\n## Login Page\r\nYou will now update the basic React login page to use the authentication Context in the React App.\r\n\r\n+ In */src/pages* folder, locate the file *loginPage.jsx* and replace with the following:\r\n\r\n~~~javascript\r\nimport React, { useContext, useState } from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { AuthContext } from '../contexts/authContext';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst LoginPage = props => {\r\n  const context = useContext(AuthContext)\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const login = () => {\r\n    context.authenticate(email, password);\r\n  };\r\n\r\n  // Set 'from' to path where browser is redirected after a successful login.\r\n  // Either / or the protected path user tried to access.\r\n // const { from } = props.location.state || { from: { pathname: \"/\" } };\r\n\r\n  if (context.isAuthenticated === true) {\r\n    return <Navigate to={\"./home\"} />;\r\n  }\r\n  return (\r\n    <>\r\n      <h2>Login page</h2>\r\n      <p>You must log in to view the protected pages </p>\r\n      <input id=\"email\" placeholder=\"email\" onChange={e => {\r\n        setEmail(e.target.value);\r\n      }}></input><br />\r\n      <input id=\"password\" type=\"password\" placeholder=\"password\" onChange={e => {\r\n        setPassword(e.target.value);\r\n      }}></input><br />\r\n      {/* Login web form  */}\r\n      <button onClick={login}>Log in</button>\r\n      <p>Not Registered?\r\n      <Link to=\"/signup\">Sign Up!</Link></p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n~~~\r\nThis page provides the input fields for user name and password and uses the auth context to authenticate the user. \r\n\r\n+ Open index.jsx and add the Route element for the  loigin page. Follow the same procedure for the sign in page)\r\n\r\n  ~~~javascript\r\n  import LoginPage from \"./pages/loginPage\";      \r\n   \r\n  ....\r\n  \r\n  <Route path=\"/login\" element={<LoginPage />} />\r\n      \r\n  .....\r\n  ~~~\r\n\r\n  \r\n\r\n+ In */src/index.js*x, underneath the ``<Link to\"/\">Sign Up</Link>`` statement, enter another link to the SignUp page: \r\n\r\n  ~~~javascript\r\n      \r\n  \r\n             <br />\r\n            <Link to=\"/login\">Log In</Link>\r\n  ~~~\r\n\r\n\r\n+ Now test the Log In feature by clicking on the Login link. **Remember you need to use a email and password that's in the DB. Use the email/password you used in the last step**\r\n  If successful, the Login will redirect to the Home page. \r\n\r\n## Private Routes\r\n\r\nWe will only allow authenticated users access Movie Details. We need to create a ``<PrivateRoute >`` element to  force authentication using the login page.\r\n\r\n+ In the */src* folder, create a new file called ***privateRoute.jsx.*** Add the following content:\r\n\r\n~~~javascript\r\nimport React, { useContext } from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { AuthContext } from './contexts/authContext'\r\n\r\nconst PrivateRoute = ({ children }) => {\r\n  const context = useContext(AuthContext)\r\n  return context.isAuthenticated ? children : <Navigate to=\"/login\" />;\r\n};\r\n\r\nexport default PrivateRoute;\r\n~~~\r\n\r\nThis component uses the AuthContext to check if a user is authenticated. If not, a ``<Naviagate >`` element configured and the login page is returned. If not, the child element of the <PrivateRoute>is returned\r\n\r\n+ Open /src/indedx.jsx and replace ``<Route path=\"/movies/:id\" element={<MoviePage>} />`` statement with the following:\r\n\r\n  ~~~\r\n  import PrivateRoute from \"./privateRoute\";\r\n  \r\n  ....\r\n  \r\n  <Route path=\"/movies/:id\" element={\r\n                <PrivateRoute>\r\n                  <MoviePage />\r\n                </PrivateRoute>}\r\n   />\r\n  ~~~\r\n\r\n+ Test it! Now try to click on a movie to access the details. You will be directed to the login page. Authenticate using the login page and you will now be able to access the Movie Details. \r\n\r\n## Personalised Authentication Header\r\n\r\nIt would be nice to show the authentication status in the app to show if someone is logged in or not. To do this, we will add an Authentication header to the app that will display the email address of the user that is currently logged in:\r\n\r\n+ In the */src* folder, create a file called authHeader.jsx and add the following content:\r\n\r\n~~~javascript\r\nimport React, { useContext } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { AuthContext } from \"./authContext\";\r\n\r\nconst BaseAuthHeader = (props) => {\r\n  const context = useContext(AuthContext);\r\n  const { history } = props;\r\n\r\n  return context.isAuthenticated ? (\r\n    <p>\r\n      Welcome {context.email}! <button onClick={() => context.signout()}>Sign out</button>\r\n    </p>\r\n  ) : (\r\n    <p>\r\n      You are not logged in{\" \"}\r\n      <button onClick={() => history.push(\"/login\")}>Login</button>\r\n    </p>\r\n  );\r\n};\r\n\r\nexport default withRouter(BaseAuthHeader);\r\n~~~\r\n\r\nThis component will display a simple \"Welcome\" message only if the user has authenticated. Otherwise, it displays a link to the Login Page.\r\n\r\n## Update index.jsx\r\n\r\nFinally, update the index.jsx to use the login page, authentication context, and private component:\r\n\r\n+ In the /src/index.jsx, import the authHeader component\r\n\r\n  ~~~javascript\r\n  import AuthHeader from \"./authHeader\";\r\n  ~~~\r\n\r\n+ In the same file, add the component just inside the <AuthContextProvider> scope and before the home <Link>\r\n\r\n  ```javascript\r\n  ...\r\n  <AuthContextProvider>\r\n      <AuthHeader />  // DD THIS LINE\r\n  \t<Link to=\"/\">Home</Link>\r\n  ...\r\n  ```\r\n\r\n  \r\n\r\n## Test It!\r\n\r\n+ Now, open the react app in a browser using *http//:localhost:3000* and click on a *movies* link. You should see the updated login page with username and password fields. Enter a known user name and password (user1 and test1) and the app should authenticate using the API and get a JWT token. You should also be able to access all protected routes  on the React App (Movies and Profile).  \r\n<img src=\"./img/image-20230420003742811.png\" alt=\"image-20230420003742811\" style=\"zoom:50%;\" />   \r\nThe following screen shot shows the app after authentication. In developer tools, you can see the JWT token in the browsers local storage.  \r\n<img src=\"./img/image-20230420003943472.png\" alt=\"image-20230420003943472\" style=\"zoom:50%;\" />\r\n\r\n### \r\n\r\n### One final bit: Add Route Authentication back into the API\r\n\r\nLets undo the temporary removal of authentication on the API we did earier\r\n\r\n+ **IN YOUR EXPRESS APP** add the accountsController.verify to the get movie by id route. It will only work now if a valid JWTToken is included in the request. Open /src/movies/routes/index.js and add it to the routing middleware as shown in the image below \r\n\r\n <img src=\"./img/image-20230420103534091.png\" alt=\"image-20230420103534091\" style=\"zoom:50%;\" />\r\n\r\nOPTIONAL: Update the react app and the Express API to authenticate for all routes (including viewing movie list). ","route":"/lab/{{COURSEURL}}/topic11/book-01/Authentication","id":"Authentication","type":"step"}]},{"route":"https://wit-ie.zoom.us/rec/share/9YTjVlig_PN8RG0ATG86teLIaIF5RMU558XlqJd-Pmvil2dxTNbNvWq_OtIEOZvX.GHUXAKPlBwmp2mK8","type":"web","title":"Lecture Recording 1","summary":"Lecture Recording 1","contentMd":"Lecture Recording 1","frontMatter":{},"id":"web-1","img":"https://{{COURSEURL}}/topic11/web-1/web.png","imgFile":"web.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false},{"route":"https://github.com/fxwalsh/mongo_demo","type":"web","title":"Lecture Code Example\r","summary":"Salt/Hashing, JWT, Route Authentication","contentMd":"Lecture Code Example\r\n\r\nSalt/Hashing, JWT, Route Authentication","frontMatter":{},"id":"web-2","img":"https://{{COURSEURL}}/topic11/web-2/web.png","imgFile":"web.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false},{"route":"/archive/{{COURSEURL}}/topic11/archive-1","type":"archive","title":"Resources.\r","summary":"React sample app.","contentMd":"Resources.\r\n\r\nReact sample app.","frontMatter":{},"id":"archive-1","img":"https://{{COURSEURL}}/topic11/archive-1/archive.jpg","imgFile":"archive.jpg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"archiveFile":"archive.zip"},{"route":"/archive/{{COURSEURL}}/topic11/archive-2","type":"archive","title":"Resources.\r","summary":"Class Demo Example API","contentMd":"Resources.\r\n\r\nClass Demo Example API","frontMatter":{},"id":"archive-2","img":"https://{{COURSEURL}}/topic11/archive-2/archive.jpg","imgFile":"archive.jpg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"archiveFile":"archive.zip"}]},{"route":"/topic/{{COURSEURL}}/topic12","type":"topic","title":" API Testing\r","summary":"This topic introduces testing for web APIs.","contentMd":"# API Testing\r\n\r\nThis topic introduces testing for web APIs.\r\n","frontMatter":{},"id":"topic12","img":"https://{{COURSEURL}}/topic12/main.jpg","imgFile":"main.jpg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":true,"los":[{"route":"/talk/{{COURSEURL}}/topic12/talk-1","type":"talk","title":" Testing Web APIs\r","summary":"This talk covers API testing with Mocha, Should and SuperTest","contentMd":"# Testing Web APIs\r\n\r\nThis talk covers API testing with Mocha, Should and SuperTest\r\n","frontMatter":{},"id":"talk-1","img":"https://{{COURSEURL}}/topic12/talk-1/Testing-Web-APIs.jpg","imgFile":"Testing-Web-APIs.jpg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"pdf":"https://{{COURSEURL}}/topic12/talk-1/Testing-Web-APIs.pdf","pdfFile":"Testing-Web-APIs.pdf"},{"route":"/lab/{{COURSEURL}}/topic12/book-1","type":"lab","title":"Lab-api5","summary":"This lab shows you how to test a Node API using Postman and Newman.\r","contentMd":"# API Testing Lab\r\n\r\nThis lab shows you how to test a Node API using Postman and Newman.\r\n\r\nTests confirm that your API is working as expected, that integrations between services are functioning reliably, and that new developments haven't broken any existing functionality. \r\n\r\n## Prerequisites\r\n\r\nYou need a working version of the Movies API for this lab. The solution to the last lab you completed will suffice.","frontMatter":{},"id":"book-1","img":"https://{{COURSEURL}}/topic12/book-1/img/main4.PNG","imgFile":"img/main4.PNG","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"title":" API Testing Lab","shortTitle":"Lab-api5","contentMd":"# API Testing Lab\r\n\r\nThis lab shows you how to test a Node API using Postman and Newman.\r\n\r\nTests confirm that your API is working as expected, that integrations between services are functioning reliably, and that new developments haven't broken any existing functionality. \r\n\r\n## Prerequisites\r\n\r\nYou need a working version of the Movies API for this lab. The solution to the last lab you completed will suffice.","route":"/lab/{{COURSEURL}}/topic12/book-1/Lab-api5","id":"Lab-api5","type":"step"},{"title":" Set Up","shortTitle":"set-up","contentMd":"# Set Up\r\n\r\n\r\nAll the following are development dependencies because you will just use them for testing. As such, use the ``--save-dev`` option for npm installation.\r\n\r\n+ You need **[Newman](https://www.npmjs.com/package/newman)** and [**newman-reporter-htmlextra**](https://www.npmjs.com/package/newman-reporter-htmlextra). Install as development dependencies into lab folder as follows.\r\n\r\n```bash\r\nnpm install --save-dev newman\r\nnpm install --save-dev newman-reporter-htmlextra\r\n\r\n```\r\n\r\n","route":"/lab/{{COURSEURL}}/topic12/book-1/set-up","id":"set-up","type":"step"},{"title":" Individual Tests","shortTitle":"integration-testing","contentMd":"# Individual Tests\r\n\r\n### Create a new workspace\r\n\r\n+ Creating a Postman workspace will  help you organise your API testing\r\n\r\n+ Open Postman app, select Workspaces from the Top menu and click the *creat Workspace* button. Enter the following details:\r\n\r\n  ![image-20220427102756813](./img/image-20220427102756813.png)\r\n\r\n## Create a Development Environment\r\n\r\nA Postman environment is a set of [variables](https://learning.postman.com/docs/sending-requests/variables/) you can use in your Postman requests. You can use environments to group values together. We will create a test environment to test the API:\r\n\r\n+ Select  **Environments** on the left of the screen to access all environments. Select the + to add a new environment and enter the details as shown below:\r\n\r\n  ![image-20220427103600764](./img/image-20220427103600764.png)\r\n\r\n+ Click the  ![image-20220427103741696](https://assets.postman.com/postman-docs/icon-save.jpg#icon) button to make the configuration effective.\r\n\r\n+ Select Local Test Environment and select the set active icon ![Set active icon](https://assets.postman.com/postman-docs/icon-checkmark-v9.jpg#icon) to make an environment active. Select an environment to open it for editing in a tab.\r\n\r\n## Create a Collection\r\n\r\n+ Select  **Collections** on the left of the screen. Select the + to add a new collection and enter the details as shown below:\r\n\r\n<img src=\"./img/image-20220427212259743.png\" alt=\"image-20220427212259743\" style=\"zoom:50%;\" />\r\n\r\n## Define Collection Variables\r\n\r\n+ Select *Movies API* in collections. Then select the *Variables* tab and enter the following:\r\n   <img src=\"./img/image-20220427213008793.png\" alt=\"image-20220427213008793\" style=\"zoom:67%;\" />\r\n+ Click the  ![image-20220427103741696](https://assets.postman.com/postman-docs/icon-save.jpg#icon) button to make the configuration effective.\r\n\r\n## Add a \"Create New Account\" Request\r\n\r\n\r\n\r\n+ Select the Movies API collection and select  *Add a request* \r\n\r\n+ Create a request to add an account by entering the following configuration values:\r\n\r\n  <img src=\"./img/image-20220427213310139.png\" alt=\"image-20220427213310139\" style=\"zoom:67%;\" />\r\n\r\n+ To send the request, make sure to start the API developed in the previous labs. Then click on **Send** in the postman request. You should see the following result:\r\n\r\n  <img src=\"./img/image-20220427213829726.png\" alt=\"image-20220427213829726\" style=\"zoom:50%;\" />\r\n\r\n+ Now hit the ***Send*** button again to send the same request. Notice that (as expected!) the response indicates duplicate key error:\r\n  <img src=\"./img/image-20220427214051291.png\" alt=\"image-20220427214051291\" style=\"zoom:50%;\" />\r\n\r\n  \r\n\r\nTo make testing of the API easier and repeatable, we can use a *Pre-request Script* to populate the collection variables with random data. Postman uses the [faker library](https://www.npmjs.com/package/@faker-js/faker) to generate sample data, including random names, addresses, email addresses. This way, we'll have a unique email address for each request. This allows you to generate \"dynamic\" data for your tests. \r\n\r\n+ Select the *Pre-request Script* tab and add the following Javascript code:\r\n\r\n```json\r\n\r\npm.collectionVariables.set(\"firstName\", pm.variables.replaceIn('{{$randomFirstName}}'))\r\npm.collectionVariables.set(\"lastName\",pm.variables.replaceIn('{{$randomLastName}}'))\r\npm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'))\r\npm.collectionVariables.set(\"password\",\"test123@\")\r\n```\r\n\r\nThe *{{$randomEmail}}* gets a new random email using the faker library before each request. You can get more details [here](https://learning.postman.com/docs/writing-scripts/script-references/variables-list/) \r\n\r\n+ Now hit the ***Send*** button again. This time you should see a result similar to the following:\r\n\r\n  <img src=\"./img/image-20220427221828118.png\" alt=\"image-20220427221828118\" style=\"zoom:67%;\" />\r\n\r\n+ Click the  ![image-20220427103741696](https://assets.postman.com/postman-docs/icon-save.jpg#icon) button to make the configuration effective.\r\n\r\n## Write Tests \r\n\r\nYou can write test scripts for your Postman API requests in JavaScript. You can add tests to individual requests in a collection. Postman also includes code snippets you add and then modify to suit your test logic.\r\n\r\nTests execute after the request finishes and the results are shown in the *Test Results* tab alongside the response data.\r\n\r\n+ Open the \"Create New Account\" request and select the **Tests** tab. \r\n\r\n+ Enter the following test to check that the correct status code is returned:\r\n\r\n  ~~~javascript\r\n  pm.test(\"Add Account: Successful Response\",()=>pm.response.to.have.status(201))\r\n  ~~~\r\n\r\n+ Hit ***send*** again and select the Test Results tab in the response section to check that the test passed:\r\n\r\n  <img src=\"./img/image-20220428095602774.png\" alt=\"image-20220428095602774\" style=\"zoom:67%;\" />\r\n\r\nBy Using [ChaiJS BDD](https://www.chaijs.com/api/bdd/) syntax and `pm.expect` , we can also check details of the response. For example, creating an account should return a UUID for the account (remember this is generated by the Database).\r\n\r\n+ Add another test to the script to check the response in more detail:\r\n\r\n  ~~~javascript\r\n  //... other tests\r\n  const jsonData = pm.response.json();\r\n  pm.test(\"Add Account: Response Object contains correct properties\",()=>{\r\n    pm.expect(jsonData).to.have.property(\"id\");\r\n    pm.expect(jsonData.id).to.be.a(\"string\");\r\n    pm.expect(jsonData.firstName).to.eql(pm.collectionVariables.get(\"firstName\"));\r\n    pm.expect(jsonData.lastName).to.eql(pm.collectionVariables.get(\"lastName\"));\r\n    pm.expect(jsonData.email).to.eql(pm.collectionVariables.get(\"email\").toLowerCase());\r\n  })\r\n  ~~~\r\n\r\n+ Run the test again by hitting the Send button. You should see the results for 2 tests:\r\n\r\n<img src=\"./img/image-20220428100613163.png\" alt=\"image-20220428100613163\" style=\"zoom: 67%;\" />\r\n\r\n+ Click the  ![image-20220427103741696](https://assets.postman.com/postman-docs/icon-save.jpg#icon) button to save changes.\r\n\r\n## Authentication Test\r\n\r\nOnce an account is added, you should be able to authenticate using the email and password. \r\n\r\n+ In the same collection, create a new test called ***Get Security Token*** with the configuration shown below:\r\n\r\n  <img src=\"./img/image-20230503093040657.png\" alt=\"image-20230503093040657\" style=\"zoom:50%;\" />\r\n\r\n\r\n\r\nNotice that the test fails. But the data used(email/password) are valid and should work? This is because the email, when saved to the repository, is lower case whereas the emails generated by faker uses some uppercase characters(this is why we test!). To fix this issue, open **/src/accounts/repositories/MongoRepository.js** and update the getByEmail function to use lower case email:\r\n~~~javascript\r\n...   \r\nasync getByEmail(userEmail) {\r\n        const result = await this.model.findOne({email: userEmail.toLowerCase()});\r\n        return new Account(result.id, result.firstName, result.lastName, result.email, result.password,result.favourites);\r\n    }\r\n...\r\n~~~\r\n\r\nNow, run the \"Create New Account\" test again followed by the \"Get Security Token\" test. It should be successful this time:\r\n <img src=\"./img/image-20220428101359757.png\" alt=\"image-20220428101359757\" style=\"zoom:67%;\" />\r\n\r\nWhen you click send, the request uses the collection variables generated in the previous \"Create New Account\" request to get a JWT token (**NOTE:** this requires that you have executed the \"Add Account\" request )\r\n\r\n\r\n\r\n+ Now lets write some tests that check the response is correct. Select the Tests tab and add the following tests: \r\n\r\n  ~~~javascript\r\n  const jsonData = pm.response.json();\r\n  \r\n  pm.test(\"Get Token: Successful Response\",()=>pm.response.to.have.status(200))\r\n  \r\n  pm.test(\"Get Token: Response Object contains token\",()=>{\r\n    pm.expect(jsonData).to.have.property(\"token\");\r\n    pm.expect(jsonData.token).to.be.a(\"string\");\r\n  })\r\n  pm.test(\"Get Token: Response contains correctly formatted token\",()=>{\r\n    const splitArray = jsonData.token.split(\" \")\r\n    pm.expect(splitArray[0].toLowerCase()).to.eql(\"bearer\");\r\n    pm.expect(splitArray[1]).length.to.be.greaterThan(25);\r\n    pm.collectionVariables.set(\"authToken\",splitArray[1])\r\n  })\r\n  ~~~\r\n\r\n  There are 3 tests here: Test HTTP response is successful, Test the response contains a token, Test the token is formatted correctly. \r\n  Also, notice that we create and set the ***authToken*** collection variable with the token returned in the response. This allows us to use the valid token in other tests, for example getting a list of movies.\r\n\r\n+ Click the  ![image-20220427103741696](https://assets.postman.com/postman-docs/icon-save.jpg#icon) button to save changes.\r\n\r\n  ## Get Movies Request\r\n\r\n  As you know, you should only be able to get a list of movies if you have a valid JWT token. We will now write 2 requests to check the protected endpoint *GET /api/movies.* One request will check the response using an invalid token. The second request will check using a valid token\r\n\r\n  ### Valid Token Request\r\n\r\n+ Create a new request in the same collection called ***Get Movies: valid token***. Configure to use Bearer Token authentication as shown below :\r\n\r\n  <img src=\"./img/image-20220428103719207.png\" alt=\"image-20220428103719207\" style=\"zoom:67%;\" />\r\n\r\n   \r\n\r\n+ Open the Tests tab and Add the following tests to check for a correct response: \r\n\r\n~~~javascript\r\npm.test(\"Get Movies: Status code is 200\",  ()=> {\r\n    pm.response.to.have.status(200);\r\n});\r\n\r\npm.test(\"Get Movies: Content-Type is correct\", function () {\r\n   pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');\r\n});\r\n\r\npm.test(\"Get Movies: Response time is less than 400ms\", () => {\r\n  pm.expect(pm.response.responseTime).to.be.below(400);\r\n});\r\n\r\nconst jsonData = pm.response.json();\r\n\r\npm.test(\"Get Movies: Test movie data of response\", () => {\r\n  pm.expect(jsonData).to.be.an(\"object\");\r\n  pm.expect(jsonData.page).to.be.a(\"number\");\r\n  pm.expect(jsonData.results).to.be.an(\"array\").length.lessThan(21);\r\n  aMovie=jsonData.results[0]\r\n  pm.expect(aMovie).to.have.property(\"id\");\r\n  pm.expect(aMovie).to.have.property(\"title\");\r\n});\r\n~~~\r\n\r\nRun the script and you should see all tests passing\r\n\r\n+ Click the  ![image-20220427103741696](https://assets.postman.com/postman-docs/icon-save.jpg#icon) button to save changes.\r\n\r\n### Invalid Token Request\r\n\r\n+ Create a new request in the same collection called ***Get Movies: invalid token***. Configure to use a bad Bearer Token authentication as shown below :\r\n\r\n<img src=\"./img/image-20220428110940439.png\" alt=\"image-20220428110940439\" style=\"zoom:67%;\" />\r\n\r\n+ Add the following tests:\r\n\r\n  ~~~javascript\r\n   var jsonData = pm.response.json();\r\n  \r\n  pm.test(\"Invalid Token: Correct Response\", function () {\r\n     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);\r\n     pm.expect(jsonData).to.be.an(\"object\");\r\n     pm.expect(jsonData).to.have.property(\"error\");\r\n  });\r\n  ~~~\r\n\r\n  Send this request and check that the above test passes.\r\n\r\n+ Click the  ![image-20220427103741696](https://assets.postman.com/postman-docs/icon-save.jpg#icon) button to save changes.\r\n\r\n","route":"/lab/{{COURSEURL}}/topic12/book-1/integration-testing","id":"integration-testing","type":"step"},{"title":" Collection Runner & Automation","shortTitle":"CollectionRunner & Automation","contentMd":"# Collection Runner & Automation\r\n\r\nThe *Collection Runner* enables you to run all the API requests in a collection in a specified sequence. Usin gthe collectin runner enables us to log test results and pass data between requests.\r\n\r\n+ Select the Movies API collection and click on **Run Collection** button to open the Collection Runner view\r\n\r\n+ We will configure the collection runner to run the requests in the following order\r\n\r\n  1. Get Movies using invalid token\r\n  2. Create new account\r\n  3. Get security token\r\n  4. Get movies using security token\r\n\r\n  Drag the *gGet movies: invlid toke* request to the top of the run order as shown in the configuration below:\r\n\r\n<img src=\"./img/image-20220428115327063.png\" alt=\"image-20220428115327063\" style=\"zoom:67%;\" />\r\n\r\n+ Click on **Run Movies API**. You should see the request executions and test results.  \r\n\r\n  <img src=\"./img/image-20220428115709858.png\" alt=\"image-20220428115709858\" style=\"zoom:67%;\" />\r\n\r\n  ou will see whether each request passed or failed. You can also filter on each using the **Passed** and **Failed** tabs at the top. If any tests in a request script fail during the collection run, the whole request fails.\r\n\r\n+ Click the \"Get Movies: valid token\" test from the list of results to get a more detail:\r\n\r\n<img src=\"./img/image-20220428120301317.png\" alt=\"image-20220428120301317\" style=\"zoom:67%;\" />\r\n\r\n## Automating Collection Runs in VS Code\r\n\r\nYou can use collection runs  with [Newman](https://learning.postman.com/docs/running-collections/using-newman-cli/command-line-integration-with-newman/), the Postman command-line interface, enables you to run collections and build them into your development cycle. This will allow you to execute the requests and tests from within VS Code. To do this, we need to export our environment and collection from Postman as json files.\r\n\r\n+ In your Movies API project, in the root folder create a new folder called **tests**\r\n\r\n+ In the tests folder, create another folder called **reports**.\r\n\r\n  <img src=\"./img/image-20220428123124045.png\" alt=\"image-20220428123124045\" style=\"zoom:80%;\" />\r\n\r\n### Export Environment \r\n\r\n+ Select  **Environments** on the left of the screen. Select the environment you created earlier, click on the ... icon and select export and save into the *tests* folder created in the last step using file name **movies_environment.json**.\r\n\r\n  <img src=\"./img/image-20220428122804656.png\" alt=\"image-20220428122804656\" style=\"zoom:67%;\" />\r\n\r\n## Export Collection\r\n\r\n+ Select  **Collections** on the left of the screen. Select the collection you created earlier, click on the ... icon and select export. \r\n\r\n+ Save as collection2.1  into the *tests* folder using file name **movies_collection.json**.\r\n\r\n  <img src=\"./img/image-20220428123449356.png\" alt=\"image-20220428123449356\" style=\"zoom:67%;\" />\r\n\r\n  ## Newman Automation\r\n\r\nYou have already installed Newman and the html report generation packages(if not, go back to Set Up step)\r\n\r\n+ In your Movies API project, open **package.json** . Locates the *scripts* property and add the following test script shown below:\r\n\r\n  ~~~json\r\n   \"scripts\": {\r\n      \"start\": \"nodemon --exec babel-node index.js\",\r\n      \"test\": \"newman run ./tests/movies_collection.json -e ./tests/movies_environment.json --reporters htmlextra,cli --reporter-htmlextra-export ./tests/reports/report.html\"\r\n    },\r\n  ~~~\r\n\r\n  The options specified in the run script are: \r\n\r\n  ​\t\r\n\r\n  | option                                                   | description                                                  |\r\n  | -------------------------------------------------------- | ------------------------------------------------------------ |\r\n  | ./tests/movies_collection.json                           | path to exported Postman Collection file                     |\r\n  | -e ./tests/movies_environment.json                       | path to exported Postman Environment file                    |\r\n  | --reporters htmlextra,cli                                | specifies how output will be reported, in this case command line(cli) and html(htmlextra) |\r\n  | --reporter-htmlextra-export ./tests/reports/report.html\" | specifies the path where the htmlextra report will be created |\r\n\r\n+ Open a command line in the root folder of your movies api and execute the following:\r\n\r\n  ~~~bash\r\n  npm run test\r\n  ~~~\r\n\r\n  This will run the tests and output the results to the command line:\r\n\r\n  <img src=\"./img/image-20220428125418473.png\" alt=\"image-20220428125418473\" style=\"zoom:50%;\" />\r\n\r\n+ Check in the /tests/reports folder and open the report.html file in a browser. You should see the test report in html. Click on the Requests tab to get more detail for each request and test.\r\n  \r\n\r\n<img src=\"./img/image-20220428125703938.png\" alt=\"image-20220428125703938\" style=\"zoom:50%;\" />\r\n","route":"/lab/{{COURSEURL}}/topic12/book-1/CollectionRunner & Automation","id":"CollectionRunner & Automation","type":"step"}]},{"route":"https://wit-ie.zoom.us/rec/share/S_PWllKlg3PN88Tsq3zboRqioaLdVzo2Zh13_4waycChrQkD_2igOrX6rjEVunsl.BX08vOLrizbgbtPe","type":"web","title":"Lecture Recording 1","summary":"Lecture Recording 1","contentMd":"Lecture Recording 1","frontMatter":{},"id":"web-1","img":"https://{{COURSEURL}}/topic12/web-1/web.png","imgFile":"web.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false},{"route":"https://youtu.be/7Urj2WCUE_k","type":"web","title":"React App & API integration","summary":"React App & API integration","contentMd":"React App & API integration","frontMatter":{},"id":"web-2","img":"https://{{COURSEURL}}/topic12/web-2/web.png","imgFile":"web.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false},{"route":"/archive/{{COURSEURL}}/topic12/archive-1","type":"archive","title":"Resources.\r","summary":"Class Demo Example API","contentMd":"Resources.\r\n\r\nClass Demo Example API","frontMatter":{},"id":"archive-1","img":"https://{{COURSEURL}}/topic12/archive-1/archive.jpg","imgFile":"archive.jpg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"archiveFile":"archive.zip"}]},{"route":"/topic/{{COURSEURL}}/topic13","type":"topic","title":" Assignments.\r","summary":"Module assignment specifications.","contentMd":"# Assignments.\r\n \r\nModule assignment specifications.\r\n\r\n\r\n","frontMatter":{},"id":"topic13","img":"https://{{COURSEURL}}/topic13/topic.jpg","imgFile":"topic.jpg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":true,"los":[{"route":"/lab/{{COURSEURL}}/topic13/book-1","type":"lab","title":"Assignment_1","summary":"## Overview.\r","contentMd":"# Assignment 1 specification.\r\n\r\n## Overview.\r\n\r\n__Objective:__ Demonstrate your knowledge of the React framework and ecosystem by designing and developing a SPA. The app may extend the Movies app developed in the labs (preferred option) or be bespoke (subject to approval).\r\n\r\n__Completion__: 14/04/2023.\r\n\r\n__Weight__: 50%.\r\n\r\n__Deliverables__:\r\nA text file (assignment1.txt) containing:\r\n+ The URL of your source code GitHub repo.\r\n     + README - based on provided template. (*1)\r\n     + Git history. (*2)\r\n+ The URL of your YouTube video demonstrating your app.\r\n\r\n1. The README is the documentation of the work you have carried out and must be complete and accurate.\r\n1. You must maintain a detailed Git commit history throughout the assignment period. We advise that you commit at least once for every development session. Commit messages must always state the purpose of each session, whether completed or not - the 'only commit working code' principle need not always apply.\r\n\r\n## Grading spectrum.\r\n\r\n### Good (40-50%).\r\n__Theme__: Foundation skill set.\r\n\r\n__Characteristics:__ The new features developed are similar to those that originated in the labs regarding component structure, UI style and behaviour.\r\n\r\n__Features__:\r\n\r\n+ UI - New views/pages (3+).\r\n     + List view (e.g. Most popular movies, Actors, Similar movies, TV Series).\r\n     + Detail view (e.g. Actor Bio, TV Series).\r\n+ Routing - New routes.\r\n     + At least one additional parameterized URL.\r\n     + Data hyperlinking.\r\n+ Data Model.\r\n     + An additional data entity type, e.g. Actor, TV series.\r\n     + Server state Caching.\r\n+ Functionality.\r\n     + Additional filtering and/or sorting criteria.\r\n     + My fantasy movie. (Basic) (*1)\r\n     + Other.\r\n\r\n1. The user can create their fantasy movie record. Limit the details to Title, Overview, Genres, Release Date, Runtime, and Production Company(s). \r\n\r\n### Very Good (50-70%).\r\n__Theme:__ Adapt and experiment.\r\n\r\n__Characteristics:__ Some of the new app features have unique characteristics in terms of component structure, UI style and behaviour.\r\n\r\n__Features:__\r\n\r\n+ UI.\r\n     + Extensive data hyperlinking.\r\n     + Pagination - for data-listing pages. (*1)   \r\n+ Routing - Basic authentication.\r\n     + Private and Public routes (e.g. Movie Details).\r\n     + Premium functionality (e.g. Filtering).\r\n+ Functionality. \r\n     + Favourite Actors/TV series.\r\n     + Multi-criteria Search. (*2)\r\n     + Other.\r\n+ Storybook support.\r\n\r\n1. See [react-query pagination][pagination] support.\r\n1. Search for movies based on criteria submitted on a web form. The form should use appropriate controls - menus, checkboxes, etc.\r\n\r\n### Excellent (70-90%)\r\n__Theme__: Independent learner.\r\n\r\n__Characteristics__: Can research and use techniques and technologies not covered in the labs/lectures.\r\n\r\n__Features__:\r\n\r\n+ Functionality.\r\n     + Ordered Favourites.\r\n     + Create themed movie playlists (Title, Theme, Movies). \r\n     + My fantasy movie (Advanced) (*1)\r\n+ Routing.\r\n     + 3rd party authentication - [Supabase][supabase].\r\n+ Deployment (e.g. [Vercel][vercel] )\r\n\r\n1. Allow the addition of a cast, where each member has a role name and description. Adding/Uploading a movie poster.\r\n\r\n### Outstanding (90+)\r\n__Theme__: Exceptional ability.\r\n\r\n__Features__:\r\n\r\n+ Backend persistence using Supabase - e.g. Favourites, Fantasy movie.\r\n+ Rich feature set.\r\n \r\n\r\n[pagination]: https://react-query.tanstack.com/guides/paginated-queries\r\n[supabase]: https://supabase.com/\r\n[vercel]: https://vercel.com/","frontMatter":{},"id":"book-1","img":"https://{{COURSEURL}}/topic13/book-1/img/main.png","imgFile":"img/main.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"title":" Assignment 1 specification.","shortTitle":"Assignment_1","contentMd":"# Assignment 1 specification.\r\n\r\n## Overview.\r\n\r\n__Objective:__ Demonstrate your knowledge of the React framework and ecosystem by designing and developing a SPA. The app may extend the Movies app developed in the labs (preferred option) or be bespoke (subject to approval).\r\n\r\n__Completion__: 14/04/2023.\r\n\r\n__Weight__: 50%.\r\n\r\n__Deliverables__:\r\nA text file (assignment1.txt) containing:\r\n+ The URL of your source code GitHub repo.\r\n     + README - based on provided template. (*1)\r\n     + Git history. (*2)\r\n+ The URL of your YouTube video demonstrating your app.\r\n\r\n1. The README is the documentation of the work you have carried out and must be complete and accurate.\r\n1. You must maintain a detailed Git commit history throughout the assignment period. We advise that you commit at least once for every development session. Commit messages must always state the purpose of each session, whether completed or not - the 'only commit working code' principle need not always apply.\r\n\r\n## Grading spectrum.\r\n\r\n### Good (40-50%).\r\n__Theme__: Foundation skill set.\r\n\r\n__Characteristics:__ The new features developed are similar to those that originated in the labs regarding component structure, UI style and behaviour.\r\n\r\n__Features__:\r\n\r\n+ UI - New views/pages (3+).\r\n     + List view (e.g. Most popular movies, Actors, Similar movies, TV Series).\r\n     + Detail view (e.g. Actor Bio, TV Series).\r\n+ Routing - New routes.\r\n     + At least one additional parameterized URL.\r\n     + Data hyperlinking.\r\n+ Data Model.\r\n     + An additional data entity type, e.g. Actor, TV series.\r\n     + Server state Caching.\r\n+ Functionality.\r\n     + Additional filtering and/or sorting criteria.\r\n     + My fantasy movie. (Basic) (*1)\r\n     + Other.\r\n\r\n1. The user can create their fantasy movie record. Limit the details to Title, Overview, Genres, Release Date, Runtime, and Production Company(s). \r\n\r\n### Very Good (50-70%).\r\n__Theme:__ Adapt and experiment.\r\n\r\n__Characteristics:__ Some of the new app features have unique characteristics in terms of component structure, UI style and behaviour.\r\n\r\n__Features:__\r\n\r\n+ UI.\r\n     + Extensive data hyperlinking.\r\n     + Pagination - for data-listing pages. (*1)   \r\n+ Routing - Basic authentication.\r\n     + Private and Public routes (e.g. Movie Details).\r\n     + Premium functionality (e.g. Filtering).\r\n+ Functionality. \r\n     + Favourite Actors/TV series.\r\n     + Multi-criteria Search. (*2)\r\n     + Other.\r\n+ Storybook support.\r\n\r\n1. See [react-query pagination][pagination] support.\r\n1. Search for movies based on criteria submitted on a web form. The form should use appropriate controls - menus, checkboxes, etc.\r\n\r\n### Excellent (70-90%)\r\n__Theme__: Independent learner.\r\n\r\n__Characteristics__: Can research and use techniques and technologies not covered in the labs/lectures.\r\n\r\n__Features__:\r\n\r\n+ Functionality.\r\n     + Ordered Favourites.\r\n     + Create themed movie playlists (Title, Theme, Movies). \r\n     + My fantasy movie (Advanced) (*1)\r\n+ Routing.\r\n     + 3rd party authentication - [Supabase][supabase].\r\n+ Deployment (e.g. [Vercel][vercel] )\r\n\r\n1. Allow the addition of a cast, where each member has a role name and description. Adding/Uploading a movie poster.\r\n\r\n### Outstanding (90+)\r\n__Theme__: Exceptional ability.\r\n\r\n__Features__:\r\n\r\n+ Backend persistence using Supabase - e.g. Favourites, Fantasy movie.\r\n+ Rich feature set.\r\n \r\n\r\n[pagination]: https://react-query.tanstack.com/guides/paginated-queries\r\n[supabase]: https://supabase.com/\r\n[vercel]: https://vercel.com/","route":"/lab/{{COURSEURL}}/topic13/book-1/Assignment_1","id":"Assignment_1","type":"step"},{"title":" TMDB endpoints","shortTitle":"TMDB","contentMd":"# TMDB endpoints\r\n\r\nSee [here][tmdb] for details.\r\n\r\n__Discover endpoint.__\r\n\r\n+ Lots of query string options for more precise requests.\r\n   e.g.\r\n\r\n      `https://api.themoviedb.org/3/discover/movie ?api_key=[......]&language=en-US&primary_release_year=...&certification=....&page=1`\r\n\r\n+ Could use as the basis for a mmovie search feature.\r\n \r\n__Movies endpoint.__\r\n\r\n+ Parameterized:\r\n     + Details.\r\n     + Reviews.\r\n     + Credits (Cast and Crew).\r\n     + Similar movies.\r\n     + Recommendations.\r\n+ Static:\r\n     + Now playing.\r\n     + Upcoming.\r\n     + Popular/Top rated.\r\n\r\n__People endpoint (Actors, Directors, etc).__\r\n\r\n+ Parameterized:\r\n     + Biography.\r\n     + Movie/TV credits.\r\n+ Static:\r\n     + Popular.\r\n\r\n__Trending endpoint.__\r\n\r\n+ Movies.\r\n+ People.\r\n\r\n__Certifications endpoint.__\r\n\r\n__Companies endpoint.__\r\n\r\n__TV series endpoint.__\r\n\r\n__TV seasons endpoint.__\r\n\r\netc \r\n\r\n[tmdb]: https://developers.themoviedb.org/3/getting-started/introduction","route":"/lab/{{COURSEURL}}/topic13/book-1/TMDB","id":"TMDB","type":"step"}]},{"route":"/lab/{{COURSEURL}}/topic13/book-2","type":"lab","title":"Assignment_2","summary":"## Overview.\r","contentMd":"# Assignment 2 specification.\r\n\r\n## Overview.\r\n\r\n__Objective:__ Demonstrate your knowledge of API's, Express, Mongoose, Authentication by developing an API and integrate it with your React app from Assignment 1.The app may extend the Movies API developed in the labs (preference) or a bespoke app (subject to approval).\r\n\r\nCompletion: 22/05/2023.\r\n\r\nWeight: 50%.\r\n\r\nDeliverables:\r\nA text file (assignment2.txt) containing:\r\n\r\n+ The URL of your source code GitHub repo.\r\n     + With a completed README.md (see provided template).\r\n+ The URL of your YouTube video demonstrating your API.\r\n    + We may follow up with a Zoom meeting for Q and A (if required).\r\n\r\n##### The README is the documentation of the work you have carried out and must be complete and accurate. We will provide a template later.\r\n\r\n##### You must maintain a detailed Git commit history throughout the assignment period. We advise that you commit at every development session - the 'only commit working code' principle need not always apply. Commit messages must always explain the purpose of each session, whether achieved or not.\r\n\r\n## Grading spectrum.\r\n\r\n### Good (40-49%).\r\n__Theme:__ Apply knowledge of the technology's fundamentals.\r\n\r\n__Objective:__  Basic new features developed.\r\n\r\n__Features:__\r\n+ Routes/Endpoints\r\n    + 2 new API routes,\r\n    + parameterised URL.\r\n+ Repository\r\n    + Integration with MongoDB\r\n+ Basic React Integration\r\n    + At least one GET and POST based endpoint used.\r\n\r\n### Very Good(50-69%).\r\n__Theme:__ Adapt and experiment (with the technology).\r\n\r\n__Objective:__ Good API design and implementation inspired by TMDB API. Extensive work done to API to support React App. Some unique and well conceived functionality included.\r\n\r\n__Features:__\r\n\r\n+ Coherent API design and modelling supporting full manipulation of resources.\r\n+ Nested Document in Mongo/Mongoose.\r\n+ Custom validation using Joi.\r\n+ Basic Authentication and protected routes.\r\n+ Good use of express middleware (e.g. Error handling).\r\n+ Substantial React App integration.\r\n+ Other (Discuss with the lecturer)\r\n\r\n## Excellent(70-84%)\r\n\r\n**Theme:** Confident Developer\r\n\r\n**Characteristics:** Can understand and use techniques and technologies not covered in the labs/lectures.\r\n\r\n**Features (Some of the following):**\r\n\r\n- Advanced authentication/verification to accomplish richer functionality.\r\n\r\n- Excellent use of 3rd party tools,services and modules.\r\n\r\n- API documentation (for example Swagger/openAPI)\r\n\r\n- Logging\r\n\r\n- Testing\r\n\r\n  \r\n\r\n##  Outstanding (85-100%)\r\n__Theme:__ Design Solutions/Exceptional Ability\r\n\r\n__Objective:__  Fully functional end-to-end solution providing novel features and extensive features similar to TMDB api, and more.\r\n\r\n+ Live Hosting, Analytics\r\n\r\n+ Recommender algorithm - Recommend movies based on favourites\r\n\r\n+ Extensive integration with React front end from Assignment 1\r\n\r\n\r\n\r\n","frontMatter":{},"id":"book-2","img":"https://{{COURSEURL}}/topic13/book-2/img/main.jpg","imgFile":"img/main.jpg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"title":" Assignment 2 specification.","shortTitle":"Assignment_2","contentMd":"# Assignment 2 specification.\r\n\r\n## Overview.\r\n\r\n__Objective:__ Demonstrate your knowledge of API's, Express, Mongoose, Authentication by developing an API and integrate it with your React app from Assignment 1.The app may extend the Movies API developed in the labs (preference) or a bespoke app (subject to approval).\r\n\r\nCompletion: 22/05/2023.\r\n\r\nWeight: 50%.\r\n\r\nDeliverables:\r\nA text file (assignment2.txt) containing:\r\n\r\n+ The URL of your source code GitHub repo.\r\n     + With a completed README.md (see provided template).\r\n+ The URL of your YouTube video demonstrating your API.\r\n    + We may follow up with a Zoom meeting for Q and A (if required).\r\n\r\n##### The README is the documentation of the work you have carried out and must be complete and accurate. We will provide a template later.\r\n\r\n##### You must maintain a detailed Git commit history throughout the assignment period. We advise that you commit at every development session - the 'only commit working code' principle need not always apply. Commit messages must always explain the purpose of each session, whether achieved or not.\r\n\r\n## Grading spectrum.\r\n\r\n### Good (40-49%).\r\n__Theme:__ Apply knowledge of the technology's fundamentals.\r\n\r\n__Objective:__  Basic new features developed.\r\n\r\n__Features:__\r\n+ Routes/Endpoints\r\n    + 2 new API routes,\r\n    + parameterised URL.\r\n+ Repository\r\n    + Integration with MongoDB\r\n+ Basic React Integration\r\n    + At least one GET and POST based endpoint used.\r\n\r\n### Very Good(50-69%).\r\n__Theme:__ Adapt and experiment (with the technology).\r\n\r\n__Objective:__ Good API design and implementation inspired by TMDB API. Extensive work done to API to support React App. Some unique and well conceived functionality included.\r\n\r\n__Features:__\r\n\r\n+ Coherent API design and modelling supporting full manipulation of resources.\r\n+ Nested Document in Mongo/Mongoose.\r\n+ Custom validation using Joi.\r\n+ Basic Authentication and protected routes.\r\n+ Good use of express middleware (e.g. Error handling).\r\n+ Substantial React App integration.\r\n+ Other (Discuss with the lecturer)\r\n\r\n## Excellent(70-84%)\r\n\r\n**Theme:** Confident Developer\r\n\r\n**Characteristics:** Can understand and use techniques and technologies not covered in the labs/lectures.\r\n\r\n**Features (Some of the following):**\r\n\r\n- Advanced authentication/verification to accomplish richer functionality.\r\n\r\n- Excellent use of 3rd party tools,services and modules.\r\n\r\n- API documentation (for example Swagger/openAPI)\r\n\r\n- Logging\r\n\r\n- Testing\r\n\r\n  \r\n\r\n##  Outstanding (85-100%)\r\n__Theme:__ Design Solutions/Exceptional Ability\r\n\r\n__Objective:__  Fully functional end-to-end solution providing novel features and extensive features similar to TMDB api, and more.\r\n\r\n+ Live Hosting, Analytics\r\n\r\n+ Recommender algorithm - Recommend movies based on favourites\r\n\r\n+ Extensive integration with React front end from Assignment 1\r\n\r\n\r\n\r\n","route":"/lab/{{COURSEURL}}/topic13/book-2/Assignment_2","id":"Assignment_2","type":"step"},{"title":" TMDB endpoints","shortTitle":"TMDB","contentMd":"# TMDB endpoints\r\n\r\nSee [here][tmdb] for details.\r\n\r\n__Discover endpoint.__\r\n\r\n+ Lots of query string options for more precise requests.\r\n   e.g.\r\n\r\n      `https://api.themoviedb.org/3/discover/movie ?api_key=[......]&language=en-US&primary_release_year=...&certification=....&page=1`\r\n\r\n+ Could use as the basis for a movie search feature.\r\n\r\n__Movies endpoint.__\r\n\r\n+ Parameterized:\r\n     + Details.\r\n     + Reviews.\r\n     + Credits (Cast and Crew).\r\n     + Similar movies.\r\n     + Recommendations.\r\n+ Static:\r\n     + Now playing.\r\n     + Upcoming.\r\n     + Popular/Top rated.\r\n\r\n__People endpoint (Actors, Directors, etc).__\r\n\r\n+ Parameterized:\r\n     + Biography.\r\n     + Movie/TV credits.\r\n+ Static:\r\n     + Popular.\r\n\r\n__Trending endpoint.__\r\n\r\n+ Movies.\r\n+ People.\r\n\r\n__Certifications endpoint.__\r\n\r\n__Companies endpoint.__\r\n\r\n__TV series endpoint.__\r\n\r\n__TV seasons endpoint.__\r\n\r\netc \r\n\r\n[tmdb]: https://developers.themoviedb.org/3/getting-started/introduction","route":"/lab/{{COURSEURL}}/topic13/book-2/TMDB","id":"TMDB","type":"step"}]}]},{"route":"/topic/{{COURSEURL}}/topic70","type":"topic","title":" Lecture Recordings.\r","summary":"The complete set of lecture videos.","contentMd":"# Lecture Recordings.\r\n \r\nThe complete set of lecture videos.","frontMatter":{},"id":"topic70","img":"https://{{COURSEURL}}/topic70/topic.png","imgFile":"topic.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"route":"https://www.youtube.com/watch?v=fbAHan-lhSk","type":"web","title":"Lecture 1.\r","summary":"Module overview. TS introduction.","contentMd":"Lecture 1.\r\n\r\nModule overview. TS introduction.","frontMatter":{},"id":"web-01","img":"https://{{COURSEURL}}/topic70/web-01/web.jpeg","imgFile":"web.jpeg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false},{"route":"https://www.youtube.com/watch?v=h12-VrsnW1M","type":"web","title":"Lecture 2.\r","summary":"Introduction to TC (Continued).","contentMd":"Lecture 2.\r\n\r\nIntroduction to TC (Continued).","frontMatter":{},"id":"web-02","img":"https://{{COURSEURL}}/topic70/web-02/web.jpeg","imgFile":"web.jpeg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false},{"route":"https://www.youtube.com/watch?v=ST8obv2eR9Q&list=PLN09doY9z8oaAvapLBxBQgZj2Ird7nOE5&index=3","type":"web","title":"Lecture 3.\r","summary":"Overview of the CDK framework. Introduction to the Serverless model.","contentMd":"Lecture 3.\r\n\r\nOverview of the CDK framework. Introduction to the Serverless model.","frontMatter":{},"id":"web-03","img":"https://{{COURSEURL}}/topic70/web-03/web.jpeg","imgFile":"web.jpeg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false},{"route":"https://www.youtube.com/watch?v=yGHhK4k2qo0&t=2757s","type":"web","title":"Lecture 4.\r","summary":"AWS serverless services, including Lambda and DynamoDB.","contentMd":"Lecture 4.\r\n\r\nAWS serverless services, including Lambda and DynamoDB.","frontMatter":{},"id":"web-04","img":"https://{{COURSEURL}}/topic70/web-04/web.jpeg","imgFile":"web.jpeg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false},{"route":"https://www.youtube.com/watch?v=AL0ysB3y_Kc","type":"web","title":"Lecture 5.\r","summary":"AWS serverless services, including API Gateway and Cognito.","contentMd":"Lecture 5.\r\n\r\nAWS serverless services, including API Gateway and Cognito.","frontMatter":{},"id":"web-05","img":"https://{{COURSEURL}}/topic70/web-05/web.jpeg","imgFile":"web.jpeg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false},{"route":"https://www.youtube.com/watch?v=QVHlxIJpQms","type":"web","title":"Lecture 6 (Part 1).\r","summary":"AWS Cognito (Continued); IAM policies in the CDK.","contentMd":"Lecture 6 (Part 1).\r\n\r\nAWS Cognito (Continued); IAM policies in the CDK.","frontMatter":{},"id":"web-06_1","img":"https://{{COURSEURL}}/topic70/web-06_1/web.jpeg","imgFile":"web.jpeg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false},{"route":"https://www.youtube.com/watch?v=xAXpER508KM","type":"web","title":"Lecture 6 (Part 2).\r","summary":"Introduction to React App development.","contentMd":"Lecture 6 (Part 2).\r\n\r\nIntroduction to React App development.","frontMatter":{},"id":"web-06_2","img":"https://{{COURSEURL}}/topic70/web-06_2/web.jpeg","imgFile":"web.jpeg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false},{"route":"https://youtu.be/NPSw3icL0QI","type":"web","title":"Lecture 7.\r","summary":"The React Component Model","contentMd":"Lecture 7.\r\n\r\nThe React Component Model","frontMatter":{},"id":"web-07","img":"https://{{COURSEURL}}/topic70/web-07/web.jpeg","imgFile":"web.jpeg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false},{"route":"https://setu-ie.zoom.us/rec/share/gisdfJ7OvmtqX_aJh6qd8eCXIVlpA1sddjksMmL0zOHYPG2RhhoiIcalYzErHuxJ.SgqpCeqJ-J3jqSuw?startTime=1710163593000","type":"web","title":"Lecture 8.\r","summary":"React Navigation & Design Patterns","contentMd":"Lecture 8.\r\n\r\nReact Navigation & Design Patterns","frontMatter":{},"id":"web-08","img":"https://{{COURSEURL}}/topic70/web-08/web.jpeg","imgFile":"web.jpeg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false}]}],"properties":{"highlightstyle":"railscasts","credits":"Diarmuid O' Connor, Dr Frank Walsh. WIT","license":"Unless otherwise stated, this work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">Creative Commons Attribution 4.0 International License</a>.","ects":10,"faPanelicon":"fas fa-code-branch","faColour":"#ffd600","slack":"https://wit-msc-in-computing.slack.com/messages/GS3UZQFNF","moodle":"https://moodle.wit.ie/course/view.php?id=162937","ignorepin":1213,"ignore":["topic01-kg","topic03-legacy","topic04-legacy","topic05-legacy","topic06-legacy","topic07-legacy","topic08","topic09","topic10","topic11","topic12","topic13","topic12"]}}